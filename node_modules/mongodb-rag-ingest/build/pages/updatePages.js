"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.persistPages = exports.updatePages = void 0;
const mongodb_rag_core_1 = require("mongodb-rag-core");
const getChangedPages_1 = require("./getChangedPages");
/**
  Fetches pages from data sources and stores those that have changed in the data
  store.
 */
const updatePages = async ({ sources, pageStore, }) => {
    for await (const source of sources) {
        mongodb_rag_core_1.logger.info(`Fetching pages for ${source.name}`);
        const pages = await source.fetchPages();
        mongodb_rag_core_1.logger.info(`${source.name} returned ${pages.length} pages`);
        if (pages.length === 0) {
            // If a flaky data source returns no pages, we would mark all pages in
            // that source as deleted. This is probably not wanted.
            mongodb_rag_core_1.logger.warn(`Expected at least 1 page from ${source.name}. Discarding result.`);
            continue;
        }
        await (0, exports.persistPages)({
            pages,
            store: pageStore,
            sourceName: source.name,
        });
    }
};
exports.updatePages = updatePages;
/**
  Persists pages that have changed.
 */
const persistPages = async ({ store, pages, sourceName, }) => {
    const oldPages = await store.loadPages({ sources: [sourceName] });
    mongodb_rag_core_1.logger.info(`${sourceName} had ${oldPages.length} in the store`);
    const { created, updated, deleted } = await (0, getChangedPages_1.getChangedPages)({
        oldPages,
        newPages: pages,
    });
    mongodb_rag_core_1.logger.info(`${deleted.length} deleted / ${created.length} created / ${updated.length} updated`);
    await store.updatePages([...deleted, ...created, ...updated]);
};
exports.persistPages = persistPages;
//# sourceMappingURL=updatePages.js.map