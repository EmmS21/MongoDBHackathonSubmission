import { SnootyNode } from "./SnootyDataSource";
/**
  Return a string of MD from a Snooty AST node.
 */
export declare const renderSnootyTable: (node: SnootyNode) => string;
type RenderTableElementOptions = {
    isHeader: boolean;
};
export declare const renderRows: (rows: Row[], options: RenderTableElementOptions) => string;
export declare const renderCells: (cells: Cell[], options: RenderTableElementOptions) => string;
export type Cell = {
    columnName?: string;
    content: SnootyNode;
};
export type Row = {
    cells: Cell[];
};
export type Table = {
    headerRows: Row[];
    dataRows: Row[];
};
/**
  Turns a Snooty AST table into a Table data structure.

  Tables in Snooty are represented as lists of lists under a list-table
  directive. There is no concept for "rows" or "cells" in the AST, which adds
  friction when working with the Snooty AST directly -- especially considering
  that list already have rendering logic that differs from tables. Having an
  intermediate data structure `Table` with `Row`s and `Cell`s makes it easier to
  work with and render.
 */
export declare const parseSnootyTable: (node: SnootyNode) => Table;
export {};
//# sourceMappingURL=renderSnootyTable.d.ts.map