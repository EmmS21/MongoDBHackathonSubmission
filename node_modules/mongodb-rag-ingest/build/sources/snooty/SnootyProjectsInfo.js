"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareSnootySources = exports.makeSnootyProjectsInfo = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const mongodb_rag_core_1 = require("mongodb-rag-core");
const SnootyDataSource_1 = require("./SnootyDataSource");
const mongodb_rag_core_2 = require("mongodb-rag-core");
/**
  Creates a SnootyProjectsInfo object from the Snooty Data API GET projects
  endpoint.
 */
const makeSnootyProjectsInfo = async ({ snootyDataApiBaseUrl, }) => {
    const response = await (0, node_fetch_1.default)(new URL("projects", snootyDataApiBaseUrl));
    const { data } = await response.json();
    // Fix Snooty API data
    data.forEach((project) => {
        project.branches.forEach((branch) => {
            // Fix booleans that might be string "true" instead of boolean `true`. For more
            // context, see https://jira.mongodb.org/browse/DOP-3862
            branch.active =
                branch.active === "true" || branch.active === true;
            // Some urls are http instead of https
            branch.fullUrl = branch.fullUrl.replace("http://", "https://");
        });
    });
    return {
        _data: data,
        async getBaseUrl({ projectName, branchName }) {
            const metadata = data.find(({ project }) => project === projectName);
            const branchMetaData = metadata?.branches.find((branch) => branch.active && branch.gitBranchName === branchName);
            // Make sure there is an active branch at the specified branch name
            if (branchMetaData === undefined) {
                throw new Error(`For project '${projectName}', no active branch found for '${branchName}'.`);
            }
            return branchMetaData.fullUrl.replace("http://", "https://");
        },
        async getCurrentBranch({ projectName }) {
            return await getCurrentBranch(data, projectName);
        },
        async getCurrentVersionName({ projectName }) {
            const currentBranch = await getCurrentBranch(data, projectName);
            if (currentBranch.gitBranchName !== "master") {
                return currentBranch.gitBranchName;
            }
            else
                return;
        },
    };
};
exports.makeSnootyProjectsInfo = makeSnootyProjectsInfo;
/**
  Helper function used in methods of makeSnootyProjectsInfo()
 */
async function getCurrentBranch(data, projectName) {
    const metadata = data.find(({ project }) => project === projectName);
    const currentBranch = metadata?.branches.find(({ active, isStableBranch }) => active && isStableBranch);
    if (currentBranch === undefined) {
        throw new Error(`For project '${projectName}', no active branch found with isStableBranch == true.`);
    }
    return currentBranch;
}
/**
  Fill the details of the defined Snooty data sources with the info in the
  Snooty Data API projects endpoint.
 */
const prepareSnootySources = async ({ projects, snootyDataApiBaseUrl, }) => {
    const snootyProjectsInfo = await (0, exports.makeSnootyProjectsInfo)({
        snootyDataApiBaseUrl,
    });
    return (0, mongodb_rag_core_2.filterFulfilled)(await Promise.allSettled(projects.map(async (project) => {
        const { name: projectName } = project;
        const currentBranch = project.currentBranch ??
            (await snootyProjectsInfo.getCurrentBranch({
                projectName,
            })).gitBranchName;
        let version = project.versionNameOverride ??
            (await snootyProjectsInfo.getCurrentVersionName({
                projectName,
            }));
        version = version ? version + " (current)" : undefined;
        try {
            return (0, SnootyDataSource_1.makeSnootyDataSource)({
                name: `snooty-${project.name}`,
                project: {
                    ...project,
                    currentBranch,
                    version,
                    baseUrl: project.baseUrl?.replace(/\/?$/, "/") ??
                        (await snootyProjectsInfo.getBaseUrl({
                            projectName,
                            branchName: currentBranch,
                        })),
                },
                snootyDataApiBaseUrl,
            });
        }
        catch (error) {
            mongodb_rag_core_1.logger.error(`Failed to prepare snooty data source '${project.name}': ${error.message}`);
            throw error;
        }
    }))).map((result) => result.value);
};
exports.prepareSnootySources = prepareSnootySources;
//# sourceMappingURL=SnootyProjectsInfo.js.map