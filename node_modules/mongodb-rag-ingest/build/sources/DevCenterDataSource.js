"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeDevCenterPageBody = exports.extractTags = exports.makeDevCenterPage = exports.makeDevCenterDataSource = void 0;
const mongodb_rag_core_1 = require("mongodb-rag-core");
const assert_1 = require("assert");
const html_to_text_1 = require("html-to-text");
const mongodb_rag_core_2 = require("mongodb-rag-core");
const IngestEnvVars_1 = require("../IngestEnvVars");
const removeMarkdownImagesAndLinks_1 = require("./removeMarkdownImagesAndLinks");
const makeDevCenterDataSource = async ({ name, databaseName, collectionName, baseUrl, }) => {
    const { DEVCENTER_CONNECTION_URI } = (0, mongodb_rag_core_2.assertEnvVars)(IngestEnvVars_1.INGEST_ENV_VARS);
    return {
        name,
        async fetchPages() {
            const client = await new mongodb_rag_core_1.MongoClient(DEVCENTER_CONNECTION_URI).connect();
            try {
                const db = client.db(databaseName);
                const collection = db.collection(collectionName);
                const documents = collection.find();
                const pages = [];
                for await (const document of documents) {
                    if (!document.content) {
                        mongodb_rag_core_2.logger.warn(`Discarding empty content document: ${document.calculated_slug}`);
                        continue;
                    }
                    pages.push(makeDevCenterPage(document, name, baseUrl));
                }
                return pages;
            }
            finally {
                await client.close();
            }
        },
    };
};
exports.makeDevCenterDataSource = makeDevCenterDataSource;
function makeDevCenterPage(document, name, baseUrl) {
    (0, assert_1.strict)(document.content, "document.content must be defined");
    return {
        title: document.name,
        body: makeDevCenterPageBody({
            title: document.name,
            content: document.content,
        }),
        format: "md",
        sourceName: name,
        metadata: {
            tags: extractTags(document.tags),
            pageDescription: document.description,
            contentType: document.type,
        },
        url: /^https?:\/\//.test(document.calculated_slug)
            ? document.calculated_slug
            : new URL(document.calculated_slug.replace(/^\/?/, ""), // Strip leading slash (if present) to not clobber baseUrl path
            baseUrl.replace(/\/?$/, "/") // Add trailing slash to not lose last segment of baseUrl
            ).toString(),
    };
}
exports.makeDevCenterPage = makeDevCenterPage;
/**
  Extract relevant tags from dev center entry tags
 */
function extractTags(tags) {
    return tags
        .filter((tag) => tag.type === "L1Product" ||
        tag.type === "Technology" ||
        tag.type === "ProgrammingLanguage")
        .map((tag) => tag.name);
}
exports.extractTags = extractTags;
function makeDevCenterPageBody({ title, content, }) {
    const mdTitle = title ? `# ${title}\n\n` : "";
    content = mdTitle + content;
    // Remove HTML <div> and <img> tags
    // Replace all spaces with uncommon character ðŸŽƒ b/c html-to-text convert() removes new characters
    // at the beginning of lines. Then re-replace ðŸŽƒ with spaces after convert().
    content = (0, html_to_text_1.convert)(content.replaceAll(" ", "ðŸŽƒ"), {
        preserveNewlines: true,
        selectors: [{ selector: "img", format: "skip" }],
    }).replaceAll("ðŸŽƒ", " ");
    content = (0, removeMarkdownImagesAndLinks_1.removeMarkdownImagesAndLinks)(content);
    // remove YouTube markdown directives (e.g. `:youtube[]{some content}`)
    content = content.replaceAll(/:youtube\[\]\{(.*)\}/g, "");
    // remove unnecessary newlines
    content = content.replaceAll(/\n{3,}/g, "\n\n");
    return content;
}
exports.makeDevCenterPageBody = makeDevCenterPageBody;
//# sourceMappingURL=DevCenterDataSource.js.map