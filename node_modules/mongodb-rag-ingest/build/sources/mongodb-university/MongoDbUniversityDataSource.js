"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeMongoDbUniversityDataSource = exports.filterOnlyPublicActiveTiCatalogItems = void 0;
const makeUniversityPages_1 = require("./makeUniversityPages");
const MongoDbUniversityDataApiClient_1 = require("./MongoDbUniversityDataApiClient");
/**
  Filter function to only include public, published,
  and non-legacy MongoDB University content.

  > ⚠️ **Important** ⚠️
  >
  > You should include *only* this content or a subset of it
  > in externally facing applications.
 */
const filterOnlyPublicActiveTiCatalogItems = (item) => item.microsites.includes("University") &&
    item.status === "published" &&
    item.in_development === false &&
    item.legacy === false &&
    item.associated_videos.length > 0;
exports.filterOnlyPublicActiveTiCatalogItems = filterOnlyPublicActiveTiCatalogItems;
/**
  Data source constructor function for ingesting data
  from the MongoDB University Data API.
  (This is an internal API.)
 */
function makeMongoDbUniversityDataSource(params) {
    return {
        name: params.sourceName,
        async fetchPages() {
            const uniDataApiClient = (0, MongoDbUniversityDataApiClient_1.makeMongoDbUniversityDataApiClient)({
                baseUrl: params.baseUrl,
                apiKey: params.apiKey,
            });
            const { data: allTiCatalogItems } = await uniDataApiClient.getAllCatalogItems();
            const tiCatalogItems = allTiCatalogItems.filter(params.tiCatalogFilterFunc);
            const { data: videos } = await uniDataApiClient.getAllVideos();
            const universityPages = (0, makeUniversityPages_1.makeUniversityPages)({
                sourceName: params.sourceName,
                tiCatalogItems,
                videos,
                metadata: params.metadata,
            });
            return universityPages;
        },
    };
}
exports.makeMongoDbUniversityDataSource = makeMongoDbUniversityDataSource;
//# sourceMappingURL=MongoDbUniversityDataSource.js.map