"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenAiChatLlm = void 0;
require("dotenv/config");
const assert_1 = require("assert");
/**
  Construct the {@link ChatLlm} service using the [OpenAI ChatGPT API](https://learn.microsoft.com/en-us/azure/ai-services/openai/chatgpt-quickstart?tabs=command-line&pivots=programming-language-studio).
  The `ChatLlm` wraps the [@azure/openai](https://www.npmjs.com/package/@azure/openai) package.
 */
function makeOpenAiChatLlm({ deployment, openAiClient, openAiLmmConfigOptions, tools, }) {
    const toolDict = {};
    tools?.forEach((tool) => {
        const name = tool.definition.name;
        toolDict[name] = tool;
    });
    return {
        async answerQuestionStream({ messages, toolCallOptions, }) {
            const completionStream = await openAiClient.streamChatCompletions(deployment, messages, {
                ...openAiLmmConfigOptions,
                ...(toolCallOptions ? { functionCall: toolCallOptions } : {}),
                functions: tools?.map((tool) => tool.definition),
            });
            return completionStream;
        },
        async answerQuestionAwaited({ messages, toolCallOptions, }) {
            const { choices: [choice], } = await openAiClient.getChatCompletions(deployment, messages, {
                ...openAiLmmConfigOptions,
                ...(toolCallOptions ? { functionCall: toolCallOptions } : {}),
                functions: tools?.map((tool) => tool.definition),
            });
            const { message } = choice;
            if (!message) {
                throw new Error("No message returned from OpenAI");
            }
            return message;
        },
        async callTool({ messages, conversation, dataStreamer, request }) {
            const lastMessage = messages[messages.length - 1];
            // Only call tool if the message is an assistant message with a function call.
            (0, assert_1.strict)(lastMessage.role === "assistant" &&
                lastMessage.functionCall !== undefined, `Message must be a tool call`);
            (0, assert_1.strict)(Object.keys(toolDict).includes(lastMessage.functionCall.name), `Tool not found`);
            const { functionCall } = lastMessage;
            const tool = toolDict[functionCall.name];
            const toolResponse = await tool.call({
                functionArgs: JSON.parse(functionCall.arguments),
                conversation,
                dataStreamer,
                request,
            });
            return toolResponse;
        },
    };
}
exports.makeOpenAiChatLlm = makeOpenAiChatLlm;
//# sourceMappingURL=openAiChatLlm.js.map