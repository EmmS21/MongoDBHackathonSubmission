import { ObjectId, Db } from "mongodb-rag-core";
import { ConversationConstants, ConversationsService, Message, AddSomeMessageParams } from "./ConversationsService";
/**
  Create {@link ConversationsService} that uses MongoDB as a data store.
 */
export declare function makeMongoDbConversationsService(database: Db, conversationConstants?: ConversationConstants): ConversationsService;
export declare function createMessage(messageParams: AddSomeMessageParams): {
    role: "system";
    content: string;
    customData?: Record<string, unknown> | undefined;
    id: ObjectId;
    createdAt: Date;
} | {
    role: "user";
    content: string;
    customData?: Record<string, unknown> | undefined;
    contentForLlm?: string | undefined;
    preprocessedContent?: string | undefined;
    contextContent?: Partial<import("mongodb-rag-core").EmbeddedContent>[] | undefined;
    rejectQuery?: boolean | undefined;
    embedding?: number[] | undefined;
    id: ObjectId;
    createdAt: Date;
} | {
    role: "function";
    content: string;
    customData?: Record<string, unknown> | undefined;
    name: string;
    id: ObjectId;
    createdAt: Date;
} | {
    role: "assistant";
    content: string;
    customData?: Record<string, unknown> | undefined;
    rating?: boolean | undefined;
    userComment?: string | undefined;
    references?: {
        url: string;
        title: string;
    }[] | undefined;
    functionCall?: import("mongodb-rag-core").FunctionCall | undefined;
    id: ObjectId;
    createdAt: Date;
};
/**
  Create a {@link Message} object from the {@link OpenAiChatMessage} object.
 */
export declare function createMessageFromOpenAIChatMessage(chatMessage: AddSomeMessageParams): Message;
//# sourceMappingURL=mongodbConversations.d.ts.map