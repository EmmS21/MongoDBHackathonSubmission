import { Request as ExpressRequest, Response as ExpressResponse } from "express";
import { ConversationsService } from "../../services/ConversationsService";
import { DataStreamer } from "../../services/dataStreamer";
import { ChatLlm } from "../../services/ChatLlm";
import { ApiMessage } from "./utils";
import { z } from "zod";
import { AddCustomDataFunc, ConversationsRouterLocals } from "./conversationsRouter";
import { GenerateUserPromptFunc } from "../../processors/GenerateUserPromptFunc";
import { FilterPreviousMessages } from "../../processors/FilterPreviousMessages";
export declare const DEFAULT_MAX_INPUT_LENGTH = 300;
export declare const DEFAULT_MAX_USER_MESSAGES_IN_CONVERSATION = 7;
export type AddMessageRequestBody = z.infer<typeof AddMessageRequestBody>;
export declare const AddMessageRequestBody: z.ZodObject<{
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
}, {
    message: string;
}>;
export declare const AddMessageRequest: z.ZodObject<{
    headers: z.ZodObject<{
        "req-id": z.ZodString;
    }, "strip", z.ZodTypeAny, {
        "req-id": string;
    }, {
        "req-id": string;
    }>;
    params: z.ZodObject<{
        conversationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        conversationId: string;
    }, {
        conversationId: string;
    }>;
    query: z.ZodObject<{
        stream: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        stream?: string | undefined;
    }, {
        stream?: string | undefined;
    }>;
    body: z.ZodObject<{
        message: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        message: string;
    }, {
        message: string;
    }>;
}, "strip", z.ZodTypeAny, {
    headers: {
        "req-id": string;
    };
    params: {
        conversationId: string;
    };
    query: {
        stream?: string | undefined;
    };
    body: {
        message: string;
    };
}, {
    headers: {
        "req-id": string;
    };
    params: {
        conversationId: string;
    };
    query: {
        stream?: string | undefined;
    };
    body: {
        message: string;
    };
}>;
export type AddMessageRequest = z.infer<typeof AddMessageRequest>;
export interface AddMessageToConversationRouteParams {
    conversations: ConversationsService;
    llm: ChatLlm;
    generateUserPrompt?: GenerateUserPromptFunc;
    filterPreviousMessages?: FilterPreviousMessages;
    dataStreamer: DataStreamer;
    maxInputLengthCharacters?: number;
    maxUserMessagesInConversation?: number;
    addMessageToConversationCustomData?: AddCustomDataFunc;
}
export declare function makeAddMessageToConversationRoute({ conversations, llm, dataStreamer, generateUserPrompt, maxInputLengthCharacters, maxUserMessagesInConversation, filterPreviousMessages, addMessageToConversationCustomData, }: AddMessageToConversationRouteParams): (req: ExpressRequest<AddMessageRequest["params"]>, res: ExpressResponse<ApiMessage, ConversationsRouterLocals>) => Promise<ExpressResponse<{
    id: string;
    createdAt: number;
    role: "function" | "system" | "assistant" | "user";
    content: string;
    rating?: boolean | undefined;
    references?: {
        url: string;
        title: string;
    }[] | undefined;
}, ConversationsRouterLocals> | undefined>;
//# sourceMappingURL=addMessageToConversation.d.ts.map