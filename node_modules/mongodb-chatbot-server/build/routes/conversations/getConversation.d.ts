import { ConversationsService } from "../../services/ConversationsService";
import { Request as ExpressRequest, Response as ExpressResponse } from "express";
import { ApiConversation } from "./utils";
import { z } from "zod";
export type GetConversationRequest = z.infer<typeof GetConversationRequest>;
export declare const GetConversationRequest: z.ZodObject<{
    query: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    body: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    headers: z.ZodObject<{
        "req-id": z.ZodString;
    }, "strip", z.ZodTypeAny, {
        "req-id": string;
    }, {
        "req-id": string;
    }>;
    params: z.ZodObject<{
        conversationId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        conversationId: string;
    }, {
        conversationId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    headers: {
        "req-id": string;
    };
    params: {
        conversationId: string;
    };
    query?: {} | undefined;
    body?: {} | undefined;
}, {
    headers: {
        "req-id": string;
    };
    params: {
        conversationId: string;
    };
    query?: {} | undefined;
    body?: {} | undefined;
}>;
export interface GetConversationRouteParams {
    conversations: ConversationsService;
}
export declare function makeGetConversationRoute({ conversations, }: GetConversationRouteParams): (req: ExpressRequest, res: ExpressResponse<ApiConversation>) => Promise<ExpressResponse<{
    createdAt: number;
    _id: string;
    messages: {
        id: string;
        createdAt: number;
        role: "function" | "system" | "assistant" | "user";
        content: string;
        rating?: boolean | undefined;
        references?: {
            url: string;
            title: string;
        }[] | undefined;
    }[];
}, Record<string, any>>>;
//# sourceMappingURL=getConversation.d.ts.map