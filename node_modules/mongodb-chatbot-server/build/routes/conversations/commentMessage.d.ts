import { ConversationsService } from "../../services/ConversationsService";
import { Request as ExpressRequest, Response as ExpressResponse, NextFunction } from "express";
import { z } from "zod";
export type CommentMessageRequest = z.infer<typeof CommentMessageRequest>;
export declare const CommentMessageRequest: z.ZodObject<{
    query: z.ZodOptional<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
    headers: z.ZodObject<{
        "req-id": z.ZodString;
    }, "strip", z.ZodTypeAny, {
        "req-id": string;
    }, {
        "req-id": string;
    }>;
    params: z.ZodObject<{
        conversationId: z.ZodString;
        messageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        conversationId: string;
        messageId: string;
    }, {
        conversationId: string;
        messageId: string;
    }>;
    body: z.ZodObject<{
        comment: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        comment: string;
    }, {
        comment: string;
    }>;
}, "strip", z.ZodTypeAny, {
    headers: {
        "req-id": string;
    };
    params: {
        conversationId: string;
        messageId: string;
    };
    body: {
        comment: string;
    };
    query?: {} | undefined;
}, {
    headers: {
        "req-id": string;
    };
    params: {
        conversationId: string;
        messageId: string;
    };
    body: {
        comment: string;
    };
    query?: {} | undefined;
}>;
export interface CommentMessageRouteParams {
    conversations: ConversationsService;
    maxCommentLength?: number;
}
export declare function makeCommentMessageRoute({ conversations, maxCommentLength, }: CommentMessageRouteParams): (req: ExpressRequest, res: ExpressResponse<void>, next: NextFunction) => Promise<ExpressResponse<any, Record<string, any>> | undefined>;
//# sourceMappingURL=commentMessage.d.ts.map