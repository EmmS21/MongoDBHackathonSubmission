import { Conversation, Message } from "../../services/ConversationsService";
import { z } from "zod";
export type ApiMessage = z.infer<typeof ApiMessage>;
export declare const ApiMessage: z.ZodObject<{
    id: z.ZodString;
    role: z.ZodEnum<["system", "assistant", "user", "function"]>;
    content: z.ZodString;
    rating: z.ZodOptional<z.ZodBoolean>;
    createdAt: z.ZodNumber;
    references: z.ZodOptional<z.ZodArray<z.ZodObject<{
        url: z.ZodString;
        title: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        title: string;
    }, {
        url: string;
        title: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    createdAt: number;
    role: "function" | "system" | "assistant" | "user";
    content: string;
    rating?: boolean | undefined;
    references?: {
        url: string;
        title: string;
    }[] | undefined;
}, {
    id: string;
    createdAt: number;
    role: "function" | "system" | "assistant" | "user";
    content: string;
    rating?: boolean | undefined;
    references?: {
        url: string;
        title: string;
    }[] | undefined;
}>;
export type ApiConversation = z.infer<typeof ApiConversation>;
export declare const ApiConversation: z.ZodObject<{
    _id: z.ZodString;
    messages: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        role: z.ZodEnum<["system", "assistant", "user", "function"]>;
        content: z.ZodString;
        rating: z.ZodOptional<z.ZodBoolean>;
        createdAt: z.ZodNumber;
        references: z.ZodOptional<z.ZodArray<z.ZodObject<{
            url: z.ZodString;
            title: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            url: string;
            title: string;
        }, {
            url: string;
            title: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: number;
        role: "function" | "system" | "assistant" | "user";
        content: string;
        rating?: boolean | undefined;
        references?: {
            url: string;
            title: string;
        }[] | undefined;
    }, {
        id: string;
        createdAt: number;
        role: "function" | "system" | "assistant" | "user";
        content: string;
        rating?: boolean | undefined;
        references?: {
            url: string;
            title: string;
        }[] | undefined;
    }>, "many">;
    createdAt: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    createdAt: number;
    _id: string;
    messages: {
        id: string;
        createdAt: number;
        role: "function" | "system" | "assistant" | "user";
        content: string;
        rating?: boolean | undefined;
        references?: {
            url: string;
            title: string;
        }[] | undefined;
    }[];
}, {
    createdAt: number;
    _id: string;
    messages: {
        id: string;
        createdAt: number;
        role: "function" | "system" | "assistant" | "user";
        content: string;
        rating?: boolean | undefined;
        references?: {
            url: string;
            title: string;
        }[] | undefined;
    }[];
}>;
export declare function convertMessageFromDbToApi(message: Message): ApiMessage;
export declare function convertConversationFromDbToApi(conversation: Conversation): ApiConversation;
export declare function isValidIp(ip?: string): boolean;
export declare function areEquivalentIpAddresses(ip1: string, ip2: string): boolean;
export type RequestError = Error & {
    name: "RequestError";
    httpStatus: number;
};
export declare const makeRequestError: ({ message, httpStatus, stack: stackIn, }: Omit<RequestError, "name">) => RequestError;
//# sourceMappingURL=utils.d.ts.map