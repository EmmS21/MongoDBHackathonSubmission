import { References } from "mongodb-rag-core";
import { Request as ExpressRequest } from "express";
import { ChatLlm, SomeMessage, DataStreamer, Conversation, OpenAiChatMessage } from "../services";
export interface GenerateResponseParams {
    shouldStream: boolean;
    llm: ChatLlm;
    llmConversation: OpenAiChatMessage[];
    dataStreamer: DataStreamer;
    references?: References;
    reqId: string;
    llmNotWorkingMessage: string;
    noRelevantContentMessage: string;
    conversation?: Conversation;
    request?: ExpressRequest;
}
interface GenerateResponseReturnValue {
    messages: SomeMessage[];
}
/**
  Generate a response with/without streaming. Supports tool calling
  and standard response generation.
 */
export declare function generateResponse({ shouldStream, llm, llmConversation, dataStreamer, references, reqId, llmNotWorkingMessage, noRelevantContentMessage, conversation, request, }: GenerateResponseParams): Promise<GenerateResponseReturnValue>;
export type AwaitGenerateResponseParams = Omit<GenerateResponseParams, "shouldStream" | "dataStreamer">;
export declare function awaitGenerateResponse({ reqId, llmConversation, llm, conversation, references, llmNotWorkingMessage, noRelevantContentMessage, request, }: AwaitGenerateResponseParams): Promise<GenerateResponseReturnValue>;
export type StreamGenerateResponseParams = Omit<GenerateResponseParams, "shouldStream">;
export declare function streamGenerateResponse({ dataStreamer, llm, llmConversation, conversation, reqId, references, noRelevantContentMessage, llmNotWorkingMessage, request, }: StreamGenerateResponseParams): Promise<GenerateResponseReturnValue>;
export declare function convertMessageFromLlmToDb(message: OpenAiChatMessage): SomeMessage;
export {};
//# sourceMappingURL=generateResponse.d.ts.map