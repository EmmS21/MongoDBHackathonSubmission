{"version":3,"file":"index.js","sources":["../src/CopyButton/constants.ts","../src/CopyButton/CopyButton.styles.ts","../src/CopyButton/CopyButton.tsx","../src/CustomSelectMenuButton/CustomSelectMenuButton.tsx","../src/LanguageSwitcher/LanguageSwitcher.styles.ts","../src/LanguageSwitcher/LanguageSwitcher.tsx","../src/Panel/Panel.styles.ts","../src/globalStyles.tsx","../src/Panel/Panel.tsx","../src/languages.ts","../src/renderingPlugin/renderingPlugin.tsx","../src/Syntax/SyntaxContext.tsx","../src/Syntax/Syntax.tsx","../src/types.ts","../src/WindowChrome/WindowChrome.styles.ts","../src/WindowChrome/WindowChrome.tsx","../src/Code/Code.types.ts","../src/Code/Code.styles.ts","../src/Code/Code.tsx"],"sourcesContent":["export const COPIED_SUCCESS_DURATION = 1500;\nexport const COPIED_TEXT = 'Copied!';\nexport const COPY_TEXT = 'Copy';\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const copiedThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.white};\n    background-color: ${palette.green.dark1};\n\n    &:focus,\n    &:hover {\n      color: ${palette.white};\n\n      &:before {\n        background-color: ${palette.green.dark1};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.dark3};\n    background-color: ${palette.green.base};\n\n    &:focus,\n    &:hover {\n      color: ${palette.gray.dark3};\n\n      &:before {\n        background-color: ${palette.green.base};\n      }\n    }\n  `,\n};\n\nexport const copyButtonThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    align-self: center;\n    color: ${palette.gray.base};\n  `,\n  [Theme.Dark]: css`\n    align-self: center;\n    color: ${palette.gray.light1};\n  `,\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport ClipboardJS from 'clipboard';\n\nimport { VisuallyHidden } from '@leafygreen-ui/a11y';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useBackdropClick } from '@leafygreen-ui/hooks';\nimport CheckmarkIcon from '@leafygreen-ui/icon/dist/Checkmark';\nimport CopyIcon from '@leafygreen-ui/icon/dist/Copy';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport {\n  useDarkMode,\n  usePopoverPortalContainer,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { keyMap } from '@leafygreen-ui/lib';\nimport Tooltip, { Align, Justify } from '@leafygreen-ui/tooltip';\n\nimport { COPIED_SUCCESS_DURATION, COPIED_TEXT, COPY_TEXT } from './constants';\nimport { copiedThemeStyle, copyButtonThemeStyles } from './CopyButton.styles';\nimport { CopyProps } from './CopyButton.types';\n\nfunction CopyButton({ onCopy, contents }: CopyProps) {\n  const [copied, setCopied] = useState(false);\n  /**\n   * `CopyButton` controls `open` state of tooltip because when `copied` state\n   * changes, it causes the tooltip to re-render\n   */\n  const [open, setOpen] = useState(false);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const { theme } = useDarkMode();\n  const { portalContainer } = usePopoverPortalContainer();\n\n  /**\n   * toggles `open` state of tooltip\n   */\n  const closeTooltip = () => setOpen(false);\n  const openTooltip = () => setOpen(true);\n\n  /**\n   * forcibly closes tooltip if user tabs focus on tooltip and clicks\n   * outside of the trigger\n   */\n  useBackdropClick(closeTooltip, buttonRef, open);\n\n  useEffect(() => {\n    if (!buttonRef.current) {\n      return;\n    }\n\n    const clipboard = new ClipboardJS(buttonRef.current, {\n      text: () => contents,\n      container: portalContainer,\n    });\n\n    if (copied) {\n      const timeoutId = setTimeout(() => {\n        setCopied(false);\n      }, COPIED_SUCCESS_DURATION);\n\n      return () => clearTimeout(timeoutId);\n    }\n\n    return () => clipboard.destroy();\n  }, [buttonRef, contents, copied, portalContainer]);\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    onCopy?.();\n    setCopied(true);\n  };\n\n  /**\n   * `handleKeyDown` listener used to maintain UX parity with mouse events\n   */\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case keyMap.Escape:\n      case keyMap.Tab: {\n        closeTooltip();\n        break;\n      }\n\n      case keyMap.Enter:\n      case keyMap.Space: {\n        e.preventDefault();\n        buttonRef.current?.click();\n        buttonRef.current?.focus();\n        break;\n      }\n    }\n  };\n\n  /**\n   * `handleMouseEnter` and `handleMouseLeave` are used to control `open`\n   * state when mouse hovers over tooltip trigger\n   */\n  const handleMouseEnter = () => {\n    openTooltip();\n  };\n\n  const handleMouseLeave = () => {\n    closeTooltip();\n  };\n\n  /**\n   * `shouldClose` indicates to `Tooltip` component that tooltip should\n   * remain open even if trigger re-renders\n   */\n  const shouldClose = () => !open;\n\n  return (\n    <Tooltip\n      data-testid=\"code_copy-button_tooltip\"\n      open={open}\n      setOpen={setOpen}\n      align={Align.Top}\n      justify={Justify.Middle}\n      trigger={\n        <IconButton\n          data-testid=\"code_copy-button\"\n          ref={buttonRef}\n          aria-label={COPY_TEXT}\n          className={cx(copyButtonThemeStyles[theme], {\n            [copiedThemeStyle[theme]]: copied,\n          })}\n          onClick={handleClick}\n          onKeyDown={handleKeyDown}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n        >\n          {copied ? <CheckmarkIcon /> : <CopyIcon />}\n          {copied && (\n            <VisuallyHidden role=\"alert\">{COPIED_TEXT}</VisuallyHidden>\n          )}\n        </IconButton>\n      }\n      shouldClose={shouldClose}\n    >\n      {copied ? COPIED_TEXT : COPY_TEXT}\n    </Tooltip>\n  );\n}\n\nCopyButton.displayName = 'CopyButton';\n\nexport default CopyButton;\n","import React from 'react';\n\nimport Button, { ButtonProps } from '@leafygreen-ui/button';\n\n/**\n * Custom language switcher button.\n *\n * Passing down just the function which will be instantiated inside `Select`\n * @internal\n */\nexport const CustomSelectMenuButton = React.forwardRef(\n  ({ children, ...props }: ButtonProps, ref) => (\n    <Button {...props} ref={ref}>\n      {children}\n    </Button>\n  ),\n);\n\nCustomSelectMenuButton.displayName = 'CustomSelectMenuButton';\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const containerStyle = css`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const menuButtonStyle = css`\n  // Override default menuButton styles\n  margin-top: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 0px;\n  border: 0;\n  font-size: 12px;\n\n  &:hover[aria-disabled='false'],\n  &:focus,\n  &:active {\n    box-shadow: 0 0 0 0;\n    border: 0;\n  }\n\n  // Override button defaults\n  > *:last-child {\n    grid-template-columns: 16px 1fr 16px;\n    padding: 0 12px;\n    > svg {\n      width: 16px;\n      height: 16px;\n    }\n  }\n`;\n\nexport const buttonModeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${palette.white};\n    border-right: 1px solid ${palette.gray.light2};\n    box-shadow: 0 0 0 0;\n\n    &:hover[aria-disabled='false'],\n    &:active,\n    &:focus {\n      border-right: 1px solid ${palette.gray.light2};\n    }\n\n    &:hover[aria-disabled='false'] {\n      background-color: ${palette.gray.light2};\n    }\n\n    &:focus-visible {\n      background-color: ${palette.blue.light2};\n    }\n  `,\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.dark2};\n    border-right: 1px solid ${palette.gray.dark1};\n    color: ${palette.gray.light2};\n\n    &:hover[aria-disabled='false'],\n    &:focus,\n    &:active {\n      border-right: 1px solid ${palette.gray.dark1};\n    }\n\n    &:hover[aria-disabled='false'],\n    &:active {\n      background-color: ${palette.gray.dark1};\n    }\n\n    &:focus-visible {\n      background-color: ${palette.blue.light1};\n    }\n  `,\n};\n\nexport const selectStyle = css`\n  min-width: 144px;\n  height: 100%;\n`;\n\nexport const iconMargin = css`\n  margin-right: ${spacing[3]}px;\n`;\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { usePrevious } from '@leafygreen-ui/hooks';\nimport { isComponentGlyph } from '@leafygreen-ui/icon';\nimport FileIcon from '@leafygreen-ui/icon/dist/File';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { isComponentType } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { Option, Select } from '@leafygreen-ui/select';\n\nimport { CustomSelectMenuButton } from '../CustomSelectMenuButton';\nimport { LanguageOption, PopoverProps } from '../types';\n\nimport {\n  buttonModeStyle,\n  containerStyle,\n  iconMargin,\n  menuButtonStyle,\n  selectStyle,\n} from './LanguageSwitcher.styles';\n\nfunction isLeafyGreenIcon(element: React.ReactNode) {\n  if (isComponentGlyph(element) || isComponentType(element, 'Icon')) {\n    return true;\n  }\n\n  return false;\n}\n\ninterface Props extends PopoverProps {\n  language: LanguageOption;\n  languageOptions: Array<LanguageOption>;\n  onChange: (arg0: LanguageOption) => void;\n}\n\nfunction LanguageSwitcher({\n  language,\n  languageOptions,\n  onChange,\n  usePortal,\n  portalClassName,\n  portalContainer,\n  scrollContainer,\n  popoverZIndex,\n}: Props) {\n  const { theme, darkMode } = useDarkMode();\n  const previousLanguage = usePrevious(language);\n\n  const handleChange = (val: string) => {\n    if (val === '' && previousLanguage !== undefined) {\n      return onChange(previousLanguage);\n    }\n\n    const selectedOption = languageOptions.find(\n      option => option.displayName === val,\n    );\n\n    if (selectedOption !== undefined) {\n      onChange(selectedOption);\n    }\n  };\n\n  const iconStyle = cx(\n    iconMargin,\n    css`\n      color: ${darkMode ? palette.gray.light1 : palette.gray.base};\n    `,\n  );\n\n  // Placeholder for file icon\n  let renderedLogo = <FileIcon className={iconStyle} />;\n\n  if (language.image != null) {\n    if (isLeafyGreenIcon(language.image)) {\n      renderedLogo = React.cloneElement(language.image, {\n        className: iconStyle,\n      });\n    } else {\n      renderedLogo = React.cloneElement(language.image, {\n        className: iconMargin,\n      });\n    }\n  }\n\n  const popoverProps = {\n    popoverZIndex,\n    usePortal,\n    portalClassName,\n    portalContainer,\n    scrollContainer,\n  } as const;\n\n  return (\n    <div className={containerStyle}>\n      <Select\n        darkMode={darkMode}\n        onChange={handleChange}\n        aria-labelledby=\"Language Picker\"\n        value={language?.displayName}\n        className={selectStyle}\n        allowDeselect={false}\n        {...popoverProps}\n        __INTERNAL__menuButtonSlot__={CustomSelectMenuButton}\n        __INTERNAL__menuButtonSlotProps__={{\n          className: cx(menuButtonStyle, buttonModeStyle[theme]),\n          leftGlyph: renderedLogo,\n        }}\n      >\n        {languageOptions?.map(option => (\n          <Option key={option?.displayName} value={option?.displayName}>\n            {option?.displayName}\n          </Option>\n        ))}\n      </Select>\n    </div>\n  );\n}\n\nLanguageSwitcher.displayName = 'LanguageSwitcher';\n\nexport default LanguageSwitcher;\n","import { css, cx } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const basePanelStyle = css`\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  gap: ${spacing[1]}px;\n\n  svg {\n    width: 16px;\n    height: 16px;\n  }\n`;\n\nexport const basePanelThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${palette.white};\n  `,\n  [Theme.Dark]: css`\n    background-color: ${palette.gray.dark2};\n  `,\n};\n\nexport const sidePanelStyle = css`\n  flex-direction: column;\n  padding: 6px;\n  border-left: solid 1px;\n`;\n\nexport const sidePanelThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: cx(\n    sidePanelStyle,\n    css`\n      border-color: ${palette.gray.light2};\n    `,\n  ),\n  [Theme.Dark]: cx(\n    sidePanelStyle,\n    css`\n      border-color: ${palette.gray.dark2};\n    `,\n  ),\n};\n\nexport const languageSwitcherPanelStyle = css`\n  flex-direction: row;\n  border-bottom: 1px solid;\n  justify-content: space-between;\n  padding: 0;\n  padding-right: 8px;\n  height: 40px; // 28px (icon) + 2 x 6px (focus shadow). Can't use padding b/c switcher\n`;\n\nexport const languageSwitcherPanelThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: cx(\n    languageSwitcherPanelStyle,\n    css`\n      border-color: ${palette.gray.light2};\n    `,\n  ),\n  [Theme.Dark]: cx(\n    languageSwitcherPanelStyle,\n    css`\n      border-color: ${palette.gray.dark1};\n    `,\n  ),\n};\n","import { injectGlobal } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\ninterface Base16Palette {\n  0: string; // Background\n  1: string; // Borders / non-text graphical accents\n  2: string; // Comments, Doctags, Formulas\n  3: string; // Default Text\n  4: string; // Highlights\n  5: string; // Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted\n  6: string; // Classes, Markup Bold, Search Text Background\n  7: string; // Strings, Inherited Class, Markup Code, Diff Inserted\n  8: string; // Support, Regular Expressions, Escape Characters, Markup Quotes\n  9: string; // Functions, Methods, Classes, Names, Sections, Literals\n  10: string; // Keywords, Storage, Selector, Markup Italic, Diff Changed\n}\n\nexport const variantColors: { readonly [K in Theme]: Base16Palette } = {\n  [Theme.Light]: {\n    0: palette.gray.light3,\n    1: palette.gray.light2,\n    2: palette.gray.dark2,\n    3: palette.black,\n    4: palette.white,\n    5: '#D83713',\n    6: '#956d00',\n    7: '#12824D',\n    8: '#007ab8',\n    9: '#016ee9',\n    10: '#CC3887',\n  },\n\n  [Theme.Dark]: {\n    0: palette.black,\n    1: palette.gray.dark2,\n    2: palette.gray.light1,\n    3: palette.gray.light3,\n    4: palette.gray.dark2,\n    5: '#FF6F44',\n    6: '#EDB210',\n    7: '#35DE7B',\n    8: '#a5e3ff',\n    9: '#2dc4ff',\n    10: '#FF7DC3',\n  },\n};\n\nconst getStyles = (theme: Theme): string => `\n  .lg-highlight-hljs-${theme} {\n    \n    .lg-highlight-keyword,\n    .lg-highlight-keyword.lg-highlight-function,\n    .lg-highlight-keyword.lg-highlight-class,\n    .lg-highlight-selector-tag,\n    .lg-highlight-selector-attr,\n    .lg-highlight-selector-pseudo,\n    .lg-highlight-selector-id,\n    .lg-highlight-selector-class {\n      color: ${variantColors[theme][10]};\n    }\n\n    .lg-highlight-regexp,\n    .lg-highlight-number,\n    .lg-highlight-literal,\n    .lg-highlight-function.lg-highlight-title {\n      color: ${variantColors[theme][9]};\n    }\n\n    .lg-highlight-quote,\n    .lg-highlight-section,\n    .lg-highlight-name {\n      color: ${variantColors[theme][8]};\n    }\n\n    .lg-highlight-string,\n    .lg-highlight-addition {\n      color: ${variantColors[theme][7]};\n    }\n\n    .lg-highlight-meta,\n    .lg-highlight-meta-string {\n      color: ${variantColors[theme][6]};\n    }\n\n    .lg-highlight-variable,\n    .lg-highlight-deletion,\n    .lg-highlight-symbol,\n    .lg-highlight-bullet,\n    .lg-highlight-meta,\n    .lg-highlight-link,\n    .lg-highlight-attr,\n    .lg-highlight-attribute,\n    .lg-highlight-language,\n    .lg-highlight-template-variable,\n    .lg-highlight-built_in,\n    .lg-highlight-type,\n    .lg-highlight-params {\n      color: ${variantColors[theme][5]}\n    }\n\n    .lg-highlight-title,\n    .lg-highlight-class.lg-highlight-title {\n      color: ${variantColors[theme][3]};\n    }\n\n    .lg-highlight-doctag,\n    .lg-highlight-formula {\n      color: ${variantColors[theme][3]};\n    }\n  \n    .lg-highlight-comment {\n      color: ${variantColors[theme][2]};\n      font-style: italic;\n    }\n  \n    .lg-highlight-string {\n      font-weight: 600;\n    }\n    \n    .lg-highlight-emphasis {\n      font-style: italic;\n    }\n  \n    .lg-highlight-strong {\n      font-weight: ${fontWeights.bold};\n    }\n  }\n`;\n\nexport function injectGlobalStyles() {\n  Object.values(Theme).forEach(theme => injectGlobal(getStyles(theme)));\n}\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport CopyButton from '../CopyButton/CopyButton';\nimport LanguageSwitcher from '../LanguageSwitcher/LanguageSwitcher';\nimport {\n  LanguageOption,\n  LanguageSwitcher as LanguageSwitcherProps,\n  PopoverProps,\n} from '../types';\n\nimport {\n  basePanelStyle,\n  basePanelThemeStyle,\n  languageSwitcherPanelThemeStyles,\n  sidePanelThemeStyles,\n} from './Panel.styles';\n\ntype PanelProps = Partial<Omit<LanguageSwitcherProps, 'language'>> & {\n  onCopy?: Function;\n  contents: string;\n  showCopyButton?: boolean;\n  language?: LanguageOption;\n  isMultiline?: boolean;\n  customActionButtons?: Array<React.ReactElement>;\n  showCustomActionButtons?: boolean;\n  className?: string;\n} & PopoverProps;\n\nfunction Panel({\n  language,\n  languageOptions,\n  contents,\n  onChange,\n  onCopy,\n  showCopyButton,\n  customActionButtons,\n  showCustomActionButtons,\n  usePortal,\n  portalClassName,\n  portalContainer,\n  scrollContainer,\n  popoverZIndex,\n  className,\n}: PanelProps) {\n  const { theme } = useDarkMode();\n\n  const popoverProps = {\n    popoverZIndex,\n    usePortal,\n    portalClassName,\n    portalContainer,\n    scrollContainer,\n  } as const;\n\n  return (\n    <div\n      className={cx(\n        basePanelStyle,\n        basePanelThemeStyle[theme],\n        {\n          [sidePanelThemeStyles[theme]]: !language,\n          [languageSwitcherPanelThemeStyles[theme]]: !!language,\n        },\n        className,\n      )}\n      data-testid=\"leafygreen-code-panel\"\n    >\n      {language !== undefined &&\n        languageOptions !== undefined &&\n        onChange !== undefined && (\n          <LanguageSwitcher\n            onChange={onChange}\n            language={language}\n            languageOptions={languageOptions}\n            {...popoverProps}\n          />\n        )}\n\n      {showCopyButton && (\n        <CopyButton\n          onCopy={onCopy}\n          contents={contents}\n          withLanguageSwitcher={!!language}\n        />\n      )}\n      {showCustomActionButtons && (\n        <>{customActionButtons?.map((action: React.ReactNode) => action)}</>\n      )}\n    </div>\n  );\n}\n\nPanel.displayName = 'Panel';\n\nexport default Panel;\n","import bash from 'highlight.js/lib/languages/bash';\nimport c from 'highlight.js/lib/languages/c';\nimport cpp from 'highlight.js/lib/languages/cpp';\nimport csharp from 'highlight.js/lib/languages/csharp';\nimport dart from 'highlight.js/lib/languages/dart';\nimport diff from 'highlight.js/lib/languages/diff';\nimport go from 'highlight.js/lib/languages/go';\nimport http from 'highlight.js/lib/languages/http';\nimport ini from 'highlight.js/lib/languages/ini';\nimport java from 'highlight.js/lib/languages/java';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport json from 'highlight.js/lib/languages/json';\nimport kotlin from 'highlight.js/lib/languages/kotlin';\nimport objectivec from 'highlight.js/lib/languages/objectivec';\nimport perl from 'highlight.js/lib/languages/perl';\nimport php from 'highlight.js/lib/languages/php';\nimport properties from 'highlight.js/lib/languages/properties';\nimport python from 'highlight.js/lib/languages/python';\nimport ruby from 'highlight.js/lib/languages/ruby';\nimport rust from 'highlight.js/lib/languages/rust';\nimport scala from 'highlight.js/lib/languages/scala';\nimport shell from 'highlight.js/lib/languages/shell';\nimport sql from 'highlight.js/lib/languages/sql';\nimport swift from 'highlight.js/lib/languages/swift';\nimport typescript from 'highlight.js/lib/languages/typescript';\nimport xml from 'highlight.js/lib/languages/xml';\nimport yaml from 'highlight.js/lib/languages/yaml';\n\nexport const languageParsers = {\n  javascript,\n  typescript,\n  c,\n  cpp,\n  csharp,\n  go,\n  http,\n  ini,\n  java,\n  perl,\n  php,\n  properties,\n  python,\n  ruby,\n  rust,\n  scala,\n  swift,\n  kotlin,\n  objectivec,\n  dart,\n  bash,\n  shell,\n  sql,\n  yaml,\n  json,\n  diff,\n  xml,\n} as const;\n\nexport const SupportedLanguages = {\n  JavaScript: 'javascript',\n  JS: 'js', // Javascript alias\n  TypeScript: 'typescript',\n  TS: 'ts', // Typescript alias\n  C: 'c',\n  Cpp: 'cpp',\n  Csharp: 'csharp',\n  Cs: 'cs', // C# alias\n  Go: 'go',\n  Html: 'xml', // HTML alias\n  Http: 'http',\n  Ini: 'ini',\n  Java: 'java',\n  Perl: 'perl',\n  Php: 'php',\n  Properties: 'properties',\n  Python: 'python',\n  Ruby: 'ruby',\n  Rust: 'rust',\n  Scala: 'scala',\n  Swift: 'swift',\n  Kotlin: 'kotlin',\n  ObjectiveC: 'objectivec',\n  Dart: 'dart',\n  Bash: 'bash',\n  Shell: 'shell',\n  Sql: 'sql',\n  Yaml: 'yaml',\n  Json: 'json',\n  Graphql: 'graphql',\n  Diff: 'diff',\n  Xml: 'xml',\n} as const;\n\nexport type SupportedLanguages =\n  (typeof SupportedLanguages)[keyof typeof SupportedLanguages];\n","import React from 'react';\nimport flatMap from 'lodash/flatMap';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { palette } from '@leafygreen-ui/palette';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nimport {\n  LeafyGreenHighlightResult,\n  LeafyGreenHLJSPlugin,\n  TokenObject,\n} from '../highlight';\nimport { useSyntaxContext } from '../Syntax/SyntaxContext';\n\ninterface TokenProps {\n  kind?: string;\n  children: React.ReactNode;\n}\n\nexport function generateKindClassName(...kinds: Array<any>): string {\n  const prefix = 'lg-highlight-';\n  return kinds\n    .filter((str): str is string => isString(str) && str.length > 0)\n    .map(kind => {\n      // Sometimes, a kind will have run through this function before.\n      // This ensures we don't duplicate prefixes.\n      if (kind.startsWith(prefix)) {\n        return kind;\n      }\n\n      const classes = kind\n        .split('.')\n        .map(k => `${prefix}${k}`)\n        .join(' ');\n\n      return classes;\n    })\n    .join(' ');\n}\n\nfunction childrenAsKeywords(...children: Array<string>) {\n  const keywords = ['function', 'class'];\n  return children.filter(child => keywords.includes(child));\n}\n\nfunction Token({ kind, children }: TokenProps) {\n  return <span className={kind}>{children}</span>;\n}\n\ntype TreeItem =\n  | null\n  | undefined\n  | string\n  | Array<string | TokenObject>\n  | TokenObject;\n\nfunction isArray(item: any): item is Array<any> {\n  return item != null && item instanceof Array;\n}\n\nfunction isObject(item: any): item is object {\n  return item != null && typeof item === 'object' && !(item instanceof Array);\n}\n\nfunction isString(item: any): item is string {\n  return item != null && typeof item === 'string';\n}\n\nfunction isNumber(item: any): item is number {\n  return item != null && typeof item === 'number';\n}\n\nfunction isTokenObject(item: any): item is TokenObject {\n  if (item == null || typeof item !== 'object') {\n    return false;\n  }\n\n  return typeof item.kind === 'string' && item.children instanceof Array;\n}\n\nexport function processToken(token: TreeItem, key?: number): React.ReactNode {\n  if (token == null) {\n    return null;\n  }\n\n  if (isString(token)) {\n    return token;\n  }\n\n  if (isArray(token)) {\n    return token.map(processToken);\n  }\n\n  if (isObject(token)) {\n    return (\n      <Token key={key} kind={token.kind}>\n        {processToken(token.children)}\n      </Token>\n    );\n  }\n\n  return token;\n}\n\nconst cellStyle = css`\n  border-spacing: 0;\n  vertical-align: top;\n  padding: 0 ${spacing[3]}px;\n`;\n\nfunction getHighlightedRowStyle(darkMode: boolean) {\n  let backgroundColor: string, backgroundImage: string, borderColor: string;\n\n  if (darkMode) {\n    backgroundColor = 'transparent';\n    backgroundImage = `linear-gradient(90deg, ${palette.gray.dark3}, ${palette.black})`;\n    borderColor = palette.gray.dark3;\n  } else {\n    backgroundColor = palette.yellow.light3;\n    backgroundImage = 'none';\n    borderColor = palette.yellow.light2;\n  }\n\n  return css`\n    background-color: ${backgroundColor};\n    background-image: ${backgroundImage};\n    // Fixes an issue in Safari where the gradient applied to the table row would be applied\n    // to each cell in the row instead of being continuous across cells.\n    background-attachment: fixed;\n\n    // Selects all children of a highlighted row, and adds a border top\n    & > td {\n      border-top: 1px solid ${borderColor};\n    }\n\n    // Selects following rows after a highlighted row, and adds a border top\n    // We don't add border bottoms here to support consecutive highlighted rows.\n    & + tr > td {\n      border-top: 1px solid ${borderColor};\n    }\n\n    // Remove borders between consecutive highlighted rows\n    & + & > td {\n      border-top: 0;\n    }\n\n    // If the highlighted row is the last child, then we add a border bottom\n    &:last-child > td {\n      border-bottom: 1px solid ${borderColor};\n    }\n  `;\n}\n\ninterface LineTableRowProps {\n  lineNumber?: number;\n  children: React.ReactNode;\n  highlighted?: boolean;\n  darkMode: boolean;\n}\n\nexport function LineTableRow({\n  lineNumber,\n  highlighted,\n  darkMode,\n  children,\n}: LineTableRowProps) {\n  const numberColor = darkMode ? palette.gray.light1 : palette.gray.dark1;\n  const highlightedNumberColor = darkMode\n    ? palette.gray.light3\n    : palette.yellow.dark2;\n\n  return (\n    <tr className={cx({ [getHighlightedRowStyle(darkMode)]: highlighted })}>\n      {lineNumber && (\n        <td\n          className={cx(\n            cellStyle,\n            css`\n              user-select: none;\n              text-align: right;\n              padding-left: ${spacing[3] - 1}px;\n              padding-right: 0;\n              color: ${highlighted ? highlightedNumberColor : numberColor};\n            `,\n          )}\n        >\n          {lineNumber}\n        </td>\n      )}\n\n      <td className={cellStyle}>{children}</td>\n    </tr>\n  );\n}\n\ninterface FlatTokenObject {\n  kind: string;\n  children: Array<string>;\n}\n\n// Check if object is a TokenObject which has an array with a single string element within it.\nfunction isFlattenedTokenObject(obj: TokenObject): obj is FlatTokenObject {\n  // default to an empty object in the off-chance \"obj\" is null or undefined.\n  const { children } = obj ?? {};\n\n  if (isArray(children) && children.length === 1 && isString(children[0])) {\n    return true;\n  }\n\n  return false;\n}\n\n// If an array of tokens contains an object with more than one children, this function will flatten that tree recursively.\nexport function flattenNestedTree(\n  children: TokenObject['children'] | TokenObject,\n  kind?: string,\n): Array<string | FlatTokenObject> {\n  if (typeof children === 'string') {\n    return children;\n  }\n\n  if (isTokenObject(children)) {\n    return flattenNestedTree(children.children, kind);\n  }\n\n  // Generate a flat map function with a closure around parent's kind\n  function flatMapTreeWithKinds(...parentKinds: Array<string | undefined>) {\n    parentKinds = parentKinds.filter(\n      (str): str is string => isString(str) && str.length > 0,\n    );\n    return function (\n      entity: string | TokenObject,\n    ): string | FlatTokenObject | Array<string | FlatTokenObject> {\n      if (isString(entity)) {\n        return parentKinds.length > 0\n          ? {\n              kind: generateKindClassName(\n                kind,\n                ...parentKinds,\n                ...childrenAsKeywords(entity),\n              ),\n              children: [entity],\n            }\n          : entity; // entity is basic text\n      }\n\n      // If this is a nested entity, then flat map it's children\n      if ((entity?.children?.length ?? 0) >= 1) {\n        // Generate a new flat map function with this entity's kind\n        return flatMap(\n          entity.children,\n          flatMapTreeWithKinds(kind, entity.kind, ...parentKinds),\n        );\n      }\n\n      if (isFlattenedTokenObject(entity)) {\n        return {\n          kind: generateKindClassName(\n            kind,\n            entity.kind,\n            ...parentKinds,\n            ...childrenAsKeywords(...entity.children),\n          ),\n          children: entity.children,\n        };\n      }\n\n      return entity as FlatTokenObject;\n    };\n  }\n\n  return flatMap(children, flatMapTreeWithKinds(kind));\n}\n\nfunction containsLineBreak(token: TreeItem): boolean {\n  if (isArray(token)) {\n    return token.some(containsLineBreak);\n  }\n\n  if (isString(token)) {\n    return token.includes('\\n');\n  }\n\n  if (isObject(token)) {\n    return (\n      token.children?.includes('\\n') ||\n      (isString(token.children?.[0]) && token.children[0].includes('\\n'))\n    );\n  }\n\n  return false;\n}\n\ntype LineDefinition = Array<Array<string | FlatTokenObject>>;\n\nexport function treeToLines(\n  children: Array<string | TokenObject>,\n): LineDefinition {\n  const lines: LineDefinition = [];\n  let currentLineIndex = 0;\n\n  // Create a new line, if no lines exist yet\n  if (lines[currentLineIndex] == null) {\n    lines[currentLineIndex] = [];\n  }\n\n  const createNewLine = () => {\n    currentLineIndex++;\n    lines[currentLineIndex] = [];\n  };\n\n  flattenNestedTree(children).forEach(child => {\n    // If the current element includes a line break, we need to handle it differently\n    if (containsLineBreak(child)) {\n      if (isString(child)) {\n        child.split('\\n').forEach((fragment, i) => {\n          if (i > 0) {\n            createNewLine();\n          }\n\n          // Empty new lines should be represented as an empty array\n          if (fragment) {\n            lines[currentLineIndex].push(fragment);\n          }\n        });\n      } else {\n        const tokenString = child.children[0];\n\n        tokenString.split('\\n').forEach((fragment, i) => {\n          if (i > 0) {\n            createNewLine();\n          }\n\n          lines[currentLineIndex].push({\n            kind: child.kind,\n            children: [fragment],\n          });\n        });\n      }\n    } else if (child && (isString(child) || isFlattenedTokenObject(child))) {\n      lines[currentLineIndex].push(child);\n    }\n  });\n\n  return lines;\n}\n\ninterface TableContentProps {\n  lines: LineDefinition;\n}\n\nexport function TableContent({ lines }: TableContentProps) {\n  const { highlightLines, showLineNumbers, darkMode, lineNumberStart } =\n    useSyntaxContext();\n  const trimmedLines = [...lines];\n\n  // Strip empty lines from the beginning of code blocks\n  while (trimmedLines[0]?.length === 0) {\n    trimmedLines.shift();\n  }\n\n  // Strip empty lines from the end of code blocks\n  while (trimmedLines[trimmedLines.length - 1]?.length === 0) {\n    trimmedLines.pop();\n  }\n\n  const lineShouldHighlight = (line: number) => {\n    return highlightLines.some(def => {\n      if (isNumber(def)) {\n        return line === def;\n      }\n\n      if (isArray(def)) {\n        const sortedArr = [...def].sort((a, b) => a - b);\n\n        return line >= sortedArr[0] && line <= sortedArr[1];\n      }\n\n      return false;\n    });\n  };\n\n  return (\n    <>\n      {trimmedLines.map((line, index) => {\n        const currentLineNumber = index + (lineNumberStart ?? 1);\n        const highlightLine = lineShouldHighlight(currentLineNumber);\n\n        let displayLineNumber;\n\n        if (showLineNumbers) {\n          displayLineNumber = currentLineNumber;\n        }\n\n        const processedLine = line?.length ? (\n          line.map(processToken)\n        ) : (\n          // We create placeholder content when a line break appears to preserve the line break's height\n          // It needs to be inline-block for the table row to not collapse.\n          <div\n            className={css`\n              display: inline-block;\n            `}\n          />\n        );\n\n        return (\n          <LineTableRow\n            key={currentLineNumber}\n            lineNumber={displayLineNumber}\n            darkMode={darkMode}\n            highlighted={highlightLine}\n          >\n            {processedLine}\n          </LineTableRow>\n        );\n      })}\n    </>\n  );\n}\n\nconst plugin: LeafyGreenHLJSPlugin = {\n  'after:highlight': function (result: LeafyGreenHighlightResult) {\n    const { rootNode } = result._emitter;\n    // console.log(JSON.stringify(rootNode.children, null, 2));\n    result.react = <TableContent lines={treeToLines(rootNode.children)} />;\n  },\n};\n\nexport default plugin;\n","import { createContext, useContext } from 'react';\n\nimport { LineHighlightingDefinition } from '../types';\n\ninterface SyntaxContext {\n  highlightLines: LineHighlightingDefinition;\n  showLineNumbers?: boolean;\n  darkMode: boolean;\n  lineNumberStart?: number;\n}\n\nexport const SyntaxContext = createContext<SyntaxContext>({\n  highlightLines: [],\n  darkMode: false,\n});\n\nexport function useSyntaxContext() {\n  return useContext(SyntaxContext);\n}\n","import React, { useMemo } from 'react';\nimport { HLJSOptions, HLJSPlugin } from 'highlight.js';\nimport hljs from 'highlight.js/lib/core'; // Skip highlight's auto-registering\nimport hljsDefineGraphQL from 'highlightjs-graphql';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport {\n  useBaseFontSize,\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { fontFamilies, typeScales } from '@leafygreen-ui/tokens';\n\nimport { injectGlobalStyles } from '../globalStyles';\nimport { LeafyGreenHighlightResult } from '../highlight';\nimport { languageParsers, SupportedLanguages } from '../languages';\nimport renderingPlugin, {\n  TableContent,\n} from '../renderingPlugin/renderingPlugin';\nimport { SyntaxContext } from '../Syntax/SyntaxContext';\nimport { Language, SyntaxProps } from '../types';\n\ntype FilteredSupportedLanguagesEnum = Omit<\n  typeof SupportedLanguages,\n  // Aliases for languages\n  'Cs' | 'JS' | 'TS'\n>;\ntype FilteredSupportedLanguages =\n  FilteredSupportedLanguagesEnum[keyof FilteredSupportedLanguagesEnum];\n\nfunction filterSupportedLanguages(\n  language: SupportedLanguages,\n): language is FilteredSupportedLanguages {\n  return language !== 'cs' && language !== 'js' && language !== 'ts';\n}\n\nlet syntaxHighlightingInitialized = false;\n\nfunction initializeSyntaxHighlighting() {\n  syntaxHighlightingInitialized = true;\n\n  injectGlobalStyles();\n\n  // We filter out 'cs' here because it's redundant with 'csharp' and 'js' because it's redundant with 'javascript'\n  const SupportedLanguagesList = Object.values(SupportedLanguages).filter(\n    filterSupportedLanguages,\n  );\n\n  SupportedLanguagesList.forEach(language => {\n    if (language === 'graphql') {\n      hljsDefineGraphQL(hljs);\n    } else {\n      hljs.registerLanguage(language, languageParsers[language]);\n    }\n  });\n\n  hljs.configure({\n    languages: SupportedLanguagesList,\n    tabReplace: '  ',\n  } as Partial<HLJSOptions>);\n\n  hljs.addPlugin(renderingPlugin as HLJSPlugin);\n}\n\nconst codeStyles = css`\n  color: inherit;\n  font-family: ${fontFamilies.code};\n`;\n\n/**\n * @internal\n */\nfunction Syntax({\n  children,\n  language,\n  showLineNumbers = false,\n  lineNumberStart,\n  highlightLines = [],\n  className,\n  ...rest\n}: SyntaxProps) {\n  if (!syntaxHighlightingInitialized) {\n    initializeSyntaxHighlighting();\n  }\n\n  const highlightedContent: LeafyGreenHighlightResult | null = useMemo(() => {\n    if (language === Language.None) {\n      return null;\n    }\n\n    return hljs.highlight(children, {\n      language,\n      ignoreIllegals: true,\n    }) as LeafyGreenHighlightResult;\n  }, [language, children]);\n\n  const content =\n    highlightedContent === null ? (\n      // We create a similar data structure to the rendering plugin so that we can generate\n      // a table that's identical when the plugin isn't being used.\n      <TableContent\n        lines={children.split('\\n').map(item => (item ? [item] : []))}\n      />\n    ) : (\n      highlightedContent.react\n    );\n\n  const { theme, darkMode } = useDarkMode();\n\n  const baseFontSize = useBaseFontSize();\n  // TODO: remove 14 check when useBaseFontSize is updated\n  const typeScale = baseFontSize === 14 ? typeScales.code1 : typeScales.code2;\n  const codeFontStyles = css`\n    font-size: ${typeScale.fontSize}px;\n    line-height: ${typeScale.lineHeight}px;\n  `;\n\n  return (\n    <SyntaxContext.Provider\n      value={{\n        highlightLines,\n        showLineNumbers,\n        lineNumberStart,\n        darkMode,\n      }}\n    >\n      <code\n        {...rest}\n        className={cx(\n          `lg-highlight-hljs-${theme}`,\n          codeStyles,\n          codeFontStyles,\n          language,\n          className,\n        )}\n      >\n        <table\n          className={css`\n            border-spacing: 0;\n          `}\n        >\n          <tbody>{content}</tbody>\n        </table>\n      </code>\n    </SyntaxContext.Provider>\n  );\n}\n\nSyntax.displayName = 'Syntax';\n\nSyntax.propTypes = {\n  children: PropTypes.string.isRequired,\n  language: PropTypes.oneOf(Object.values(Language)),\n  className: PropTypes.string,\n  darkMode: PropTypes.bool,\n  showLineNumbers: PropTypes.bool,\n  lineNumberStart: PropTypes.number,\n  highlightLines: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.number),\n      PropTypes.number,\n    ]),\n  ),\n};\n\nexport default Syntax;\n","import { HTMLElementProps } from '@leafygreen-ui/lib';\n\nimport { SupportedLanguages } from './languages';\n\nexport const Mode = {\n  Light: 'light',\n  Dark: 'dark',\n} as const;\n\nexport type Mode = (typeof Mode)[keyof typeof Mode];\n\nexport const Language = {\n  ...SupportedLanguages,\n  None: 'none',\n} as const;\n\nexport type Language = (typeof Language)[keyof typeof Language];\n\nexport type LineHighlightingDefinition = ReadonlyArray<\n  number | readonly [number, number]\n>;\n\nexport interface SyntaxProps extends HTMLElementProps<'code'> {\n  /**\n   * The children to render inside Code. This is usually going to be a formatted code block or line.\n   * @required\n   */\n  children: string;\n\n  /**\n   * The language to highlight the syntax of.\n   */\n  language: Language;\n\n  /**\n   * Shows line numbers. This is specifically used for the Code component implementation.\n   *\n   * default: `false`\n   */\n  showLineNumbers?: boolean;\n\n  /**\n   * Specifies the number by which to start line numbering.\n   *\n   * default: `1`\n   */\n  lineNumberStart?: number;\n\n  /**\n   * An array of lines to highlight. The array can only contain numbers corresponding to the line numbers to highlight, and / or tuples representing a range (e.g. `[6, 10]`);\n   */\n  highlightLines?: LineHighlightingDefinition;\n}\n\nexport interface PopoverProps {\n  /**\n   * Specifies that the popover content should be rendered at the end of the DOM,\n   * rather than in the DOM tree.\n   *\n   * default: `true`\n   */\n  usePortal?: boolean;\n\n  /**\n   * When usePortal is `true`, specifies a class name to apply to the root element of the portal.\n   */\n  portalClassName?: string;\n\n  /**\n   * When usePortal is `true`, specifies an element to portal within. The default behavior is to generate a div at the end of the document to render within.\n   */\n  portalContainer?: HTMLElement | null;\n\n  /**\n   * When usePortal is `true`, specifies the scrollable element to position relative to.\n   */\n  scrollContainer?: HTMLElement | null;\n\n  /**\n   * Number that controls the z-index of the popover element directly.\n   */\n  popoverZIndex?: number;\n}\n\nexport type CodeProps = Omit<\n  SyntaxProps,\n  'onCopy' | 'language' | 'onChange'\n> & {\n  /**\n   * Shows window chrome for code block;\n   *\n   * default: `false`\n   */\n  showWindowChrome?: boolean;\n\n  /**\n   * Renders a file name or other descriptor for a block of code\n   */\n  chromeTitle?: string;\n\n  /**\n   * When true, allows the code block to be copied to the user's clipboard by clicking the rendered copy button.\n   *\n   * default: `true`\n   */\n  copyable?: boolean;\n\n  /**\n   * Callback fired when Code is copied via the copy button.\n   *\n   */\n  onCopy?: Function;\n\n  /**\n   * Custom action buttons. Should be an array of `IconButton`.\n   *\n   * @type <IconButton />[]\n   */\n  customActionButtons?: Array<React.ReactElement>;\n\n  /**\n   * When true, custom action buttons will be shown.\n   *\n   */\n  showCustomActionButtons?: boolean;\n\n  /**\n   * Determines whether or not the syntax will be rendered in dark mode.\n   *\n   * @default `false`\n   */\n  darkMode?: boolean;\n} & (\n    | {\n        /**\n         * The language to format the code. See {@link https://github.com/mongodb/leafygreen-ui/blob/main/packages/code/src/languages.ts | SupportedLanguages}.\n         */\n        language: Language;\n        languageOptions?: undefined;\n        onChange?: undefined;\n      }\n    | {\n        /**\n         * The `displayName` of the selected `languageOption`\n         */\n        language: LanguageOption['displayName'];\n        /**\n         * An array of `LanguageOptions` to select from. Enables the Language switcher.\n         */\n        languageOptions: Array<LanguageOption>;\n        /**\n         * Callback fired when the language option changes.\n         */\n        onChange: (arg0: LanguageOption) => void;\n      }\n  ) &\n  PopoverProps;\n\nexport interface LanguageOption {\n  displayName: string;\n  language: Language;\n  image?: React.ReactElement;\n}\n\nexport interface LanguageSwitcher extends PopoverProps {\n  onChange: (arg0: LanguageOption) => void;\n  language: LanguageOption['displayName'];\n  languageOptions: Array<LanguageOption>;\n}\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, typeScales } from '@leafygreen-ui/tokens';\n\nimport { variantColors } from '../globalStyles';\n\nexport const windowChromeHeight = 28;\nconst controlSize = 12;\nconst controlSpacing = 8;\nconst borderRadius = 4;\n\nexport const windowChromeStyle = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: ${windowChromeHeight}px;\n  padding-left: ${controlSize}px;\n  padding-right: ${controlSize}px;\n  border-radius: ${borderRadius}px ${borderRadius}px 0 0;\n  font-family: ${fontFamilies.default};\n`;\n\nexport const windowChromeThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark2};\n    background-color: ${variantColors.light[1]};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light1};\n    background-color: ${variantColors.dark[1]};\n  `,\n};\n\nexport const textStyle = css`\n  padding-left: ${controlSpacing}px;\n  padding-right: ${controlSpacing}px;\n  font-size: ${typeScales.body1.fontSize}px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport {\n  textStyle,\n  windowChromeStyle,\n  windowChromeThemeStyles,\n} from './WindowChrome.styles';\n\ninterface WindowChromeProps {\n  chromeTitle?: string;\n}\n\nfunction WindowChrome({ chromeTitle = '' }: WindowChromeProps) {\n  const { theme } = useDarkMode();\n\n  return (\n    <div className={cx(windowChromeStyle, windowChromeThemeStyles[theme])}>\n      <div className={textStyle}>{chromeTitle}</div>\n    </div>\n  );\n}\n\nWindowChrome.displayName = 'WindowChrome';\n\nWindowChrome.propTypes = {\n  darkMode: PropTypes.bool,\n  chromeTitle: PropTypes.string,\n};\n\nexport default WindowChrome;\n","export const ScrollState = {\n  None: 'none',\n  Left: 'left',\n  Right: 'right',\n  Both: 'both',\n} as const;\n\nexport type ScrollState = (typeof ScrollState)[keyof typeof ScrollState];\n\nexport type DetailedElementProps<T> = React.DetailedHTMLProps<\n  React.HTMLAttributes<T>,\n  T\n>;\n","import facepaint from 'facepaint';\nimport { transparentize } from 'polished';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { spacing, transitionDuration } from '@leafygreen-ui/tokens';\n\nimport { variantColors } from '../globalStyles';\n\nimport { ScrollState } from './Code.types';\n\n// We use max-device-width to select specifically for iOS devices\nconst mq = facepaint([\n  `@media only screen and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 2)`,\n  `@media only screen and (min-device-width: 813px) and (-webkit-min-device-pixel-ratio: 2)`,\n]);\n\nconst singleLineComponentHeight = 36;\nconst lineHeight = 24;\n\nexport const wrapperStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    border: 1px solid ${variantColors[Theme.Light][1]};\n    border-radius: 12px;\n    overflow: hidden;\n  `,\n  [Theme.Dark]: css`\n    border: 1px solid ${variantColors[Theme.Dark][1]};\n    border-radius: 12px;\n    overflow: hidden;\n  `,\n};\n\nexport const contentWrapperStyles = css`\n  position: relative;\n  display: grid;\n  grid-template-areas: 'code panel';\n  grid-template-columns: auto 38px;\n  border-radius: inherit;\n  z-index: 0; // new stacking context\n`;\n\nexport const contentWrapperStylesNoPanel = css`\n  // No panel, all code\n  grid-template-areas: 'code code';\n`;\n\nexport const contentWrapperStyleWithPicker = css`\n  grid-template-areas: 'panel' 'code';\n  grid-template-columns: unset;\n`;\n\nexport const codeWrapperStyle = css`\n  grid-area: code;\n  overflow-x: auto;\n  // Many applications have global styles that are adding a border and border radius to this element.\n  border-radius: inherit;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  border: 0;\n  // We apply left / right padding in Syntax to support line highlighting\n  padding-top: ${spacing[2]}px;\n  padding-bottom: ${spacing[2]}px;\n  margin: 0;\n  position: relative;\n  transition: box-shadow ${transitionDuration.faster}ms ease-in-out;\n\n  ${mq({\n    // Fixes annoying issue where font size is overridden in mobile Safari to be 20px.\n    // Ideally, we wouldn't need to set the text to wrap, but from what I can tell, this is the one possible solution to the problem.\n    whiteSpace: ['pre', 'pre-wrap', 'pre'],\n  })}\n\n  &:focus-visible {\n    outline: none;\n    box-shadow: 0 0 0 2px ${palette.blue.light1} inset;\n  }\n`;\n\nexport const codeWrapperStyleNoPanel = css`\n  border-left: 0;\n  border-radius: inherit;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n`;\nexport const codeWrapperStyleWithLanguagePicker = css`\n  border-left: 0;\n  border-radius: inherit;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n`;\n\nexport const singleLineCodeWrapperStyle = css`\n  display: flex;\n  align-items: center;\n  padding-top: ${(singleLineComponentHeight - lineHeight) / 2}px;\n  padding-bottom: ${(singleLineComponentHeight - lineHeight) / 2}px;\n`;\n\nexport const panelStyles = css`\n  z-index: 2; // Above the shadows\n  grid-area: panel;\n`;\n\nexport function getCodeWrapperVariantStyle(theme: Theme): string {\n  const colors = variantColors[theme];\n\n  return css`\n    background-color: ${colors[0]};\n    color: ${colors[3]};\n  `;\n}\n\nexport const baseScrollShadowStyles = css`\n  &:before,\n  &:after {\n    content: '';\n    display: block;\n    position: absolute;\n    z-index: 1; // above the code\n    top: 0;\n    height: 100%;\n    width: 40px;\n    border-radius: 40%;\n    box-shadow: unset;\n    transition: box-shadow ${transitionDuration.faster}ms ease-in-out;\n  }\n  &:before {\n    grid-column: 1;\n    left: -40px;\n  }\n  &:after {\n    grid-column: 2; // Placed either under Panel, or on the right edge\n  }\n`;\n\nexport const scrollShadowStylesNoPanel = css`\n  &:after {\n    grid-column: -1; // Placed on the right edge\n  }\n`;\n\nexport const scrollShadowStylesWithPicker = css`\n  &:before,\n  &:after {\n    grid-row: 2; // Placed on the top under the Picker Panel\n  }\n`;\n\nexport function getScrollShadow(\n  scrollState: ScrollState,\n  theme: Theme,\n): string {\n  const dropShadowBefore =\n    theme === Theme.Light\n      ? `1px 0 10px 0 ${transparentize(0.75, 'black')}`\n      : `15px 0px 15px 0 ${transparentize(0.7, 'black')}`;\n\n  const dropShadowAfter =\n    theme === Theme.Light\n      ? `-1px 0px 10px ${transparentize(0.75, 'black')}`\n      : `-15px 0px 15px 0 ${transparentize(0.7, 'black')}`;\n\n  return css`\n    &:before {\n      ${(scrollState === ScrollState.Both ||\n        scrollState === ScrollState.Left) &&\n      css`\n        box-shadow: ${dropShadowBefore};\n      `};\n    }\n    &:after {\n      ${(scrollState === ScrollState.Both ||\n        scrollState === ScrollState.Right) &&\n      `\n        box-shadow: ${dropShadowAfter};\n      `};\n    }\n  `;\n}\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport ClipboardJS from 'clipboard';\nimport debounce from 'lodash/debounce';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useIsomorphicLayoutEffect } from '@leafygreen-ui/hooks';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { isComponentType } from '@leafygreen-ui/lib';\n\nimport { Panel } from '../Panel';\nimport { Syntax } from '../Syntax';\nimport { CodeProps, Language } from '../types';\nimport { WindowChrome } from '../WindowChrome';\n\nimport {\n  baseScrollShadowStyles,\n  codeWrapperStyle,\n  codeWrapperStyleNoPanel,\n  codeWrapperStyleWithLanguagePicker,\n  contentWrapperStyles,\n  contentWrapperStylesNoPanel,\n  contentWrapperStyleWithPicker,\n  getCodeWrapperVariantStyle,\n  getScrollShadow,\n  panelStyles,\n  scrollShadowStylesNoPanel,\n  scrollShadowStylesWithPicker,\n  singleLineCodeWrapperStyle,\n  wrapperStyle,\n} from './Code.styles';\nimport { DetailedElementProps, ScrollState } from './Code.types';\n\nexport function hasMultipleLines(string: string): boolean {\n  return string.trim().includes('\\n');\n}\n\n/**\n *\n * React Component that outputs single-line and multi-line code blocks.\n *\n * @param props.children The string to be formatted.\n * @param props.className An additional CSS class added to the root element of Code.\n * @param props.language The language used for syntax highlighting.\n * @param props.darkMode Determines if the code block will be rendered in dark mode. Default: `false`\n * @param props.showLineNumbers When true, shows line numbers in preformatted code blocks. Default: `false`\n * @param props.lineNumberStart Specifies the numbering of the first line in the block. Default: 1\n * @param props.copyable When true, allows the code block to be copied to the user's clipboard. Default: `true`\n * @param props.onCopy Callback fired when Code is copied\n */\nfunction Code({\n  children = '',\n  className,\n  language: languageProp,\n  darkMode: darkModeProp,\n  showLineNumbers = false,\n  lineNumberStart = 1,\n  showWindowChrome = false,\n  chromeTitle = '',\n  copyable = true,\n  onCopy,\n  highlightLines = [],\n  languageOptions,\n  onChange,\n  customActionButtons = [],\n  showCustomActionButtons = false,\n  usePortal = true,\n  portalClassName,\n  portalContainer,\n  scrollContainer,\n  popoverZIndex,\n  ...rest\n}: CodeProps) {\n  const scrollableElementRef = useRef<HTMLPreElement>(null);\n  const [scrollState, setScrollState] = useState<ScrollState>(ScrollState.None);\n  const [showCopyBar, setShowCopyBar] = useState(false);\n  const isMultiline = useMemo(() => hasMultipleLines(children), [children]);\n  const { theme, darkMode } = useDarkMode(darkModeProp);\n\n  const filteredCustomActionIconButtons = customActionButtons.filter(\n    (item: React.ReactElement) => isComponentType(item, 'IconButton') === true,\n  );\n\n  const showCustomActionsInPanel =\n    showCustomActionButtons && !!filteredCustomActionIconButtons.length;\n\n  const currentLanguage = languageOptions?.find(\n    option => option.displayName === languageProp,\n  );\n\n  const showPanel =\n    !showWindowChrome &&\n    (copyable || !!currentLanguage || showCustomActionsInPanel);\n\n  const highlightLanguage = currentLanguage\n    ? currentLanguage.language\n    : languageProp;\n\n  const showLanguagePicker = !!currentLanguage;\n\n  useEffect(() => {\n    setShowCopyBar(copyable && ClipboardJS.isSupported());\n  }, [copyable, showWindowChrome]);\n\n  useIsomorphicLayoutEffect(() => {\n    const scrollableElement = scrollableElementRef.current;\n\n    if (\n      scrollableElement != null &&\n      scrollableElement.scrollWidth > scrollableElement.clientWidth\n    ) {\n      setScrollState(ScrollState.Right);\n    }\n  }, []);\n\n  const renderedSyntaxComponent = (\n    <Syntax\n      showLineNumbers={showLineNumbers}\n      lineNumberStart={lineNumberStart}\n      language={highlightLanguage as Language}\n      highlightLines={highlightLines}\n    >\n      {children}\n    </Syntax>\n  );\n\n  function handleScroll(e: React.UIEvent) {\n    const { scrollWidth, clientWidth: elementWidth } = e.target as HTMLElement;\n    const isScrollable = scrollWidth > elementWidth;\n\n    if (isScrollable) {\n      const scrollPosition = (e.target as HTMLElement).scrollLeft;\n      const maxPosition = scrollWidth - elementWidth;\n\n      if (scrollPosition > 0 && scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Both);\n      } else if (scrollPosition > 0) {\n        setScrollState(ScrollState.Left);\n      } else if (scrollPosition < maxPosition) {\n        setScrollState(ScrollState.Right);\n      }\n    }\n  }\n\n  const debounceScroll = debounce(handleScroll, 50, { leading: true });\n\n  const onScroll: React.UIEventHandler<HTMLDivElement | HTMLPreElement> = e => {\n    e.persist();\n    debounceScroll(e);\n  };\n\n  const popoverProps = {\n    popoverZIndex,\n    ...(usePortal\n      ? {\n          usePortal,\n          portalClassName,\n          portalContainer,\n          scrollContainer,\n        }\n      : { usePortal }),\n  } as const;\n\n  return (\n    <LeafyGreenProvider darkMode={darkMode}>\n      <div className={wrapperStyle[theme]}>\n        {showWindowChrome && <WindowChrome chromeTitle={chromeTitle} />}\n\n        <div\n          className={cx(\n            contentWrapperStyles,\n            baseScrollShadowStyles,\n            getScrollShadow(scrollState, theme),\n            {\n              [contentWrapperStyleWithPicker]: showLanguagePicker,\n              [scrollShadowStylesWithPicker]: showLanguagePicker,\n              [contentWrapperStylesNoPanel]: !showPanel,\n              [scrollShadowStylesNoPanel]: !showPanel,\n            },\n          )}\n        >\n          <pre\n            {...(rest as DetailedElementProps<HTMLPreElement>)}\n            className={cx(\n              codeWrapperStyle,\n              getCodeWrapperVariantStyle(theme),\n              {\n                [codeWrapperStyleWithLanguagePicker]: showLanguagePicker,\n                [codeWrapperStyleNoPanel]: !showPanel,\n                [singleLineCodeWrapperStyle]: !isMultiline,\n              },\n              className,\n            )}\n            onScroll={onScroll}\n            ref={scrollableElementRef}\n            // Adds to Tab order when content is scrollable, otherwise overflowing content is inaccessible via keyboard navigation\n            // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n            tabIndex={scrollState !== ScrollState.None ? 0 : -1}\n          >\n            {renderedSyntaxComponent}\n          </pre>\n\n          {/* Can make this a more robust check in the future */}\n          {/* Right now the panel will only be rendered with copyable or a language switcher */}\n          {showPanel && (\n            <Panel\n              className={cx(panelStyles)}\n              language={currentLanguage}\n              languageOptions={languageOptions}\n              onChange={onChange}\n              contents={children}\n              onCopy={onCopy}\n              showCopyButton={showCopyBar}\n              isMultiline={isMultiline}\n              customActionButtons={filteredCustomActionIconButtons}\n              showCustomActionButtons={showCustomActionsInPanel}\n              {...popoverProps}\n            />\n          )}\n        </div>\n      </div>\n    </LeafyGreenProvider>\n  );\n}\n\nCode.displayName = 'Code';\n\nCode.propTypes = {\n  children: PropTypes.string.isRequired,\n  language: PropTypes.oneOfType([\n    PropTypes.oneOf(Object.values(Language)),\n    PropTypes.string,\n  ]),\n  darkMode: PropTypes.bool,\n  className: PropTypes.string,\n  showLineNumbers: PropTypes.bool,\n  lineNumberStart: PropTypes.number,\n  showWindowChrome: PropTypes.bool,\n  chromeTitle: PropTypes.string,\n  highlightLines: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.number),\n      PropTypes.number,\n    ]),\n  ),\n};\n\nexport default Code;\n"],"names":["_templateObject","_templateObject2","_copiedThemeStyle","_templateObject3","_templateObject4","_copyButtonThemeStyle","COPIED_SUCCESS_DURATION","COPIED_TEXT","COPY_TEXT","copiedThemeStyle","_defineProperty","Theme","Light","css","_taggedTemplateLiteral","palette","white","green","dark1","Dark","gray","dark3","base","copyButtonThemeStyles","light1","CopyButton","_ref","onCopy","contents","_useState2","_slicedToArray","useState","copied","setCopied","_useState4","open","setOpen","buttonRef","useRef","theme","useDarkMode","portalContainer","usePopoverPortalContainer","closeTooltip","useBackdropClick","useEffect","current","clipboard","ClipboardJS","text","container","timeoutId","setTimeout","clearTimeout","destroy","React","default","createElement","Tooltip","align","Align","Top","justify","Justify","Middle","trigger","IconButton","ref","className","cx","onClick","e","preventDefault","onKeyDown","key","keyMap","Escape","Tab","Enter","Space","_buttonRef$current","_buttonRef$current2","click","focus","onMouseEnter","onMouseLeave","CheckmarkIcon","CopyIcon","VisuallyHidden","role","shouldClose","displayName","_buttonModeStyle","_templateObject5","_templateObject6","_excluded","CustomSelectMenuButton","forwardRef","children","props","_objectWithoutProperties","Button","_extends","_basePanelThemeStyle","_sidePanelThemeStyles","_templateObject7","_templateObject8","_templateObject9","_languageSwitcherPane","containerStyle","menuButtonStyle","buttonModeStyle","light2","blue","dark2","selectStyle","iconMargin","spacing","LanguageSwitcher","element","language","languageOptions","onChange","usePortal","portalClassName","scrollContainer","popoverZIndex","_useDarkMode","darkMode","previousLanguage","usePrevious","iconStyle","renderedLogo","FileIcon","image","isComponentGlyph","isComponentType","cloneElement","popoverProps","Select","val","undefined","selectedOption","find","option","value","allowDeselect","__INTERNAL__menuButtonSlot__","__INTERNAL__menuButtonSlotProps__","leftGlyph","map","Option","_variantColors","basePanelStyle","basePanelThemeStyle","sidePanelStyle","sidePanelThemeStyles","languageSwitcherPanelStyle","languageSwitcherPanelThemeStyles","Panel","_cx","showCopyButton","customActionButtons","showCustomActionButtons","withLanguageSwitcher","Fragment","action","variantColors","light3","black","getStyles","concat","fontWeights","bold","languageParsers","javascript","typescript","c","cpp","csharp","go","http","ini","java","perl","php","properties","python","ruby","rust","scala","swift","kotlin","objectivec","dart","bash","shell","sql","yaml","json","diff","xml","SupportedLanguages","JavaScript","JS","TypeScript","TS","C","Cpp","Csharp","Cs","Go","Html","Http","Ini","Java","Perl","Php","Properties","Python","Ruby","Rust","Scala","Swift","Kotlin","ObjectiveC","Dart","Bash","Shell","Sql","Yaml","Json","Graphql","Diff","Xml","SyntaxContext","createContext","highlightLines","generateKindClassName","prefix","_len","arguments","length","kinds","Array","_key","filter","str","isString","kind","startsWith","split","k","join","childrenAsKeywords","keywords","_len2","_key2","child","includes","Token","isArray","item","isObject","_typeof","processToken","token","cellStyle","getHighlightedRowStyle","backgroundColor","backgroundImage","borderColor","yellow","LineTableRow","_ref2","lineNumber","highlighted","numberColor","highlightedNumberColor","isFlattenedTokenObject","obj","flattenNestedTree","flatMap","flatMapTreeWithKinds","_len3","parentKinds","_key3","entity","_entity$children$leng","_entity$children","apply","_toConsumableArray","containsLineBreak","some","_token$children","_token$children2","treeToLines","lines","currentLineIndex","createNewLine","forEach","fragment","i","push","TableContent","_ref4","_useSyntaxContext","useContext","showLineNumbers","lineNumberStart","trimmedLines","_trimmedLines$","shift","_trimmedLines","pop","line","index","displayLineNumber","currentLineNumber","highlightLine","def","sortedArr","sort","a","b","lineShouldHighlight","processedLine","plugin","result","rootNode","_emitter","react","Language","_objectSpread","None","filterSupportedLanguages","syntaxHighlightingInitialized","initializeSyntaxHighlighting","Object","values","injectGlobal","SupportedLanguagesList","hljsDefineGraphQL","hljs","registerLanguage","configure","languages","tabReplace","addPlugin","renderingPlugin","_windowChromeThemeSty","codeStyles","fontFamilies","code","Syntax","_ref$showLineNumbers","_ref$highlightLines","rest","highlightedContent","useMemo","highlight","ignoreIllegals","content","typeScale","useBaseFontSize","typeScales","code1","code2","codeFontStyles","fontSize","lineHeight","Provider","propTypes","PropTypes","string","isRequired","oneOf","bool","number","arrayOf","oneOfType","windowChromeStyle","windowChromeThemeStyles","light","dark","textStyle","body1","WindowChrome","_ref$chromeTitle","chromeTitle","_wrapperStyle","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","ScrollState","Left","Right","Both","mq","facepaint","wrapperStyle","contentWrapperStyles","contentWrapperStylesNoPanel","contentWrapperStyleWithPicker","codeWrapperStyle","transitionDuration","faster","whiteSpace","codeWrapperStyleNoPanel","codeWrapperStyleWithLanguagePicker","singleLineCodeWrapperStyle","panelStyles","getCodeWrapperVariantStyle","colors","baseScrollShadowStyles","scrollShadowStylesNoPanel","scrollShadowStylesWithPicker","getScrollShadow","scrollState","dropShadowBefore","transparentize","dropShadowAfter","Code","_cx2","_ref$children","languageProp","darkModeProp","_ref$lineNumberStart","_ref$showWindowChrome","showWindowChrome","_ref$copyable","copyable","_ref$customActionButt","_ref$showCustomAction","_ref$usePortal","scrollableElementRef","setScrollState","showCopyBar","setShowCopyBar","isMultiline","trim","filteredCustomActionIconButtons","showCustomActionsInPanel","currentLanguage","showPanel","highlightLanguage","showLanguagePicker","isSupported","useIsomorphicLayoutEffect","scrollableElement","scrollWidth","clientWidth","renderedSyntaxComponent","debounceScroll","debounce","target","elementWidth","scrollPosition","scrollLeft","maxPosition","leading","LeafyGreenProvider","onScroll","persist","tabIndex"],"mappings":"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"}