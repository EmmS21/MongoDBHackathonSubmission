{"version":3,"file":"index.js","sources":["../src/CardSkeleton/CardSkeleton.styles.ts","../src/CodeSkeleton/CodeSkeleton.styles.ts","../src/CardSkeleton/CardSkeleton.tsx","../src/FormSkeleton/FormSkeleton.styles.ts","../src/CodeSkeleton/CodeSkeleton.tsx","../src/ParagraphSkeleton/ParagraphSkeleton.styles.ts","../src/FormSkeleton/FormSkeleton.tsx","../src/ParagraphSkeleton/ParagraphSkeleton.tsx","../src/Skeleton/Skeleton.types.ts","../src/Skeleton/Skeleton.styles.ts","../src/TableSkeleton/TableSkeleton.styles.ts","../src/Skeleton/Skeleton.tsx","../src/TableSkeleton/TableSkeleton.tsx"],"sourcesContent":["import { css } from '@leafygreen-ui/emotion';\n\nexport const rootStyles = css`\n  width: 100%;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const rootStyles = css`\n  width: 100%;\n  display: grid;\n  row-gap: ${spacing[3]}px;\n  grid-template-columns: 75px 1fr 75px;\n`;\n\nexport const lineStyles = css`\n  &:nth-child(even) {\n    grid-column: 2 / -1;\n  }\n\n  &:nth-child(odd) {\n    grid-column: 1 / span 2;\n  }\n`;\n","import React from 'react';\n\nimport Card from '@leafygreen-ui/card';\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { ParagraphSkeleton } from '..';\n\nimport { rootStyles } from './CardSkeleton.styles';\nimport { CardSkeletonProps } from '.';\n\nexport function CardSkeleton({\n  darkMode: darkModeProp,\n  className,\n  ...rest\n}: CardSkeletonProps) {\n  const { darkMode } = useDarkMode(darkModeProp);\n  return (\n    <Card\n      {...rest}\n      darkMode={darkMode}\n      className={cx(rootStyles, className)}\n      aria-busy\n    >\n      <ParagraphSkeleton withHeader />\n    </Card>\n  );\n}\n\nCardSkeleton.displayName = 'CardSkeleton';\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const baseStyles = css`\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  column-gap: 20px;\n  row-gap: ${spacing[3]}px;\n`;\n\nexport const fullWidthStyles = css`\n  grid-column-start: 1;\n  grid-column-end: 3;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\n\nimport { Skeleton } from '..';\n\nimport { lineStyles, rootStyles } from './CodeSkeleton.styles';\nimport { CodeSkeletonProps } from '.';\n\nexport function CodeSkeleton({\n  darkMode: darkModeProp,\n  className,\n  ...rest\n}: CodeSkeletonProps) {\n  const { darkMode } = useDarkMode(darkModeProp);\n  return (\n    <LeafyGreenProvider darkMode={darkMode}>\n      <div {...rest} className={cx(rootStyles, className)} aria-busy>\n        <Skeleton size=\"small\" className={lineStyles} />\n        <Skeleton size=\"small\" className={lineStyles} />\n        <Skeleton size=\"small\" className={lineStyles} />\n      </div>\n    </LeafyGreenProvider>\n  );\n}\n\nCodeSkeleton.displayName = 'CodeSkeleton';\n","import { css } from '@leafygreen-ui/emotion';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nexport const rootStyles = css`\n  width: 100%;\n`;\n\nexport const headerStyles = css`\n  width: 250px;\n  margin-bottom: 20px;\n`;\n\nexport const lineStyles = css`\n  margin-bottom: ${spacing[3]}px;\n`;\n\nexport const lastLineStyles = css`\n  width: 350px;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\n\nimport { Skeleton } from '..';\n\nimport { baseStyles, fullWidthStyles } from './FormSkeleton.styles';\nimport { FormSkeletonProps } from '.';\n\nexport function FormSkeleton({\n  darkMode: darkModeProp,\n  className,\n  ...rest\n}: FormSkeletonProps) {\n  const { darkMode } = useDarkMode(darkModeProp);\n  return (\n    <LeafyGreenProvider darkMode={darkMode}>\n      <div className={cx(baseStyles, className)} {...rest} aria-busy>\n        <Skeleton className={fullWidthStyles} />\n        <Skeleton />\n        <Skeleton />\n        <Skeleton className={fullWidthStyles} />\n        <Skeleton />\n      </div>\n    </LeafyGreenProvider>\n  );\n}\n\nFormSkeleton.displayName = 'FormSkeleton';\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\n\nimport { Skeleton } from '..';\n\nimport {\n  headerStyles,\n  lastLineStyles,\n  lineStyles,\n  rootStyles,\n} from './ParagraphSkeleton.styles';\nimport { ParagraphSkeletonProps } from '.';\n\nexport function ParagraphSkeleton({\n  withHeader = false,\n  darkMode: darkModeProp,\n  className,\n  ...rest\n}: ParagraphSkeletonProps) {\n  const { darkMode } = useDarkMode(darkModeProp);\n  return (\n    <LeafyGreenProvider darkMode={darkMode}>\n      <div {...rest} className={cx(rootStyles, className)} aria-busy>\n        {withHeader && (\n          <Skeleton\n            className={headerStyles}\n            data-testid=\"lg-paragraph-skeleton-header\"\n          />\n        )}\n        <Skeleton size=\"small\" className={lineStyles} />\n        <Skeleton size=\"small\" className={lineStyles} />\n        <Skeleton size=\"small\" className={lastLineStyles} />\n      </div>\n    </LeafyGreenProvider>\n  );\n}\n\nParagraphSkeleton.displayName = 'ParagraphSkeleton';\n","import { DarkModeProps, HTMLElementProps } from '@leafygreen-ui/lib';\n\nexport interface SkeletonProps extends DarkModeProps, HTMLElementProps<'div'> {\n  /**\n   * Determines the height of the skeleton\n   * @default \"default\"\n   */\n  size?: Size;\n}\n\nexport const Size = {\n  Small: 'small',\n  Default: 'default',\n  Large: 'large',\n} as const;\n\nexport type Size = (typeof Size)[keyof typeof Size];\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { spacing } from '@leafygreen-ui/tokens';\n\nimport { Size } from './Skeleton.types';\n\nexport const rootStyles = css`\n  width: 100%;\n  border-radius: 6px;\n  animation: bgslide 1.5s infinite linear;\n\n  @keyframes bgslide {\n    to {\n      background-position: 100vw 0;\n    }\n  }\n`;\n\nexport const sizeStyles: Record<Size, string> = {\n  [Size.Small]: css`\n    height: ${spacing[3]}px;\n  `,\n  [Size.Default]: css`\n    height: ${spacing[5]}px;\n  `,\n  [Size.Large]: css`\n    height: ${spacing[5] + spacing[3]}px;\n  `,\n};\n\nexport const themeStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background: linear-gradient(\n        110deg,\n        ${palette.gray.dark2} 35%,\n        ${palette.gray.dark1},\n        ${palette.gray.dark2} 65%\n      )\n      0 0/ 100vw 100% fixed;\n  `,\n  [Theme.Light]: css`\n    background: linear-gradient(\n        110deg,\n        ${palette.gray.light2} 35%,\n        ${palette.gray.light3},\n        ${palette.gray.light2} 65%\n      )\n      0 0/ 100vw 100% fixed;\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const baseStyles = css`\n  width: 100%;\n  table-layout: fixed;\n`;\n\nexport const cellStyles = css`\n  padding: 10px 40px 10px 8px;\n`;\n\nexport const tableHeadStyles: Record<Theme, string> = {\n  [Theme.Dark]: css`\n    background-color: ${palette.black};\n    box-shadow: 0 3px ${palette.gray.dark2};\n  `,\n  [Theme.Light]: css`\n    background-color: ${palette.white};\n    box-shadow: 0 3px ${palette.gray.light2};\n  `,\n};\n\n// offsets box-shadow on thead\nexport const firstRowStyles = css`\n  margin-top: 2px; // the td doesn't start exactly at the bottom of the box-shadow\n`;\n\nexport const headerCellStyles = css`\n  text-align: left;\n`;\n\nexport const columnHeaderStyles = css`\n  font-weight: 600;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { rootStyles, sizeStyles, themeStyles } from './Skeleton.styles';\nimport { Size } from './Skeleton.types';\nimport { SkeletonProps } from '.';\n\nexport function Skeleton({\n  size = Size.Default,\n  darkMode,\n  className,\n  ...rest\n}: SkeletonProps) {\n  const { theme } = useDarkMode(darkMode);\n  return (\n    <div\n      className={cx(\n        rootStyles,\n        sizeStyles[size],\n        themeStyles[theme],\n        className,\n      )}\n      aria-hidden\n      {...rest}\n    />\n  );\n}\n\nSkeleton.displayName = 'Skeleton';\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport { Body, useUpdatedBaseFontSize } from '@leafygreen-ui/typography';\n\nimport { Skeleton } from '..';\n\nimport {\n  baseStyles,\n  cellStyles,\n  columnHeaderStyles,\n  firstRowStyles,\n  headerCellStyles,\n  tableHeadStyles,\n} from './TableSkeleton.styles';\nimport { TableSkeletonProps } from '.';\n\nexport function TableSkeleton({\n  darkMode: darkModeProp,\n  baseFontSize: baseFontSizeProp = BaseFontSize.Body1,\n  numRows = 5,\n  numCols = 4,\n  columnLabels,\n  className,\n  ...rest\n}: TableSkeletonProps) {\n  const { darkMode, theme } = useDarkMode(darkModeProp);\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n  return (\n    <LeafyGreenProvider darkMode={darkMode}>\n      <table {...rest} className={cx(baseStyles, className)} aria-busy>\n        <thead className={tableHeadStyles[theme]}>\n          <tr>\n            {[...Array(numCols)].map((_, i) => (\n              <th key={i} className={cx(cellStyles, headerCellStyles)}>\n                {columnLabels && columnLabels[i] ? (\n                  <Body\n                    baseFontSize={baseFontSize}\n                    className={columnHeaderStyles}\n                  >\n                    {columnLabels[i]}\n                  </Body>\n                ) : (\n                  <Skeleton size=\"small\" />\n                )}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {[...Array(numRows)].map((_, i) => (\n            <tr key={i}>\n              {[...Array(numCols)].map((_, j) => (\n                <td key={j} className={cellStyles}>\n                  <Skeleton\n                    size=\"small\"\n                    className={cx({ [firstRowStyles]: i === 0 })}\n                  />\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </LeafyGreenProvider>\n  );\n}\n\nTableSkeleton.displayName = 'TableSkeleton';\n"],"names":["_templateObject","_templateObject2","rootStyles","css","_taggedTemplateLiteral","_excluded","CardSkeleton","_ref","darkModeProp","darkMode","className","rest","_objectWithoutProperties","useDarkMode","React","createElement","Card","_extends","cx","ParagraphSkeleton","withHeader","displayName","spacing","lineStyles","CodeSkeleton","default","LeafyGreenProvider","Skeleton","size","_templateObject3","_templateObject4","baseStyles","fullWidthStyles","FormSkeleton","headerStyles","lastLineStyles","_ref$withHeader","_sizeStyles","_templateObject5","_templateObject6","_themeStyles","_tableHeadStyles","_templateObject7","Size","Small","Default","Large","sizeStyles","_defineProperty","themeStyles","Theme","Dark","palette","gray","dark2","dark1","Light","light2","light3","_ref$size","theme","cellStyles","tableHeadStyles","black","white","firstRowStyles","headerCellStyles","columnHeaderStyles","TableSkeleton","_ref$baseFontSize","baseFontSize","baseFontSizeProp","BaseFontSize","Body1","_ref$numRows","numRows","_ref$numCols","numCols","columnLabels","_useDarkMode","useUpdatedBaseFontSize","_toConsumableArray","Array","map","_","i","key","Body","j"],"mappings":"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"}