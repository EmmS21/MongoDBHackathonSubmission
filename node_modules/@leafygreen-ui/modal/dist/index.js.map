{"version":3,"file":"index.js","sources":["../src/Footer/Footer.styles.ts","../src/Footer/Footer.tsx","../src/Modal/Modal.types.ts","../src/Modal/Modal.styles.ts","../src/Modal/ModalView.tsx","../src/Modal/Modal.tsx"],"sourcesContent":["import { css } from '@leafygreen-ui/emotion';\n\nexport const footerStyle = css`\n  position: relative;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  display: flex;\n  justify-content: right;\n  flex-direction: row-reverse;\n  padding: 24px 35px 35px;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\n\nimport { footerStyle } from './Footer.styles';\nimport { FooterProps } from './Footer.types';\n\n/**\n * @internal\n * Internal modal Footer component\n */\nconst Footer = ({ children, className }: FooterProps) => {\n  return <div className={cx(footerStyle, className)}>{children}</div>;\n};\n\nFooter.displayName = 'Footer';\n\nexport default Footer;\n","import { SetStateAction } from 'react';\n\nimport { DarkModeProps, HTMLElementProps } from '@leafygreen-ui/lib';\n\nexport const CloseIconColor = {\n  Default: 'default',\n  Dark: 'dark',\n  Light: 'light',\n} as const;\n\nexport type CloseIconColor =\n  (typeof CloseIconColor)[keyof typeof CloseIconColor];\n\nexport const ModalSize = {\n  Small: 'small',\n  Default: 'default',\n  Large: 'large',\n} as const;\n\nexport type ModalSize = (typeof ModalSize)[keyof typeof ModalSize];\n\nexport type ForwardedRef =\n  | React.ForwardedRef<HTMLDivElement | null>\n  | null\n  | undefined;\n\nexport interface ModalProps extends HTMLElementProps<'div'>, DarkModeProps {\n  /**\n   * Content that will appear inside of the Modal component.\n   */\n  children: React.ReactNode;\n\n  /**\n   * Determines the open state of the modal\n   * @default false\n   */\n  open?: boolean;\n\n  /**\n   * Specifies the size of the Modal.\n   *\n   * @default 'default'\n   */\n  size?: ModalSize;\n\n  /**\n   * Callback to change the open state of the Modal.\n   *\n   * @default () => {}\n   */\n  setOpen?: (open: boolean) => void | React.Dispatch<SetStateAction<boolean>>;\n\n  /**\n   * Callback to determine whether or not Modal should close when user tries to close it.\n   *\n   * @default () => true\n   */\n  shouldClose?: () => boolean;\n\n  /**\n   * className applied to overlay div.\n   * Disclaimer: This prop may be deprecated in future versions of Modal\n   */\n  contentClassName?: string;\n\n  /**\n   * By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus.\n   * With this option you can specify a different element to receive that initial focus.\n   * Selector string (which will be passed to document.querySelector() to find the DOM node)\n   */\n  initialFocus?: string;\n\n  /**\n   * Determines the color of the close icon.\n   * @default 'default'\n   */\n  closeIconColor?: CloseIconColor;\n}\n","import { transparentize } from 'polished';\n\nimport { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  breakpoints,\n  fontFamilies,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { CloseIconColor, ModalSize } from './Modal.types';\n\n// breakpoints for different screen sizes\nexport const large = `${breakpoints.Desktop + 1}px`; // laptops/desktop screens, from 1025px and above\n\nexport const defaultHorizontalSpacing = 18;\nexport const defaultVerticalSpacing = 64;\n\nexport const backdropBaseStyle = css`\n  overflow-y: auto;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  opacity: 0;\n  transition: opacity ${transitionDuration.default}ms ease-in-out;\n`;\n\nexport const backdropThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${transparentize(0.4, palette.black)};\n  `,\n  [Theme.Dark]: css`\n    background-color: ${transparentize(0.4, palette.gray.dark2)};\n  `,\n};\n\nexport const visibleBackdrop = css`\n  opacity: 1;\n`;\n\nexport const scrollContainer = css`\n  position: absolute;\n  min-height: 100%;\n  width: 100%;\n  padding: ${defaultVerticalSpacing}px ${defaultHorizontalSpacing}px;\n  overflow-y: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const modalContentStyle = css`\n  font-family: ${fontFamilies.default};\n  transition: transform ${transitionDuration.default}ms ease-in-out,\n    opacity ${transitionDuration.default}ms ease-in-out;\n  margin: auto;\n  max-height: calc(100% - ${defaultVerticalSpacing}px);\n  position: relative;\n  pointer-events: all;\n  transform: translate3d(0, -16px, 0);\n  opacity: 0;\n  border-radius: 24px;\n  padding: 40px 36px;\n  box-shadow: 0px 8px 20px -8px ${transparentize(0.4, palette.black)};\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const modalThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n    background-color: ${palette.white};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n    background-color: ${palette.black};\n  `,\n};\n\nexport const visibleModalContentStyle = css`\n  transform: translate3d(0, 0, 0);\n  opacity: 1;\n`;\n\nexport const modalSizes: Record<ModalSize, string> = {\n  small: css`\n    width: 400px;\n  `,\n\n  default: css`\n    width: 600px;\n  `,\n\n  large: css`\n    width: 720px;\n\n    @media only screen and (min-width: ${large}) {\n      width: 960px;\n    }\n  `,\n};\n\nexport const baseCloseButtonStyles = css`\n  position: absolute;\n  cursor: pointer;\n  // x-icon should be 24px from edge. IconButton is 28x28 and Icon is 16x16\n  // so there's already (28 - 16) / 2 = 6px of spacing. 24 - 6 = 18.\n  right: 18px;\n  top: 18px;\n`;\n\nexport const closeButton: Record<Theme, Record<CloseIconColor, string>> = {\n  [Theme.Light]: {\n    [CloseIconColor.Default]: css`\n      color: ${palette.gray.dark1};\n    `,\n    [CloseIconColor.Dark]: css`\n      color: ${palette.black};\n    `,\n    [CloseIconColor.Light]: css`\n      color: ${palette.gray.light2};\n    `,\n  },\n  [Theme.Dark]: {\n    [CloseIconColor.Default]: css`\n      color: ${palette.gray.base};\n    `,\n    [CloseIconColor.Dark]: css`\n      color: ${palette.black};\n    `,\n    [CloseIconColor.Light]: css`\n      color: ${palette.gray.light2};\n    `,\n  },\n};\n","import React, { useCallback, useState } from 'react';\nimport { Transition, TransitionStatus } from 'react-transition-group';\nimport { Options } from 'focus-trap';\nimport FocusTrap from 'focus-trap-react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useEscapeKey, useIdAllocator } from '@leafygreen-ui/hooks';\nimport XIcon from '@leafygreen-ui/icon/dist/X';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport LeafyGreenProvider, {\n  PortalContextProvider,\n  useDarkMode,\n  usePopoverContext,\n} from '@leafygreen-ui/leafygreen-provider';\nimport Portal from '@leafygreen-ui/portal';\n\nimport {\n  backdropBaseStyle,\n  backdropThemeStyles,\n  baseCloseButtonStyles,\n  closeButton,\n  modalContentStyle,\n  modalSizes,\n  modalThemeStyles,\n  scrollContainer,\n  visibleBackdrop,\n  visibleModalContentStyle,\n} from './Modal.styles';\nimport {\n  CloseIconColor,\n  ForwardedRef,\n  ModalProps,\n  ModalSize,\n} from './Modal.types';\n\n/**\n * @internal\n * Internal Modal View component\n */\nconst ModalView = React.forwardRef(\n  (\n    {\n      open = false,\n      size = ModalSize.Default,\n      setOpen = () => {},\n      shouldClose = () => true,\n      closeIconColor = CloseIconColor.Default,\n      darkMode: darkModeProp,\n      id: idProp,\n      children,\n      className,\n      contentClassName,\n      initialFocus,\n      ...rest\n    }: ModalProps,\n    forwardedRef: ForwardedRef,\n  ) => {\n    const { theme, darkMode } = useDarkMode(darkModeProp);\n\n    const nodeRef = React.useRef<HTMLDivElement | null>(null);\n    const ref = forwardedRef ?? nodeRef;\n\n    const [scrollContainerRef, setScrollContainerRef] =\n      useState<null | HTMLDivElement>(null);\n\n    const { isPopoverOpen } = usePopoverContext();\n\n    const handleClose = useCallback(() => {\n      if (setOpen && shouldClose()) {\n        setOpen(false);\n      }\n    }, [setOpen, shouldClose]);\n\n    const id = useIdAllocator({ prefix: 'modal', id: idProp });\n    const closeId = useIdAllocator({ prefix: 'modal' });\n\n    useEscapeKey(handleClose, { enabled: open && !isPopoverOpen });\n\n    const focusTrapOptions: Options = initialFocus\n      ? {\n          initialFocus: `#${id} ${initialFocus}`,\n          fallbackFocus: `#${closeId}`,\n        }\n      : {\n          fallbackFocus: `#${closeId}`, // tests fail without a fallback. (https://github.com/focus-trap/focus-trap-react/issues/91)\n        };\n\n    return (\n      <Transition\n        in={open}\n        timeout={150}\n        mountOnEnter\n        unmountOnExit\n        nodeRef={nodeRef}\n      >\n        {(state: TransitionStatus) => (\n          <Portal>\n            <div\n              {...rest}\n              id={id}\n              ref={ref}\n              className={cx(\n                className,\n                backdropBaseStyle,\n                backdropThemeStyles[theme],\n                {\n                  [visibleBackdrop]: state === 'entered',\n                },\n              )}\n            >\n              <LeafyGreenProvider darkMode={darkMode}>\n                <FocusTrap\n                  active={state === 'entered'}\n                  focusTrapOptions={focusTrapOptions}\n                >\n                  <div\n                    className={scrollContainer}\n                    ref={el => setScrollContainerRef(el)}\n                  >\n                    <div\n                      aria-modal=\"true\"\n                      role=\"dialog\"\n                      tabIndex={-1}\n                      className={cx(\n                        modalContentStyle,\n                        modalThemeStyles[theme],\n                        modalSizes[size],\n                        {\n                          [visibleModalContentStyle]: state === 'entered',\n                        },\n                        contentClassName,\n                      )}\n                    >\n                      <PortalContextProvider\n                        popover={{\n                          portalContainer: scrollContainerRef,\n                          scrollContainer: scrollContainerRef,\n                        }}\n                      >\n                        {children}\n                        <IconButton\n                          id={closeId}\n                          onClick={handleClose}\n                          aria-label=\"Close modal\"\n                          className={cx(\n                            baseCloseButtonStyles,\n                            closeButton[theme][closeIconColor],\n                          )}\n                        >\n                          <XIcon />\n                        </IconButton>\n                      </PortalContextProvider>\n                    </div>\n                  </div>\n                </FocusTrap>\n              </LeafyGreenProvider>\n            </div>\n          </Portal>\n        )}\n      </Transition>\n    );\n  },\n);\n\nModalView.displayName = 'ModalView';\nexport default ModalView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { PopoverProvider } from '@leafygreen-ui/leafygreen-provider';\n\nimport {\n  CloseIconColor,\n  ForwardedRef,\n  ModalProps,\n  ModalSize,\n} from './Modal.types';\nimport ModalView from './ModalView';\n\n/**\n *\n *  Modals place content on top of main window.\n *\n * @param props.open Boolean to describe whether or not Modal is open.\n * @param props.size String to determine size of Modal. ['small', 'default', 'large']\n * @param props.setOpen Callback to change the open state of Modal.\n * @param props.children Content to appear inside of Modal container.\n * @param props.shouldClose Callback to determine whether or not Modal should close when user tries to close it.\n * @param props.className className applied to container div.\n * @param props.contentClassName className applied to overlay div.\n * @param props.initialFocus By default, when a focus trap is activated the first element in the focus trap's tab order will receive focus. With this option you can specify a different element to receive that initial focus. Selector string (which will be passed to document.querySelector() to find the DOM node).\n * @param props.closeIconColor Choose between dark or light close icon. Default is dark.\n */\nconst Modal = React.forwardRef((props: ModalProps, ref: ForwardedRef) => {\n  return (\n    <PopoverProvider>\n      <ModalView {...props} ref={ref} />\n    </PopoverProvider>\n  );\n});\n\nModal.displayName = 'Modal';\n\nModal.propTypes = {\n  open: PropTypes.bool,\n  size: PropTypes.oneOf(Object.values(ModalSize)),\n  children: PropTypes.node,\n  shouldClose: PropTypes.func,\n  className: PropTypes.string,\n  setOpen: PropTypes.func,\n  darkMode: PropTypes.bool,\n  closeIconColor: PropTypes.oneOf(Object.values(CloseIconColor)),\n};\n\nexport default Modal;\n"],"names":["_templateObject","footerStyle","css","_taggedTemplateLiteral","Footer","_ref","children","className","React","default","createElement","cx","displayName","_templateObject2","_templateObject3","_backdropThemeStyles","_templateObject4","_templateObject5","_templateObject6","_templateObject7","_templateObject8","_modalThemeStyles","_templateObject9","_templateObject10","_templateObject11","_templateObject12","_templateObject13","_templateObject14","_templateObject15","_templateObject16","_Theme$Light","_templateObject17","_templateObject18","_templateObject19","_Theme$Dark","_closeButton","CloseIconColor","Default","Dark","Light","ModalSize","Small","Large","large","concat","breakpoints","Desktop","backdropBaseStyle","transitionDuration","backdropThemeStyles","_defineProperty","Theme","transparentize","palette","black","gray","dark2","visibleBackdrop","scrollContainer","modalContentStyle","fontFamilies","modalThemeStyles","white","light2","visibleModalContentStyle","modalSizes","small","baseCloseButtonStyles","closeButton","dark1","base","_excluded","ModalView","forwardRef","forwardedRef","_ref$open","open","_ref$size","size","_ref$setOpen","setOpen","_ref$shouldClose","shouldClose","_ref$closeIconColor","closeIconColor","darkModeProp","darkMode","idProp","id","contentClassName","initialFocus","rest","_objectWithoutProperties","_useDarkMode","useDarkMode","theme","nodeRef","useRef","ref","_useState2","_slicedToArray","useState","scrollContainerRef","setScrollContainerRef","isPopoverOpen","usePopoverContext","handleClose","useCallback","useIdAllocator","prefix","closeId","useEscapeKey","enabled","focusTrapOptions","fallbackFocus","Transition","in","timeout","mountOnEnter","unmountOnExit","state","Portal","_extends","LeafyGreenProvider","FocusTrap","active","el","role","tabIndex","PortalContextProvider","popover","portalContainer","IconButton","onClick","XIcon","Modal","props","PopoverProvider","propTypes","PropTypes","bool","oneOf","Object","values","node","func","string"],"mappings":"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"}