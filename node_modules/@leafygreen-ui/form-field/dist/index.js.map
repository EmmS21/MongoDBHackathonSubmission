{"version":3,"file":"index.js","sources":["../src/FormField/FormField.types.ts","../src/FormField/FormField.styles.ts","../src/FormFieldInputContainer/FormFieldInputContainer.styles.ts","../src/FormFieldContext/FormFieldContext.tsx","../src/FormField/useFormFieldProps.ts","../src/FormField/FormField.tsx","../src/FormFieldInputContainer/FormFieldInputContainer.tsx"],"sourcesContent":["import { DarkModeProps, HTMLElementProps } from '@leafygreen-ui/lib';\nimport { BaseFontSize, Size } from '@leafygreen-ui/tokens';\n\nexport const FormFieldState = {\n  None: 'none',\n  Error: 'error',\n  Valid: 'valid',\n} as const;\nexport type FormFieldState =\n  (typeof FormFieldState)[keyof typeof FormFieldState];\n\nexport interface FormFieldInputWrapperProps extends HTMLElementProps<'div'> {\n  [key: `data-${string}`]: any;\n}\n\nexport interface FormFieldChildrenProps {\n  id: string;\n  'aria-labelledby': string;\n  [key: string]: any;\n}\n\nexport type FormFieldChildren = React.ReactElement<FormFieldChildrenProps>;\n\ntype AriaLabelProps =\n  | {\n      /**\n       * The label rendered before the input\n       */\n      label: React.ReactNode;\n      'aria-label'?: string;\n      'aria-labelledby'?: string;\n    }\n  | {\n      label?: React.ReactNode;\n\n      /**\n       * A label for screen readers\n       */\n      'aria-label': string;\n      'aria-labelledby'?: string;\n    }\n  | {\n      label?: React.ReactNode;\n      'aria-label'?: string;\n\n      /**\n       * A reference to an external label element\n       */\n      'aria-labelledby': string;\n    };\n\nexport type FormFieldProps = Omit<HTMLElementProps<'div'>, 'children'> &\n  AriaLabelProps &\n  DarkModeProps & {\n    /**\n     * `FormFieldInputContainer` component, or other custom input component\n     */\n    children: FormFieldChildren;\n\n    /**\n     * A description for the form field\n     */\n    description?: React.ReactNode;\n\n    /**\n     * The state of the component\n     */\n    state?: FormFieldState;\n\n    /**\n     * The size of the component\n     */\n    size?: Size;\n\n    /**\n     * Defines whether the component is disabled\n     */\n    disabled?: boolean;\n\n    /**\n     * The message to display below the form field when in an error state\n     */\n    errorMessage?: React.ReactNode;\n\n    /**\n     * Base font size of the component. Only effective when `size == 'default'`\n     */\n    baseFontSize?: BaseFontSize;\n\n    /**\n     * Whether or not the field is labeled as optional.\n     */\n    optional?: boolean;\n  };\n","import { css } from '@leafygreen-ui/emotion';\nimport { BaseFontSize, Size, spacing, typeScales } from '@leafygreen-ui/tokens';\n\nexport const getFontSize = ({\n  baseFontSize,\n  size,\n}: {\n  baseFontSize: BaseFontSize;\n  size: Size;\n}) => {\n  if (size === Size.XSmall || size === Size.Small) {\n    return css`\n      font-size: ${typeScales.body1.fontSize}px;\n      line-height: ${typeScales.body1.lineHeight}px;\n    `;\n  }\n\n  if (size === Size.Default) {\n    return css`\n      font-size: ${baseFontSize}px;\n      line-height: ${typeScales.body1.lineHeight}px;\n    `;\n  }\n\n  if (size === Size.Large) {\n    return css`\n      font-size: 18px;\n      line-height: 24px;\n    `;\n  }\n};\n\nexport const textContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const marginBottom = css`\n  margin-bottom: ${spacing[100]}px;\n`;\n\nexport const errorTextContainerStyle = css`\n  margin-top: ${spacing[100]}px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  focusRing,\n  fontFamilies,\n  fontWeights,\n  hoverRing,\n  Size,\n  spacing,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nimport { FormFieldState } from '../FormField/FormField.types';\n\nexport const inputElementClassName = createUniqueClassName('form-field-input');\nexport const iconClassName = createUniqueClassName('form-field-icon');\nconst autofillShadowOverride = (color: string) => `0 0 0 100px ${color} inset`;\n\nexport const inputWrapperBaseStyles = css`\n  display: flex;\n  align-items: center;\n  gap: ${spacing[1]}px;\n  font-size: inherit;\n  line-height: inherit;\n  font-family: ${fontFamilies.default};\n  width: 100%;\n  height: 36px;\n  font-weight: ${fontWeights.regular};\n  border: 1px solid;\n  z-index: 1;\n  outline: none;\n  border-radius: 6px;\n  transition: ${transitionDuration.default}ms ease-in-out;\n  transition-property: border-color, box-shadow;\n  z-index: 0;\n\n  & .${inputElementClassName} {\n    font-family: ${fontFamilies.default};\n    color: inherit;\n    background-color: inherit;\n    font-size: inherit;\n    line-height: inherit;\n    outline: none;\n    border: none;\n  }\n\n  & .${iconClassName} svg,\n  & svg {\n    min-height: 16px;\n    min-width: 16px;\n  }\n`;\n\nexport const inputWrapperModeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n    background: ${palette.white};\n    border: 1px solid ${palette.gray.base};\n\n    &:hover,\n    &:active {\n      &:not([aria-disabled='true']):not(:focus) {\n        box-shadow: ${hoverRing.light.gray};\n      }\n    }\n\n    & .${inputElementClassName} {\n      &:-webkit-autofill {\n        color: ${palette.black};\n        background: ${palette.white};\n        border: 1px solid ${palette.gray.base};\n        -webkit-text-fill-color: ${palette.black};\n        box-shadow: ${autofillShadowOverride(palette.white)};\n\n        &:not([aria-disabled='true']):focus {\n          box-shadow: ${autofillShadowOverride(palette.white)},\n            ${focusRing.light.input};\n          border-color: ${palette.white};\n        }\n\n        &:not([aria-disabled='true']):hover:not(:focus) {\n          box-shadow: ${autofillShadowOverride(palette.white)},\n            ${hoverRing.light.gray};\n        }\n      }\n\n      &::placeholder {\n        color: ${palette.gray.light1};\n        font-weight: ${fontWeights.regular};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light3};\n    background-color: ${palette.gray.dark4};\n    border: 1px solid ${palette.gray.base};\n\n    &:hover,\n    &:active {\n      &:not([aria-disabled='true']):not(:focus) {\n        box-shadow: ${hoverRing.dark.gray};\n      }\n    }\n\n    & .${inputElementClassName} {\n      &:-webkit-autofill {\n        border: 1px solid ${palette.gray.base};\n        color: ${palette.gray.light3};\n        background: ${palette.gray.dark4};\n        -webkit-text-fill-color: ${palette.gray.light3};\n        box-shadow: ${autofillShadowOverride(palette.gray.dark4)};\n\n        &:not([aria-disabled='true']):focus {\n          box-shadow: ${autofillShadowOverride(palette.gray.dark4)},\n            ${focusRing.dark.input};\n          border-color: ${palette.blue.light1};\n        }\n\n        &:not([aria-disabled='true']):hover:not(:focus) {\n          box-shadow: ${autofillShadowOverride(palette.gray.dark4)},\n            ${hoverRing.dark.gray};\n        }\n      }\n\n      &::placeholder {\n        color: ${palette.gray.dark1};\n        font-weight: ${fontWeights.regular};\n      }\n    }\n  `,\n};\n\nconst focusSelector = (styles: string) => css`\n  @supports selector(:has(a, b)) {\n    &:not([aria-disabled='true']):focus-within:not(\n        :has(.${iconClassName}:focus)\n      ) {\n      ${styles}\n    }\n  }\n\n  /* Fallback for when \"has\" is unsupported */\n  @supports not selector(:has(a, b)) {\n    &:not([aria-disabled='true']):focus-within {\n      ${styles}\n    }\n  }\n`;\n\nexport const inputWrapperFocusStyles: Record<Theme, string> = {\n  [Theme.Light]: focusSelector(`\n     {\n      box-shadow: ${focusRing.light.input};\n      border-color: ${palette.white};\n    }\n  `),\n  [Theme.Dark]: focusSelector(`\n     {\n      box-shadow: ${focusRing.dark.input};\n      border-color: ${palette.gray.dark4};\n    }\n  `),\n};\n\n/** Selector that is true if the icon element passed in is a button */\nconst iconIsButtonSelector = `&:has(button.${iconClassName})`;\n\nexport const inputWrapperSizeStyles: Record<Size, string> = {\n  [Size.XSmall]: css`\n    height: 22px;\n    padding-inline: 6px;\n\n    ${iconIsButtonSelector} {\n      padding-inline-end: 4px;\n    }\n  `,\n  [Size.Small]: css`\n    height: 28px;\n    padding-inline: 6px;\n\n    ${iconIsButtonSelector} {\n      padding-inline-end: 4px;\n    }\n  `,\n  [Size.Default]: css`\n    height: 36px;\n    padding-inline: 12px;\n\n    ${iconIsButtonSelector} {\n      padding-inline-end: 6px;\n    }\n  `,\n  [Size.Large]: css`\n    height: 48px;\n    padding-inline: 16px;\n\n    ${iconIsButtonSelector} {\n      padding-inline-end: 10px;\n    }\n  `,\n};\n\nexport const inputWrapperStateStyles: Record<\n  FormFieldState,\n  Record<Theme, string>\n> = {\n  [FormFieldState.Error]: {\n    [Theme.Light]: css`\n      &:not([aria-disabled='true']) {\n        border-color: ${palette.red.base};\n\n        &:hover,\n        &:active {\n          &:not([aria-disabled='true']):not(:focus) {\n            box-shadow: ${hoverRing.light.red};\n          }\n        }\n      }\n    `,\n    [Theme.Dark]: css`\n      &:not([aria-disabled='true']) {\n        border-color: ${palette.red.light1};\n\n        &:hover,\n        &:active {\n          &:not([aria-disabled='true']):not(:focus) {\n            box-shadow: ${hoverRing.dark.red};\n          }\n        }\n      }\n    `,\n  },\n  [FormFieldState.None]: {\n    [Theme.Light]: css``,\n    [Theme.Dark]: css``,\n  },\n  [FormFieldState.Valid]: {\n    [Theme.Light]: css`\n      &:not([aria-disabled='true']) {\n        border-color: ${palette.green.dark1};\n\n        &:hover,\n        &:active {\n          &:not([aria-disabled='true']):not(:focus) {\n            box-shadow: ${hoverRing.light.green};\n          }\n        }\n      }\n    `,\n    [Theme.Dark]: css`\n      &:not([aria-disabled='true']) {\n        border-color: ${palette.green.dark1};\n\n        &:hover,\n        &:active {\n          &:not([aria-disabled='true']):not(:focus) {\n            box-shadow: ${hoverRing.dark.green};\n          }\n        }\n      }\n    `,\n  },\n};\n\nexport const inputWrapperDisabledStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    cursor: not-allowed;\n    background-color: ${palette.gray.light2};\n    border-color: ${palette.gray.light1};\n\n    & input {\n      cursor: not-allowed;\n      pointer-events: none;\n      color: ${palette.gray.base};\n\n      &::placeholder {\n        color: inherit;\n      }\n\n      &:-webkit-autofill {\n        &,\n        &:hover,\n        &:focus {\n          appearance: none;\n          border: 1px solid ${palette.gray.base};\n          -webkit-text-fill-color: ${palette.gray.base};\n          box-shadow: ${autofillShadowOverride(palette.gray.light2)};\n        }\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    cursor: not-allowed;\n    color: ${palette.gray.dark2};\n    background-color: ${palette.gray.dark3};\n    border-color: ${palette.gray.dark2};\n\n    & input {\n      cursor: not-allowed;\n      pointer-events: none;\n      color: ${palette.gray.dark2};\n\n      &::placeholder {\n        color: inherit;\n      }\n\n      &:-webkit-autofill {\n        &,\n        &:hover,\n        &:focus {\n          appearance: none;\n          border: 1px solid ${palette.gray.dark1};\n          -webkit-text-fill-color: ${palette.gray.dark1};\n          box-shadow: ${autofillShadowOverride(palette.gray.dark2)};\n        }\n      }\n    }\n  `,\n};\n\nexport const childrenWrapperStyles = css`\n  width: 100%;\n`;\n\nexport const iconsWrapperStyles = css`\n  display: flex;\n  align-items: center;\n  gap: ${spacing[1]}px;\n`;\n\nexport const iconStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.base};\n\n    &[aria-disabled='true'],\n    &:disabled {\n      color: ${palette.gray.light1};\n    }\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.base};\n\n    &[aria-disabled='true'],\n    &:disabled {\n      color: ${palette.gray.dark2};\n    }\n  `,\n};\n\nexport const validIconStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.green.base};\n  `,\n};\n\nexport const errorIconStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.red.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.red.light1};\n  `,\n};\n\nexport const optionalTextBaseStyle = css`\n  font-size: 12px;\n  line-height: 12px;\n  font-style: italic;\n  font-weight: ${fontWeights.regular};\n  display: flex;\n  align-items: center;\n  > p {\n    margin: 0;\n  }\n`;\n\nexport const optionalTextThemeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.base};\n  `,\n};\n","import React, { PropsWithChildren, useContext } from 'react';\n\nimport { Size } from '@leafygreen-ui/tokens';\n\nimport { FormFieldState } from '../FormField/FormField.types';\nimport { FormFieldInputElementProps } from '../FormField/useFormFieldProps';\n\nexport interface FormFieldContextProps {\n  disabled: boolean;\n  size: Size;\n  state: FormFieldState;\n  inputProps?: FormFieldInputElementProps;\n  optional?: boolean;\n}\n\nexport const defaultFormFieldContext = {\n  disabled: false,\n  size: Size.Default,\n  state: FormFieldState.None,\n};\n\nexport const FormFieldContext = React.createContext<FormFieldContextProps>(\n  defaultFormFieldContext,\n);\n\nexport const FormFieldProvider = ({\n  value,\n  children,\n}: PropsWithChildren<{\n  value: FormFieldContextProps;\n}>) => (\n  <FormFieldContext.Provider value={value}>\n    {children}\n  </FormFieldContext.Provider>\n);\n\n/**\n * Returns {@link FormFieldContextProps} to be used within the FormFieldInputContainer,\n * or within and custom FormField children\n */\nexport const useFormFieldContext = () => useContext(FormFieldContext);\n","import { useIdAllocator } from '@leafygreen-ui/hooks';\n\nimport { FormFieldProps, FormFieldState } from './FormField.types';\n\nexport interface FormFieldInputElementProps {\n  id: string;\n  'aria-describedby': string;\n  'aria-labelledby'?: string;\n  'aria-label'?: string;\n}\n\nexport interface FormFieldElementProps {\n  labelId: string;\n  descriptionId: string;\n  errorId: string;\n  inputId: string;\n  inputProps: FormFieldInputElementProps;\n}\n\nexport const useFormFieldProps = ({\n  label,\n  description,\n  state,\n  id,\n  ...rest\n}: Partial<FormFieldProps>): FormFieldElementProps => {\n  const labelId = useIdAllocator({ prefix: 'lg-form-field-label' });\n  const descriptionId = useIdAllocator({\n    prefix: 'lg-form-field-description',\n  });\n  const errorId = useIdAllocator({ prefix: 'lg-form-field-description' });\n  const generatedInputId = useIdAllocator({ prefix: 'lg-form-field-input' });\n  const inputId = id ?? generatedInputId;\n\n  const ariaLabelledby = label ? labelId : rest['aria-labelledby'];\n  const ariaLabel = label ? '' : rest['aria-label'];\n  const describedBy = `${description ? descriptionId : ''} ${\n    state === FormFieldState.Error ? errorId : ''\n  }`.trim();\n\n  const inputProps: FormFieldInputElementProps = {\n    id: inputId,\n    'aria-labelledby': ariaLabelledby,\n    'aria-describedby': describedBy,\n    'aria-label': ariaLabel,\n  };\n\n  return {\n    labelId,\n    descriptionId,\n    errorId,\n    inputId,\n    inputProps,\n  };\n};\n","import React, { forwardRef } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport LeafyGreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport { Size } from '@leafygreen-ui/tokens';\nimport {\n  Description,\n  Error,\n  Label,\n  useUpdatedBaseFontSize,\n} from '@leafygreen-ui/typography';\n\nimport { FormFieldProvider } from '../FormFieldContext';\n\nimport {\n  errorTextContainerStyle,\n  getFontSize,\n  marginBottom,\n  textContainerStyle,\n} from './FormField.styles';\nimport { type FormFieldProps, FormFieldState } from './FormField.types';\nimport { useFormFieldProps } from './useFormFieldProps';\n\n/**\n * Creates a form field element with the appropriate styles and attributes for each element.\n *\n * Use the {@link FormFieldInput} element to apply the appropriate\n * interaction styles to the inner container element.\n *\n * See .stories file for examples\n * */\nexport const FormField = forwardRef<HTMLDivElement, FormFieldProps>(\n  (\n    {\n      label,\n      description,\n      children,\n      baseFontSize: baseFontSizeProp,\n      state = FormFieldState.None,\n      size = Size.Default,\n      disabled = false,\n      errorMessage,\n      className,\n      darkMode,\n      optional,\n      id,\n      ...rest\n    }: FormFieldProps,\n    fwdRef,\n  ) => {\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeProp);\n\n    const { labelId, descriptionId, errorId, inputId, inputProps } =\n      useFormFieldProps({ label, description, state, id, ...rest });\n\n    return (\n      <LeafyGreenProvider darkMode={darkMode}>\n        <FormFieldProvider\n          value={{ disabled, size, state, inputProps, optional }}\n        >\n          <div\n            className={cx(getFontSize({ baseFontSize, size }), className)}\n            ref={fwdRef}\n            {...rest}\n          >\n            <div\n              className={cx(textContainerStyle, {\n                [marginBottom]: !!(label || description),\n              })}\n            >\n              {label && (\n                <Label\n                  data-testid=\"lg-form_field-label\"\n                  className={getFontSize({ baseFontSize, size })}\n                  htmlFor={inputId}\n                  id={labelId}\n                  disabled={disabled}\n                >\n                  {label}\n                </Label>\n              )}\n              {description && (\n                <Description\n                  data-testid=\"lg-form_field-description\"\n                  className={getFontSize({ baseFontSize, size })}\n                  id={descriptionId}\n                  disabled={disabled}\n                >\n                  {description}\n                </Description>\n              )}\n            </div>\n            {children}\n\n            {state === FormFieldState.Error && !disabled && (\n              <div className={errorTextContainerStyle}>\n                <Error\n                  data-testid=\"lg-form_field-error_message\"\n                  className={getFontSize({ baseFontSize, size })}\n                  id={errorId}\n                >\n                  {errorMessage}\n                </Error>\n              </div>\n            )}\n          </div>\n        </FormFieldProvider>\n      </LeafyGreenProvider>\n    );\n  },\n);\n\nFormField.displayName = 'FormField';\n","import React, { forwardRef } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport Icon from '@leafygreen-ui/icon';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { Size } from '@leafygreen-ui/tokens';\n\nimport { FormFieldState } from '../FormField/FormField.types';\nimport { useFormFieldContext } from '../FormFieldContext/FormFieldContext';\n\nimport {\n  childrenWrapperStyles,\n  errorIconStyles,\n  iconClassName,\n  iconStyles,\n  iconsWrapperStyles,\n  inputElementClassName,\n  inputWrapperBaseStyles,\n  inputWrapperDisabledStyles,\n  inputWrapperFocusStyles,\n  inputWrapperModeStyles,\n  inputWrapperSizeStyles,\n  inputWrapperStateStyles,\n  optionalTextBaseStyle,\n  optionalTextThemeStyle,\n  validIconStyles,\n} from './FormFieldInputContainer.styles';\nimport { FormFieldInputContainerProps } from './FormFieldInputContainer.types';\n\n/**\n * Applies styling around the `input` of a FormField element\n * @internal\n */\nexport const FormFieldInputContainer = forwardRef<\n  HTMLDivElement,\n  FormFieldInputContainerProps\n>(\n  (\n    { contentEnd, className, children, ...rest }: FormFieldInputContainerProps,\n    fwdRef,\n  ) => {\n    const { theme } = useDarkMode();\n    const { disabled, size, state, inputProps, optional } =\n      useFormFieldContext();\n\n    const renderedChildren = React.cloneElement(children, {\n      ...inputProps,\n      className: cx(inputElementClassName, children.props.className),\n    });\n\n    const shouldRenderOptionalText =\n      state === FormFieldState.None && !disabled && optional;\n\n    return (\n      <div\n        {...rest}\n        ref={fwdRef}\n        aria-disabled={disabled}\n        className={cx(\n          inputWrapperBaseStyles,\n          inputWrapperModeStyles[theme],\n          inputWrapperSizeStyles[size ?? Size.Default],\n          inputWrapperStateStyles[state][theme],\n          inputWrapperFocusStyles[theme],\n          {\n            [inputWrapperDisabledStyles[theme]]: disabled,\n          },\n          className,\n        )}\n      >\n        <div className={childrenWrapperStyles}>{renderedChildren}</div>\n        <div className={iconsWrapperStyles}>\n          {state === FormFieldState.Valid && !disabled && (\n            <Icon\n              role=\"presentation\"\n              title=\"Valid\"\n              glyph=\"Checkmark\"\n              className={validIconStyles[theme]}\n            />\n          )}\n\n          {state === FormFieldState.Error && !disabled && (\n            <Icon\n              role=\"presentation\"\n              title=\"Error\"\n              glyph=\"Warning\"\n              className={errorIconStyles[theme]}\n            />\n          )}\n\n          {shouldRenderOptionalText && (\n            <div\n              className={cx(\n                optionalTextBaseStyle,\n                optionalTextThemeStyle[theme],\n              )}\n            >\n              <p>Optional</p>\n            </div>\n          )}\n\n          {contentEnd &&\n            React.cloneElement(contentEnd, {\n              className: cx(\n                iconClassName,\n                iconStyles[theme],\n                contentEnd.props.className,\n              ),\n              disabled,\n            })}\n        </div>\n      </div>\n    );\n  },\n);\n\nFormFieldInputContainer.displayName = 'FormFieldInputWrapper';\n"],"names":["_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_inputWrapperModeStyl","_inputWrapperFocusSty","_templateObject7","_templateObject8","_inputWrapperSizeStyl","_templateObject9","_templateObject10","_FormFieldState$Error","_templateObject11","_templateObject12","_FormFieldState$None","_templateObject13","_templateObject14","_FormFieldState$Valid","_inputWrapperStateSty","_templateObject15","_templateObject16","_inputWrapperDisabled","_templateObject17","_templateObject18","_templateObject19","_templateObject20","_iconStyles","_templateObject21","_templateObject22","_validIconStyles","_templateObject23","_templateObject24","_errorIconStyles","_templateObject25","_templateObject26","_templateObject27","_optionalTextThemeSty","FormFieldState","None","Error","Valid","defaultFormFieldContext","disabled","size","Size","Default","state","FormFieldContext","React","createContext","FormFieldProvider","_ref","value","children","createElement","Provider","useFormFieldContext","useContext","getFontSize","baseFontSize","XSmall","Small","css","_taggedTemplateLiteral","typeScales","body1","fontSize","lineHeight","Large","textContainerStyle","marginBottom","spacing","errorTextContainerStyle","_excluded","FormField","forwardRef","fwdRef","label","description","baseFontSizeProp","_ref$state","_ref$size","_ref$disabled","errorMessage","className","darkMode","optional","id","rest","_objectWithoutProperties","useUpdatedBaseFontSize","_useFormFieldProps","labelId","useIdAllocator","prefix","descriptionId","errorId","generatedInputId","inputId","ariaLabelledby","ariaLabel","inputProps","concat","trim","useFormFieldProps","_objectSpread","default","LeafyGreenProvider","_extends","cx","ref","_defineProperty","Label","htmlFor","Description","displayName","inputElementClassName","createUniqueClassName","iconClassName","autofillShadowOverride","color","inputWrapperBaseStyles","fontFamilies","fontWeights","regular","transitionDuration","inputWrapperModeStyles","Theme","Light","palette","black","white","gray","base","hoverRing","light","focusRing","input","light1","Dark","light3","dark4","dark","blue","dark1","focusSelector","styles","inputWrapperFocusStyles","iconIsButtonSelector","inputWrapperSizeStyles","inputWrapperStateStyles","red","green","inputWrapperDisabledStyles","light2","dark2","dark3","childrenWrapperStyles","iconsWrapperStyles","iconStyles","validIconStyles","errorIconStyles","optionalTextBaseStyle","optionalTextThemeStyle","FormFieldInputContainer","contentEnd","theme","useDarkMode","_useFormFieldContext","renderedChildren","cloneElement","props","shouldRenderOptionalText","Icon","role","title","glyph"],"mappings":"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"}