{"version":3,"file":"index.js","sources":["../../src/Select/Select.types.ts","../../src/styleSets.ts","../../src/Option/Options.styles.ts","../../src/Option/Option.tsx","../../src/OptionGroup/OptionGroup.styles.ts","../../src/SelectContext.tsx","../../src/OptionGroup/OptionGroup.tsx","../../src/utils.tsx","../../src/ListMenu/ListMenu.styles.ts","../../src/ListMenu/ListMenu.tsx","../../src/MenuButton/MenuButton.styles.ts","../../src/MenuButton/MenuButton.tsx","../../src/Select/Select.styles.ts","../../src/Select/Select.tsx"],"sourcesContent":["import React from 'react';\n\nimport { ButtonProps } from '@leafygreen-ui/button';\nimport { Either, HTMLElementProps } from '@leafygreen-ui/lib';\nimport { PopoverProps } from '@leafygreen-ui/popover';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nexport const Size = {\n  XSmall: 'xsmall',\n  Small: 'small',\n  Default: 'default',\n  Large: 'large',\n} as const;\nexport type Size = (typeof Size)[keyof typeof Size];\n\nexport const State = {\n  None: 'none',\n  Error: 'error',\n} as const;\nexport type State = (typeof State)[keyof typeof State];\n\nexport const DropdownWidthBasis = {\n  Trigger: 'trigger',\n  Option: 'option',\n} as const;\n\nexport type DropdownWidthBasis =\n  (typeof DropdownWidthBasis)[keyof typeof DropdownWidthBasis];\n\nexport interface BaseSelectProps\n  extends Omit<\n      HTMLElementProps<'button', HTMLButtonElement>,\n      'onChange' | 'onClick'\n    >,\n    Omit<PopoverProps, 'active' | 'spacing'> {\n  /**\n   * Children rendered inside the component. Expected to be either `<Option>` or `<OptionGroup>`.\n   *\n   * @type `<Option />` | `<OptionGroup/>`\n   */\n  children: React.ReactNode;\n  /**\n   * HTML `id` property used to allow Javascript, form, or label to reference the input.\n   */\n  id?: string;\n\n  /**\n   * Determines whether or not the component appears in dark theme.\n   * @default false\n   */\n  darkMode?: boolean;\n  /**\n   * Determines the size in which the component will be rendered.\n   */\n  size?: Size;\n  /**\n   * When present, it specifies that the drop-down list should be disabled.\n   *\n   * A `disabled` drop-down list is unusable and un-clickable.\n   */\n  disabled?: boolean;\n  /**\n   * Secondary text rendered under the label to provide additional details about the select and its options.\n   */\n  description?: React.ReactNode;\n  /**\n   * Text rendered in the Select component before a value is set.\n   */\n  placeholder?: string;\n  /**\n   * The `name` attribute specifies the name for a drop-down list.\n   *\n   * The `name` attribute is used to reference elements in a JavaScript, or to reference form data after a form is submitted.\n   */\n  name?: string;\n  /**\n   * Allows the user to unselect an option.\n   */\n  allowDeselect?: boolean;\n  /**\n   * Error message rendered when the `state` prop is set to `error`.\n   */\n  errorMessage?: string;\n  /**\n   * Determines whether the component should be rendered in an error state.\n   */\n  state?: State;\n  /**\n   *  determines the base font size if sizeVariant is set to default.\n   */\n  baseFontSize?: BaseFontSize;\n  /**\n   *  Determines the width of the dropdown. `trigger` will make the dropdown width the width of the menu button. `option` will make the dropdown width as wide as the widest option.\n   *\n   * @default 'trigger'\n   */\n  dropdownWidthBasis?: DropdownWidthBasis;\n\n  /**\n   * @internal\n   */\n  __INTERNAL__menuButtonSlot__?: React.ForwardRefExoticComponent<\n    React.RefAttributes<unknown>\n  >;\n\n  /**\n   * @internal\n   */\n  __INTERNAL__menuButtonSlotProps__?: Partial<ButtonProps> &\n    Record<string, any>;\n}\n\nexport interface LabelProp {\n  label: string;\n  'aria-labelledby': string;\n  'aria-label': string;\n}\n\nexport type SelectProps = BaseSelectProps &\n  Either<LabelProp, 'label' | 'aria-labelledby' | 'aria-label'> &\n  (\n    | // Uncontrolled\n    ({\n        /**\n         * `value` makes the component a controlled component and using `defaultValue` makes it uncontrolled.\n         */\n        defaultValue?: string;\n        /**\n         * `value` makes the component a controlled component and using `defaultValue` makes it uncontrolled.\n         */\n        value?: undefined;\n      } & {\n        /**\n         * A function that takes in the value of the selected option, and the event that was used to select the value (i.e. React.MouseEvent | KeyboardEvent | React.KeyboardEvent).\n         *\n         * Note: This API is different from the native HTML `<select>` element's `onChange` prop given the current technical design of this component.\n         */\n        onChange?: (\n          value: string,\n          event: React.MouseEvent | KeyboardEvent | React.KeyboardEvent,\n        ) => void;\n        /**\n         * Indicates that the component's value cannot be changed.\n         */\n        readOnly?: false;\n      })\n    // Controlled\n    | ({ value: string; defaultValue?: undefined } & (\n        | {\n            /**\n             * A function that takes in the value of the selected option, and the event that was used to select the value (i.e. React.MouseEvent | KeyboardEvent | React.KeyboardEvent).\n             *\n             * Note: This API is different from the native HTML `<select>` element's `onChange` prop given the current technical design of this component.\n             */\n            onChange: (\n              value: string,\n              event: React.MouseEvent | KeyboardEvent | React.KeyboardEvent,\n            ) => void;\n            readOnly?: false;\n          }\n        | { readOnly: true; onChange?: undefined }\n      ))\n  );\n","import { transparentize } from 'polished';\n\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nimport { Size } from './Select/Select.types';\n\ninterface ColorSet {\n  menu: {\n    shadow: string;\n    border?: string;\n  };\n  option: {\n    group: {\n      label: string;\n    };\n    background: {\n      base: string;\n      hovered: string;\n      focused: string;\n    };\n    text: {\n      base: string;\n      selected: string;\n      disabled: string;\n      focused: string;\n    };\n    icon: {\n      base: string;\n      selected: string;\n      disabled: string;\n    };\n    indicator: {\n      focused: string;\n    };\n  };\n}\n\nexport const colorSets: Record<Theme, ColorSet> = {\n  [Theme.Light]: {\n    menu: {\n      border: palette.gray.light2,\n      shadow: transparentize(0.75, palette.black),\n    },\n    option: {\n      group: {\n        label: palette.gray.dark1,\n      },\n      background: {\n        base: palette.white,\n        hovered: palette.gray.light2,\n        focused: palette.blue.light3,\n      },\n      text: {\n        base: palette.gray.dark3,\n        selected: palette.blue.base,\n        disabled: palette.gray.base,\n        focused: palette.blue.dark2,\n      },\n      icon: {\n        base: palette.gray.dark1,\n        selected: palette.blue.base,\n        disabled: palette.gray.base,\n      },\n      indicator: {\n        focused: palette.blue.base,\n      },\n    },\n  },\n\n  [Theme.Dark]: {\n    menu: {\n      border: palette.gray.dark2,\n      shadow: transparentize(0.85, '#000000'),\n    },\n    option: {\n      group: {\n        label: palette.gray.base,\n      },\n      background: {\n        base: palette.gray.dark3,\n        hovered: palette.gray.dark4,\n        focused: palette.blue.dark3,\n      },\n      text: {\n        base: palette.gray.light2,\n        selected: palette.gray.light2,\n        disabled: palette.gray.base,\n        focused: palette.blue.light3,\n      },\n      icon: {\n        base: palette.gray.base,\n        selected: palette.blue.light1,\n        disabled: palette.gray.base,\n      },\n      indicator: {\n        focused: palette.blue.light1,\n      },\n    },\n  },\n};\n\nexport interface SizeSet {\n  height: number;\n  text: number;\n  lineHeight?: number;\n  option: {\n    text: number;\n  };\n  warningIcon: number;\n  label?: {\n    text: number;\n    lineHeight: number;\n  };\n  description?: {\n    text: number;\n    lineHeight: number;\n  };\n}\n\nexport const sizeSets: Record<Size, SizeSet> = {\n  [Size.XSmall]: {\n    height: 22,\n    text: 13,\n    option: {\n      text: 13,\n    },\n    warningIcon: 16,\n  },\n  [Size.Small]: {\n    height: 28,\n    text: 13,\n    option: {\n      text: 13,\n    },\n    warningIcon: 16,\n  },\n  [Size.Default]: {\n    height: 36,\n    text: 13,\n    option: {\n      text: 13,\n    },\n    warningIcon: 16,\n  },\n  [Size.Large]: {\n    height: 48,\n    text: 18,\n    option: {\n      text: 16,\n    },\n    warningIcon: 16,\n  },\n};\n\ninterface MobileSizeSet {\n  height: number;\n  text: number;\n  label: {\n    text: number;\n    lineHeight: number;\n  };\n  description: {\n    text: number;\n    lineHeight: number;\n  };\n  option: {\n    text: number;\n  };\n  warningIcon: number;\n}\n\nexport const mobileSizeSet: MobileSizeSet = {\n  height: 36,\n  text: 16,\n  label: {\n    text: 16,\n    lineHeight: 19,\n  },\n  description: {\n    text: 16,\n    lineHeight: 22,\n  },\n  option: {\n    text: 16,\n  },\n  warningIcon: 14,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { descriptionClassName } from '@leafygreen-ui/input-option';\nimport { createUniqueClassName } from '@leafygreen-ui/lib';\nimport {\n  fontFamilies,\n  spacing,\n  transitionDuration,\n} from '@leafygreen-ui/tokens';\n\nexport const OptionClassName = createUniqueClassName('option');\n\nexport const optionStyle = css`\n  display: flex;\n  width: 100%;\n  outline: none;\n  overflow-wrap: anywhere;\n  transition: background-color ${transitionDuration.default}ms ease-in-out;\n  position: relative;\n  padding: ${spacing[2]}px 12px;\n  line-height: inherit;\n\n  &:before {\n    content: '';\n    position: absolute;\n    transform: scaleY(0.3);\n    top: 7px;\n    bottom: 7px;\n    left: 0;\n    right: 0;\n    width: 4px;\n    border-radius: 0px 4px 4px 0px;\n    opacity: 0;\n    transition: all ${transitionDuration.default}ms ease-in-out;\n  }\n\n  .${descriptionClassName} {\n    line-height: 16px; // Hardcoding because it does not match a token\n  }\n`;\n\nexport const optionTextStyle = css`\n  display: flex;\n  align-items: center;\n  font-family: ${fontFamilies.default};\n`;\n\nexport const iconStyle = css`\n  min-width: 16px;\n`;\n\nexport const glyphFocusStyle = css`\n  .${OptionClassName} {\n    &:focus-visible & {\n      color: currentColor;\n    }\n  }\n`;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { usePrevious } from '@leafygreen-ui/hooks';\nimport { isComponentGlyph } from '@leafygreen-ui/icon';\nimport CheckmarkIcon from '@leafygreen-ui/icon/dist/Checkmark';\nimport {\n  descriptionClassName,\n  InputOption,\n  InputOptionContent,\n} from '@leafygreen-ui/input-option';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nimport { colorSets } from '../styleSets';\n\nimport { InternalProps, OptionProps } from './Option.types';\nimport {\n  glyphFocusStyle,\n  iconStyle,\n  OptionClassName,\n  optionStyle,\n  optionTextStyle,\n} from './Options.styles';\n\nexport function InternalOption({\n  children,\n  className,\n  glyph,\n  selected,\n  focused,\n  disabled,\n  onClick,\n  onFocus,\n  triggerScrollIntoView,\n  hasGlyphs,\n  description,\n  ...rest\n}: InternalProps) {\n  const { theme } = useDarkMode();\n\n  const { option: colorSet } = colorSets[theme];\n\n  const ref = useRef<HTMLLIElement>(null);\n\n  const scrollIntoView = useCallback(() => {\n    if (ref.current == null) {\n      return null;\n    }\n\n    const element = ref.current;\n    const parent = element?.offsetParent;\n\n    if (!parent) {\n      return null;\n    }\n\n    // Can't use Element.scrollIntoView because it might\n    // cause scrolling outside the immediate parent.\n    parent.scrollTop =\n      element.offsetTop + (element.clientHeight - parent.clientHeight) / 2;\n  }, [ref]);\n\n  const alreadyScrolledIntoView = usePrevious(triggerScrollIntoView);\n  const shouldScrollIntoView =\n    triggerScrollIntoView && !alreadyScrolledIntoView;\n\n  useEffect(() => {\n    if (shouldScrollIntoView) {\n      scrollIntoView();\n    }\n  }, [scrollIntoView, shouldScrollIntoView]);\n\n  const wasFocused = usePrevious(focused);\n  const shouldFocus = focused && !wasFocused;\n\n  useEffect(() => {\n    if (shouldFocus) {\n      ref.current!.focus();\n    }\n  }, [shouldFocus]);\n\n  if (glyph) {\n    if (!isComponentGlyph(glyph)) {\n      console.error(\n        '`Option` instance did not render icon because it is not a known glyph element.',\n      );\n    }\n  }\n\n  // FIXME: temps styles until styles are consistent with InputOption\n  const glyphProp =\n    glyph && isComponentGlyph(glyph)\n      ? React.cloneElement(glyph, {\n          key: 'glyph',\n          className: cx(\n            iconStyle,\n            css`\n              color: ${colorSet.icon.base};\n            `,\n            glyphFocusStyle,\n            {\n              [css`\n                color: ${colorSet.icon.disabled};\n              `]: disabled,\n            },\n            glyph.props.className,\n          ),\n        })\n      : undefined;\n\n  // FIXME: temps styles until styles are consistent with InputOption\n  const checkmark = selected ? (\n    <CheckmarkIcon\n      key=\"checkmark\"\n      className={cx(\n        iconStyle,\n        css`\n          color: ${colorSet.icon.selected};\n        `,\n        glyphFocusStyle,\n        {\n          [css`\n            color: ${colorSet.icon.disabled};\n          `]: disabled,\n        },\n      )}\n    />\n  ) : undefined;\n\n  const leftGlyph = hasGlyphs ? glyphProp : checkmark;\n  const rightGlyph = hasGlyphs ? checkmark : undefined;\n\n  return (\n    <InputOption\n      aria-label={typeof children === 'string' ? children : 'option'}\n      {...rest}\n      disabled={disabled}\n      role=\"option\"\n      tabIndex={-1}\n      ref={ref}\n      className={cx(\n        OptionClassName,\n        optionStyle,\n        // FIXME: temps styles until styles are consistent with InputOption\n        {\n          [css`\n            &:focus-visible {\n              color: ${colorSet.text.focused};\n              background-color: ${colorSet.background.focused};\n\n              &:before {\n                opacity: 1;\n                transform: scaleY(1);\n                background-color: ${colorSet.indicator.focused};\n              }\n            }\n          `]: !disabled,\n          // FIXME: override the disabled colors since they are not consistent with InputOption\n          [css`\n            &,\n            & .${descriptionClassName} {\n              color: ${colorSet.text.disabled};\n            }\n          `]: disabled,\n        },\n        className,\n      )}\n      onClick={onClick}\n      onFocus={onFocus}\n      onKeyDown={undefined}\n    >\n      <InputOptionContent\n        leftGlyph={leftGlyph}\n        rightGlyph={rightGlyph}\n        description={description}\n      >\n        <span\n          className={cx(optionTextStyle, {\n            // FIXME: temps styles since we're not passing the `selected` prop to InputOption\n            [css`\n              font-weight: ${fontWeights.bold};\n            `]: selected,\n          })}\n        >\n          {children}\n        </span>\n      </InputOptionContent>\n    </InputOption>\n  );\n}\n\nInternalOption.displayName = 'Option';\n\nexport function Option(_: OptionProps): JSX.Element {\n  throw Error('`Option` must be a child of a `Select` instance');\n}\n\nOption.displayName = 'Option';\n\nOption.propTypes = {\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  glyph: PropTypes.element,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  description: PropTypes.string,\n};\n\n// React.ReactComponentElement messes up the original\n// typing of props, so it is fixed up by overriding it.\nexport type OptionElement = Omit<\n  React.ReactComponentElement<typeof Option>,\n  'props'\n> & { props: OptionProps };\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights, spacing } from '@leafygreen-ui/tokens';\n\nexport const optionGroupStyle = css`\n  padding: ${spacing[2]}px 0;\n`;\n\nexport const optionGroupLabelStyle = css`\n  cursor: default;\n  width: 100%;\n  padding: 0 12px 2px;\n  outline: none;\n  overflow-wrap: anywhere;\n  font-size: 12px;\n  line-height: 16px;\n  font-weight: ${fontWeights.bold};\n  text-transform: uppercase;\n  letter-spacing: 0.4px;\n`;\n","import { createContext } from 'react';\n\nimport { Size } from './Select/Select.types';\n\ninterface SelectData {\n  size: Size;\n  open: boolean;\n  disabled: boolean;\n}\n\nexport const SelectContext = createContext<SelectData>({\n  size: Size.Default,\n  open: false,\n  disabled: false,\n});\n\nexport default SelectContext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useIdAllocator } from '@leafygreen-ui/hooks';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { colorSets } from '../styleSets';\n\nimport { optionGroupLabelStyle, optionGroupStyle } from './OptionGroup.styles';\nimport { InternalOptionProps, OptionGroupProps } from './OptionGroup.types';\n\nexport function InternalOptionGroup({\n  className,\n  label,\n  children,\n  ...rest\n}: InternalOptionProps) {\n  const { theme } = useDarkMode();\n  const colorSet = colorSets[theme].option;\n\n  const groupId = useIdAllocator({ prefix: 'select-option-group' });\n\n  return (\n    <div className={cx(optionGroupStyle, className)} {...rest}>\n      <div\n        id={groupId}\n        className={cx(\n          optionGroupLabelStyle,\n          css`\n            color: ${colorSet.group.label};\n          `,\n        )}\n      >\n        {label}\n      </div>\n      <div role=\"group\" aria-labelledby={groupId}>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nInternalOptionGroup.displayName = 'OptionGroup';\n\nexport function OptionGroup(_: OptionGroupProps): JSX.Element {\n  throw Error('`OptionGroup` must be a child of a `Select` instance');\n}\n\nOptionGroup.displayName = 'OptionGroup';\n\nOptionGroup.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([\n        PropTypes.oneOf([false, null, undefined, '']),\n        PropTypes.element,\n      ]),\n    ),\n  ]).isRequired,\n  className: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nexport type OptionGroupElement = React.ReactComponentElement<\n  typeof OptionGroup\n>;\n","import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { isFragment } from 'react-is';\n\nimport { consoleOnce, isComponentType } from '@leafygreen-ui/lib';\nimport { breakpoints } from '@leafygreen-ui/tokens';\n\nimport {\n  InternalOption,\n  InternalProps as InternalOptionProps,\n  OptionElement,\n  ReactEmpty,\n} from './Option';\nimport { InternalOptionGroup, OptionGroupElement } from './OptionGroup';\n\n// Any screen smaller than a tablet with no pointer, or a coarse pointer and no hover capability (i.e. touch screen)\n// For more details, see: https://css-tricks.com/touch-devices-not-judged-size/\nconst _baseQuery = `@media only screen and (max-width: ${breakpoints.Tablet}px) and (hover: none)`;\nexport const MobileMediaQuery = `${_baseQuery} and (pointer: coarse), ${_baseQuery} and (pointer: none)`;\n\nfunction isReactEmpty(value: React.ReactNode): value is ReactEmpty {\n  return (\n    value === undefined || value === null || value === false || value === ''\n  );\n}\n\nexport function traverseSelectChildren(\n  children: React.ReactNode,\n  optionFn: (child: OptionElement, group?: OptionGroupElement) => void,\n): void {\n  React.Children.forEach(children, child => {\n    if (isComponentType<OptionElement>(child, 'Option')) {\n      optionFn(child);\n    } else if (isComponentType<OptionGroupElement>(child, 'OptionGroup')) {\n      traverseSelectChildren(child.props.children, option =>\n        optionFn(option, child),\n      );\n    } else if (isFragment(child)) {\n      traverseSelectChildren(child.props.children, optionFn);\n    }\n  });\n}\n\nexport function convertToInternalElements(\n  children: React.ReactNode,\n  optionFn: (\n    child: OptionElement,\n    group?: OptionGroupElement,\n  ) => InternalOptionProps,\n  fallbackFn?: (child: React.ReactNode) => void,\n): React.ReactNode {\n  if (\n    !(\n      React.Children.toArray(children).every(child =>\n        isComponentType<OptionElement>(child, 'Option'),\n      ) ||\n      React.Children.toArray(children).every(child =>\n        isComponentType<OptionGroupElement>(child, 'OptionGroup'),\n      )\n    )\n  ) {\n    consoleOnce.warn(\n      `LeafyGreen Select: Combining grouped and ungrouped Select Options can cause styling issues`,\n    );\n  }\n\n  return React.Children.map(children, child => {\n    if (isComponentType<OptionElement>(child, 'Option')) {\n      return <InternalOption {...optionFn(child)} />;\n    } else if (isComponentType<OptionGroupElement>(child, 'OptionGroup')) {\n      const { children: options, ...rest } = child.props;\n      return (\n        <InternalOptionGroup className={undefined} {...rest}>\n          {convertToInternalElements(\n            options,\n            option => optionFn(option, child),\n            fallbackFn,\n          )}\n        </InternalOptionGroup>\n      );\n    } else if (isFragment(child)) {\n      return convertToInternalElements(\n        child.props.children,\n        optionFn,\n        fallbackFn,\n      );\n    } else if (!isReactEmpty(child)) {\n      fallbackFn?.(child);\n    }\n\n    return null;\n  });\n}\n\nexport function getOptionValue(option: OptionElement | null): string {\n  if (option === null) {\n    return '';\n  }\n\n  if (option.props.value !== undefined) {\n    return option.props.value;\n  }\n\n  if (Array.isArray(option.props.children)) {\n    return option.props.children.filter(child => !isReactEmpty(child)).join('');\n  }\n\n  if (option.props.children) {\n    return option.props.children.toString();\n  }\n\n  return '';\n}\n\nexport function isOptionDisabled(\n  option: OptionElement,\n  group: OptionGroupElement | undefined,\n): boolean {\n  return (option.props.disabled ?? false) || (group?.props?.disabled ?? false);\n}\n\nexport function isOptionSelectable(\n  option: OptionElement,\n  group: OptionGroupElement | undefined,\n  value: string,\n): boolean {\n  return getOptionValue(option) === value && !isOptionDisabled(option, group);\n}\n\n/**\n * Given the selected option from a previous render, attempts to find a\n * match among the options of the next render to become the next selected\n * option, so that the state of the component doesn't need to be lost.\n */\nexport function reconcileOption(\n  children: React.ReactNode,\n  previousOption: OptionElement,\n): OptionElement | null {\n  // we disregard `key`s because they should only be compared in\n  // the context of the same parent element, which we don't know\n  // and would be complex to track. we disregard which option\n  // group the previous option was in as well for simplicity.\n  let sameInstance: OptionElement | undefined;\n  let sameChildrenAndValue: OptionElement | undefined;\n  let sameExplicitValue: OptionElement | undefined;\n  let sameValue: OptionElement | undefined;\n\n  traverseSelectChildren(children, option => {\n    if (option === previousOption) {\n      sameInstance = previousOption;\n    } else if (\n      option.props.children === previousOption.props.children &&\n      option.props.value === previousOption.props.value\n    ) {\n      sameChildrenAndValue ??= option;\n    } else if (\n      option.props.value !== undefined &&\n      option.props.value === previousOption.props.value\n    ) {\n      sameExplicitValue ??= option;\n    } else if (getOptionValue(option) === getOptionValue(previousOption)) {\n      sameValue ??= option;\n    }\n  });\n\n  return (\n    sameInstance ??\n    sameChildrenAndValue ??\n    sameExplicitValue ??\n    sameValue ??\n    null\n  );\n}\n\nexport function useObservedRef<T>(\n  callback: (value: T) => void,\n  initialValue: T,\n  options: { initialValue: T; deps?: React.DependencyList },\n): React.MutableRefObject<T>;\nexport function useObservedRef<T>(\n  callback: (value: T) => void,\n  options?: { initialValue: T | null; deps?: React.DependencyList },\n): React.RefObject<T>;\nexport function useObservedRef<T>(\n  callback: (value: T | undefined) => void,\n  options?: { deps?: React.DependencyList },\n): React.MutableRefObject<T>;\nexport function useObservedRef<T>(\n  callback: (value: T | null | undefined) => void,\n  {\n    initialValue,\n    deps = [],\n  }: { initialValue?: T | null; deps?: React.DependencyList } = {},\n) {\n  const ref = useRef(initialValue);\n\n  return useMemo(\n    () => ({\n      get current() {\n        return ref.current;\n      },\n      set current(nextValue) {\n        ref.current = nextValue;\n        callback(nextValue);\n      },\n    }),\n    [\n      callback,\n      ref,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...deps,\n    ],\n  );\n}\n\ntype SettableRef<T> = React.RefCallback<T> | React.MutableRefObject<T>;\n\ntype ValueOrArray<T> = T | ReadonlyArray<T>;\n\nexport function useForwardedRef<T>(\n  forwardedRefOrRefs: ValueOrArray<SettableRef<T> | null>,\n  initialValue: T,\n): React.MutableRefObject<T>;\nexport function useForwardedRef<T>(\n  forwardedRefOrRefs: ValueOrArray<SettableRef<T | null> | null>,\n  initialValue: T | null,\n): React.RefObject<T>;\nexport function useForwardedRef<T>(\n  forwardedRefOrRefs: ValueOrArray<SettableRef<T | null | undefined> | null>,\n  initialValue?: T | null,\n): React.MutableRefObject<T | null | undefined> {\n  const forwardValueToRefs = useCallback(\n    <T,>(\n      forwardedRefOrRefs: ValueOrArray<SettableRef<T> | null>,\n      nextValue: T,\n    ) => {\n      if (Array.isArray(forwardedRefOrRefs)) {\n        forwardedRefOrRefs.forEach(forwardValueToRefs);\n      } else if (typeof forwardedRefOrRefs === 'function') {\n        forwardedRefOrRefs(nextValue);\n      } else if (forwardedRefOrRefs) {\n        // @ts-expect-error https://github.com/microsoft/TypeScript/issues/40527\n        forwardedRefOrRefs.current = nextValue;\n      }\n    },\n    [],\n  );\n\n  return useObservedRef(\n    useCallback(\n      value => forwardValueToRefs(forwardedRefOrRefs, value),\n      [forwardedRefOrRefs, forwardValueToRefs],\n    ),\n    { initialValue },\n  );\n}\n\n/**\n * TODO: Explore obsoleting `useElementNode` in favor of this\n */\nexport const useStateRef: typeof useRef = <T,>(initialValue?: T) => {\n  const [value, setValue] = useState(initialValue);\n  return useObservedRef(setValue, { initialValue, deps: [value] });\n};\n","import { css, cx } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { fontFamilies, Size, spacing } from '@leafygreen-ui/tokens';\n\nimport { colorSets, sizeSets } from '../styleSets';\n\nexport const popoverClassName = createUniqueClassName('select-popover');\n\nexport const maxMenuHeight = 274;\nexport const menuMargin = spacing[2];\n\nexport const baseMenuStyle = css`\n  position: relative;\n  text-align: left;\n  width: 100%;\n  border-radius: 3px;\n  line-height: 16px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  overflow: auto;\n`;\n\nexport const autoWidthStyles = css`\n  width: max-content;\n`;\n\nexport const getMenuStyles = (theme: Theme, size: Size) => {\n  const sizeSet = sizeSets[size];\n  const colorSet = colorSets[theme];\n\n  return cx(\n    css`\n      font-family: ${fontFamilies.default};\n      font-size: ${sizeSet.option.text}px;\n      min-height: ${sizeSet.height}px;\n      background-color: ${colorSet.option.background.base};\n      border-radius: 12px;\n      box-shadow: 0 4px 7px 0 ${colorSet.menu.shadow};\n      padding: ${spacing[2]}px 0;\n      border: 1px solid ${colorSet.menu.border};\n    `,\n  );\n};\n","import React, { useCallback, useContext } from 'react';\nimport isUndefined from 'lodash/isUndefined';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useAvailableSpace } from '@leafygreen-ui/hooks';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport Popover, { Align, Justify } from '@leafygreen-ui/popover';\n\nimport { DropdownWidthBasis } from '../Select/Select.types';\nimport SelectContext from '../SelectContext';\nimport { mobileSizeSet } from '../styleSets';\nimport { MobileMediaQuery, useForwardedRef } from '../utils';\n\nimport {\n  autoWidthStyles,\n  baseMenuStyle,\n  getMenuStyles,\n  maxMenuHeight,\n  menuMargin,\n  popoverClassName,\n} from './ListMenu.styles';\nimport { ListMenuProps } from './ListMenu.types';\n\n/**\n * @internal\n */\nconst ListMenu = React.forwardRef<HTMLUListElement, ListMenuProps>(\n  function ListMenu(\n    {\n      children,\n      id,\n      referenceElement,\n      className,\n      labelId,\n      dropdownWidthBasis,\n      usePortal = true,\n      portalContainer,\n      scrollContainer,\n      portalClassName,\n      popoverZIndex,\n      onEntering,\n      onEnter,\n      onEntered,\n      onExiting,\n      onExit,\n      onExited,\n    }: ListMenuProps,\n    forwardedRef,\n  ) {\n    const { theme } = useDarkMode();\n    const { size, disabled, open } = useContext(SelectContext);\n\n    const ref = useForwardedRef(forwardedRef, null);\n\n    const availableSpace = useAvailableSpace(referenceElement, menuMargin);\n    const maxHeightValue = !isUndefined(availableSpace)\n      ? `${Math.min(availableSpace, maxMenuHeight)}px`\n      : 'unset';\n\n    const onClick = useCallback(\n      (event: React.MouseEvent) => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n        event.stopPropagation();\n      },\n      [ref],\n    );\n\n    const popoverProps = {\n      popoverZIndex,\n      onEntering,\n      onEnter,\n      onEntered,\n      onExiting,\n      onExit,\n      onExited,\n      ...(usePortal\n        ? { usePortal, portalClassName, portalContainer, scrollContainer }\n        : { usePortal }),\n    };\n\n    return (\n      <Popover\n        active={open && !disabled}\n        spacing={6}\n        align={Align.Bottom}\n        justify={Justify.Start}\n        adjustOnMutation\n        className={cx(popoverClassName, className, {\n          [autoWidthStyles]: dropdownWidthBasis === DropdownWidthBasis.Option,\n        })}\n        refEl={referenceElement}\n        {...popoverProps}\n      >\n        {/* Keyboard events handled in Select component through event listener hook */}\n        {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events */}\n        <ul\n          aria-labelledby={labelId}\n          role=\"listbox\"\n          ref={ref}\n          tabIndex={-1}\n          onClick={onClick}\n          className={cx(\n            baseMenuStyle,\n            getMenuStyles(theme, size),\n            css`\n              max-height: ${maxHeightValue};\n              ${MobileMediaQuery} {\n                font-size: ${mobileSizeSet.option.text}px;\n              }\n            `,\n          )}\n          id={id}\n        >\n          {children}\n        </ul>\n      </Popover>\n    );\n  },\n);\n\nListMenu.displayName = 'ListMenu';\n\nexport default ListMenu;\n","import { css, cx } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  focusRing,\n  fontWeights,\n  hoverRing,\n  Size,\n  spacing,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const menuButtonTextClassName = createUniqueClassName('select-menu');\n\nexport const menuButtonStyleOverrides = css`\n  // Override button defaults\n  font-weight: ${fontWeights.regular};\n  > *:last-child {\n    grid-template-columns: 1fr 16px;\n    justify-content: flex-start;\n\n    > svg {\n      justify-self: right;\n      width: 16px;\n      height: 16px;\n    }\n  }\n`;\n\nexport const menuButtonSizeStyle: Record<Size, string> = {\n  [Size.Default]: css`\n    > *:last-child {\n      padding: 0 12px;\n    }\n  `,\n  [Size.Large]: css`\n    > *:last-child {\n      padding: 0 12px 0 ${spacing[3]}px;\n    }\n  `,\n  [Size.Small]: css`\n    > *:last-child {\n      padding: 0 ${spacing[2]}px 0 10px;\n    }\n  `,\n  [Size.XSmall]: css`\n    text-transform: none;\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n    > *:last-child {\n      padding: 0 ${spacing[1]}px 0 10px;\n    }\n  `,\n};\n\nexport const menuButtonModeOverrides: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${palette.white};\n    // Override button default color\n    > *:last-child {\n      > svg {\n        color: ${palette.gray.dark2};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    border-color: ${palette.gray.base};\n    background-color: ${palette.gray.dark4};\n    color: ${palette.gray.light3};\n\n    // Override button default color\n    > *:last-child {\n      > svg {\n        color: ${palette.gray.light1};\n      }\n    }\n\n    &:hover,\n    &:active,\n    &:focus {\n      background-color: ${palette.gray.dark4};\n      color: ${palette.gray.light3};\n    }\n  `,\n};\n\n// Override default button focus styles\nexport const menuButtonFocusStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    &:focus-visible {\n      box-shadow: ${focusRing['light'].input};\n      border-color: rgba(255, 255, 255, 0);\n    }\n  `,\n  [Theme.Dark]: css`\n    &:focus-visible {\n      background-color: ${palette.gray.dark4};\n      box-shadow: ${focusRing['dark'].input};\n      border-color: rgba(255, 255, 255, 0);\n    }\n  `,\n};\n\nexport const menuButtonDeselectedStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light1};\n\n    &:hover,\n    &:active,\n    &:focus {\n      color: ${palette.gray.light1};\n    }\n  `,\n};\n\nexport const menuButtonDisabledStyles = css`\n  cursor: not-allowed;\n  pointer-events: unset;\n  box-shadow: unset;\n\n  &:active {\n    pointer-events: none;\n  }\n`;\n\nexport const menuButtonDisabledThemeStyles: Record<Theme, string> = {\n  [Theme.Light]: cx(\n    menuButtonDisabledStyles,\n    css`\n      &[aria-disabled='true'] {\n        background-color: ${palette.gray.light2};\n        color: ${palette.gray.base};\n\n        > *:last-child {\n          > svg {\n            color: ${palette.gray.base};\n          }\n        }\n      }\n    `,\n  ),\n  [Theme.Dark]: cx(\n    menuButtonDisabledStyles,\n    css`\n      &[aria-disabled='true'] {\n        background-color: ${palette.gray.dark3};\n        color: ${palette.gray.dark1};\n        border-color: ${palette.gray.dark2};\n\n        > *:last-child {\n          > svg {\n            color: ${palette.gray.dark1};\n          }\n        }\n      }\n    `,\n  ),\n};\n\nexport const menuButtonTextWrapperStyle = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-grow: 1;\n  gap: ${spacing[1]}px;\n  overflow: hidden;\n`;\n\nexport const menuButtonTextStyle = css`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 100%;\n`;\n\nexport const errorColor: Record<Theme, string> = {\n  [Theme.Light]: palette.red.base,\n  [Theme.Dark]: palette.red.light1,\n};\n\nexport const menuButtonErrorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    border-color: ${errorColor[Theme.Light]};\n    background-color: ${palette.white};\n\n    &:hover,\n    &:active {\n      box-shadow: ${hoverRing.light.red};\n    }\n  `,\n  [Theme.Dark]: css`\n    border-color: ${errorColor[Theme.Dark]};\n\n    &:hover,\n    &:active {\n      border-color: ${errorColor[Theme.Dark]};\n      box-shadow: ${hoverRing.dark.red};\n    }\n  `,\n};\n","import React, { useCallback, useContext } from 'react';\n\nimport Button, { Size as ButtonSize, Variant } from '@leafygreen-ui/button';\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport CaretDownIcon from '@leafygreen-ui/icon/dist/CaretDown';\nimport WarningIcon from '@leafygreen-ui/icon/dist/Warning';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport { Theme } from '@leafygreen-ui/lib';\n\nimport { State } from '../Select/Select.types';\nimport SelectContext from '../SelectContext';\nimport { mobileSizeSet, sizeSets } from '../styleSets';\nimport { MobileMediaQuery, useForwardedRef } from '../utils';\n\nimport {\n  errorColor,\n  menuButtonDeselectedStyles,\n  menuButtonDisabledThemeStyles,\n  menuButtonErrorStyle,\n  menuButtonFocusStyle,\n  menuButtonModeOverrides,\n  menuButtonSizeStyle,\n  menuButtonStyleOverrides,\n  menuButtonTextClassName,\n  menuButtonTextStyle,\n  menuButtonTextWrapperStyle,\n} from './MenuButton.styles';\nimport { MenuButtonProps } from './MenuButton.types';\n\n/**\n * @internal\n */\nconst MenuButton = React.forwardRef<HTMLButtonElement, MenuButtonProps>(\n  function MenuButton(\n    {\n      children,\n      value,\n      text,\n      name,\n      deselected,\n      readOnly,\n      onClose,\n      onOpen,\n      errorMessage,\n      state,\n      baseFontSize,\n      __INTERNAL__menuButtonSlot__,\n      __INTERNAL__menuButtonSlotProps__,\n      ...rest\n    }: MenuButtonProps,\n    forwardedRef,\n  ) {\n    const { theme } = useDarkMode();\n    const { open, size, disabled } = useContext(SelectContext);\n\n    const ref = useForwardedRef(forwardedRef, null);\n\n    const sizeSet = sizeSets[size];\n\n    const onClick = useCallback(() => {\n      if (open) {\n        onClose();\n      } else {\n        onOpen();\n      }\n      ref.current!.focus();\n    }, [onClose, onOpen, open, ref]);\n\n    const Component = __INTERNAL__menuButtonSlot__\n      ? __INTERNAL__menuButtonSlot__\n      : Button;\n\n    const buttonClassName = __INTERNAL__menuButtonSlot__\n      ? ''\n      : cx(\n          menuButtonStyleOverrides,\n          menuButtonModeOverrides[theme],\n          menuButtonSizeStyle[size],\n          menuButtonFocusStyle[theme],\n          {\n            [menuButtonDeselectedStyles[theme]]: deselected,\n            [menuButtonDisabledThemeStyles[theme]]: disabled,\n            [menuButtonErrorStyle[theme]]:\n              state === State.Error && !!errorMessage,\n            [css`\n              letter-spacing: initial;\n            `]: size === ButtonSize.XSmall,\n          },\n          css`\n            width: 100%;\n            ${MobileMediaQuery} {\n              height: ${mobileSizeSet.height}px;\n              font-size: ${mobileSizeSet.text}px;\n            }\n          `,\n        );\n\n    const testId =\n      (rest as any)['data-testid'] ?? 'leafygreen-ui-select-menubutton';\n\n    return (\n      <Component\n        {...rest}\n        {...__INTERNAL__menuButtonSlotProps__}\n        ref={ref}\n        name={name}\n        value={value}\n        disabled={disabled}\n        onClick={onClick}\n        variant={Variant.Default}\n        darkMode={theme === Theme.Dark}\n        rightGlyph={<CaretDownIcon />}\n        size={size}\n        data-testid={testId}\n        className={cx(\n          buttonClassName,\n          {\n            [css`\n              font-size: ${baseFontSize}px;\n            `]: size === ButtonSize.Default,\n          },\n          __INTERNAL__menuButtonSlotProps__?.className,\n        )}\n      >\n        <div className={menuButtonTextWrapperStyle}>\n          <div className={cx(menuButtonTextClassName, menuButtonTextStyle)}>\n            {text}\n          </div>\n          {state === State.Error && errorMessage && (\n            <WarningIcon\n              role=\"presentation\"\n              className={css`\n                color: ${errorColor[theme]};\n              `}\n              size={sizeSet.warningIcon}\n            />\n          )}\n        </div>\n        {children}\n      </Component>\n    );\n  },\n);\n\nMenuButton.displayName = 'MenuButton';\n\nexport default MenuButton;\n","import { css } from '@leafygreen-ui/emotion';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  fontFamilies,\n  spacing,\n  transitionDuration,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nimport { SizeSet } from '../styleSets';\n\nexport const labelDescriptionContainerStyle = css`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: ${spacing[1]}px;\n`;\n\nexport const wrapperStyle = css`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const largeLabelStyles = css`\n  font-size: ${typeScales.large.fontSize}px;\n  line-height: ${typeScales.large.lineHeight}px;\n`;\n\nexport const errorTextStyle = ({\n  darkMode,\n  sizeSet,\n}: {\n  darkMode: boolean;\n  sizeSet: SizeSet;\n}) => css`\n  font-family: ${fontFamilies.default};\n  color: ${darkMode ? palette.red.light1 : palette.red.base};\n  font-size: ${sizeSet.text}px;\n  margin-top: ${spacing[1]}px;\n  padding-left: 2px;\n  transition: color ${transitionDuration.faster}ms ease-in-out;\n  transition-delay: ${transitionDuration.faster}ms;\n`;\n","import React, {\n  ComponentProps,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n  WeakValidationMap,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport {\n  useEventListener,\n  useForwardedRef,\n  useIdAllocator,\n  useViewportSize,\n} from '@leafygreen-ui/hooks';\nimport LeafyGreenProvider, {\n  useDarkMode,\n} from '@leafygreen-ui/leafygreen-provider';\nimport { keyMap } from '@leafygreen-ui/lib';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\nimport { Description, Label } from '@leafygreen-ui/typography';\n\nimport ListMenu from '../ListMenu';\nimport MenuButton from '../MenuButton';\nimport { InternalOption, OptionElement } from '../Option';\nimport SelectContext from '../SelectContext';\nimport { mobileSizeSet, sizeSets } from '../styleSets';\nimport {\n  convertToInternalElements,\n  getOptionValue,\n  isOptionDisabled,\n  isOptionSelectable,\n  MobileMediaQuery,\n  reconcileOption,\n  traverseSelectChildren,\n  useStateRef,\n} from '../utils';\n\nimport {\n  errorTextStyle,\n  labelDescriptionContainerStyle,\n  largeLabelStyles,\n  wrapperStyle,\n} from './Select.styles';\nimport { DropdownWidthBasis, SelectProps, Size, State } from './Select.types';\n\n/**\n * Select inputs are typically used alongside other form elements like toggles, radio boxes, or text inputs when a user needs to make a selection from a list of items.\n *\n * In a select input where there are less than 3-4 items, consider using radio boxes, or radio inputs instead.\n */\nexport const Select = forwardRef<HTMLDivElement, SelectProps>(\n  (\n    {\n      children,\n      darkMode: darkModeProp,\n      size = Size.Default,\n      disabled = false,\n      allowDeselect = true,\n      usePortal = true,\n      placeholder = 'Select',\n      errorMessage = '',\n      state = State.None,\n      dropdownWidthBasis = DropdownWidthBasis.Trigger,\n      baseFontSize = BaseFontSize.Body1,\n      id: idProp,\n      'aria-labelledby': ariaLabelledby,\n      'aria-label': ariaLabel,\n      className,\n      label,\n      description,\n      name,\n      defaultValue,\n      value,\n      onChange,\n      readOnly,\n      portalContainer,\n      scrollContainer,\n      portalClassName,\n      popoverZIndex,\n      onEntering,\n      onEnter,\n      onEntered,\n      onExiting,\n      onExit,\n      onExited,\n      __INTERNAL__menuButtonSlot__,\n      ...rest\n    },\n    fwdRef,\n  ) => {\n    const id = useIdAllocator({ prefix: 'select', id: idProp });\n    const labelId = useMemo(\n      () => (ariaLabel && !label ? undefined : ariaLabelledby ?? `${id}-label`),\n      [ariaLabelledby, ariaLabel, label, id],\n    );\n\n    if (!label && !ariaLabelledby && !ariaLabel) {\n      console.error(\n        'For screen-reader accessibility, label, aria-label, or aria-labelledby must be provided to Select.',\n      );\n    }\n\n    const { darkMode } = useDarkMode(darkModeProp);\n\n    const descriptionId = `${id}-description`;\n    const menuId = `${id}-menu`;\n\n    const [open, setOpen] = useState(false);\n\n    const containerRef = useForwardedRef(fwdRef, null);\n    const menuButtonRef = useStateRef<HTMLButtonElement>(null);\n    const menuButtonId = useIdAllocator({ prefix: 'select' });\n    const listMenuRef = useStateRef<HTMLUListElement | null>(null);\n\n    const sizeSet = sizeSets[size];\n\n    const providerData = useMemo(() => {\n      return { size, open, disabled };\n    }, [size, open, disabled]);\n\n    useEffect(() => {\n      if (value !== undefined && onChange === undefined && readOnly !== true) {\n        console.warn(\n          'You provided a `value` prop to a form field without an `onChange` handler. ' +\n            'This will render a read-only field. ' +\n            'If the field should be mutable use `defaultValue`. ' +\n            'Otherwise, set either `onChange` or `readOnly`.',\n        );\n      }\n    }, [onChange, readOnly, value]);\n\n    /**\n     * Open / close state\n     */\n    const onOpen = useCallback(() => {\n      setOpen(true);\n    }, []);\n\n    const onClose = useCallback(() => {\n      setOpen(false);\n      menuButtonRef.current!.focus();\n    }, [menuButtonRef]);\n\n    useEffect(() => {\n      if (!open) {\n        return;\n      }\n\n      const onClickOutside = (event: MouseEvent) => {\n        const stillFocused =\n          menuButtonRef.current!.contains(event.target as Node) ||\n          listMenuRef.current!.contains(event.target as Node);\n        setOpen(stillFocused);\n      };\n\n      document.addEventListener('mousedown', onClickOutside);\n      return () => {\n        document.removeEventListener('mousedown', onClickOutside);\n      };\n    }, [listMenuRef, menuButtonRef, open]);\n\n    const initialUncontrolledSelectedOption = useMemo(() => {\n      let initialUncontrolledSelectedOption: OptionElement | null = null;\n\n      if (value === undefined && defaultValue !== undefined) {\n        traverseSelectChildren(children, (option, group) => {\n          if (isOptionSelectable(option, group, defaultValue)) {\n            initialUncontrolledSelectedOption = option;\n          }\n        });\n      }\n\n      return initialUncontrolledSelectedOption;\n    }, [children, defaultValue, value]);\n\n    /**\n     * Selection\n     */\n\n    // We store the option element instance rather than just the value in order\n    // to differentiate between multiple options that have the same value.\n    const [uncontrolledSelectedOption, setUncontrolledSelectedOption] =\n      useState<OptionElement | null>(initialUncontrolledSelectedOption);\n\n    // If the option instances have changed we'll do our best to preserve\n    // the state by checking if any of the new option instances sufficiently\n    // match the current state and use it instead.\n    useEffect(() => {\n      if (uncontrolledSelectedOption !== null) {\n        setUncontrolledSelectedOption(\n          reconcileOption(children, uncontrolledSelectedOption) ??\n            initialUncontrolledSelectedOption,\n        );\n      }\n    }, [\n      children,\n      initialUncontrolledSelectedOption,\n      uncontrolledSelectedOption,\n    ]);\n\n    const selectedOption = useMemo(() => {\n      if (value !== undefined) {\n        let selectedOption: OptionElement | null = null;\n\n        traverseSelectChildren(children, (option, group) => {\n          if (isOptionSelectable(option, group, value)) {\n            selectedOption = option;\n          }\n        });\n        return selectedOption;\n      } else {\n        return uncontrolledSelectedOption;\n      }\n    }, [children, uncontrolledSelectedOption, value]);\n\n    const onSelect = useCallback(\n      (\n        option: OptionElement | null,\n        event: React.MouseEvent | KeyboardEvent,\n      ) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (value === undefined) {\n          setUncontrolledSelectedOption(option);\n        }\n        onChange?.(getOptionValue(option), event);\n        setFocusedOption(undefined);\n        onClose();\n      },\n      [onChange, onClose, value],\n    );\n\n    const getOptionClickHandler = useCallback(\n      (option: OptionElement | null, optionDisabled: boolean) => {\n        return (event: React.MouseEvent) => {\n          event.preventDefault();\n          event.stopPropagation();\n\n          if (!disabled && !optionDisabled) {\n            onSelect(option, event);\n            onClose();\n          }\n        };\n      },\n      [disabled, onClose, onSelect],\n    );\n\n    /**\n     * Focus\n     */\n\n    const [focusedOption, setFocusedOption] = useState<\n      OptionElement | null | undefined\n    >();\n\n    const enabledOptions = useMemo(() => {\n      const enabledOptions: Array<OptionElement | null> = [];\n\n      if (allowDeselect) {\n        enabledOptions.push(null);\n      }\n\n      traverseSelectChildren(children, (option, group) => {\n        if (!isOptionDisabled(option, group)) {\n          enabledOptions.push(option);\n        }\n      });\n\n      return enabledOptions;\n    }, [children, allowDeselect]);\n\n    const onSelectFocusedOption = useCallback(\n      (event: KeyboardEvent) => {\n        if (focusedOption !== undefined) {\n          onSelect(focusedOption, event);\n        }\n      },\n      [focusedOption, onSelect],\n    );\n\n    const onFocusFirstOption = useCallback(() => {\n      setFocusedOption(enabledOptions[0]);\n    }, [enabledOptions]);\n\n    const onFocusLastOption = useCallback(() => {\n      setFocusedOption(enabledOptions[enabledOptions.length - 1]);\n    }, [enabledOptions]);\n\n    const onFocusPreviousOption = useCallback(() => {\n      if (\n        focusedOption === undefined ||\n        enabledOptions.indexOf(focusedOption) === 0\n      ) {\n        onFocusLastOption();\n      } else {\n        const index = enabledOptions.indexOf(focusedOption) - 1;\n        setFocusedOption(enabledOptions[index]);\n      }\n    }, [enabledOptions, focusedOption, onFocusLastOption]);\n\n    const onFocusNextOption = useCallback(() => {\n      if (\n        focusedOption === undefined ||\n        enabledOptions.indexOf(focusedOption) === enabledOptions.length - 1\n      ) {\n        onFocusFirstOption();\n      } else {\n        const index = enabledOptions.indexOf(focusedOption) + 1;\n\n        setFocusedOption(enabledOptions[index]);\n      }\n    }, [enabledOptions, focusedOption, onFocusFirstOption]);\n\n    const getOptionFocusHandler = useCallback(\n      (option: OptionElement | null, optionDisabled: boolean) => {\n        return (event: React.FocusEvent) => {\n          event.preventDefault();\n          event.stopPropagation();\n\n          if (!disabled && !optionDisabled) {\n            setFocusedOption(option);\n          }\n        };\n      },\n      [disabled],\n    );\n\n    const onKeyDown = useCallback(\n      (event: KeyboardEvent) => {\n        // No support for modifiers yet\n        if (event.ctrlKey || event.shiftKey || event.altKey) {\n          return;\n        }\n\n        const isFocusInMenu = listMenuRef.current?.contains(\n          document.activeElement,\n        );\n        const isFocusOnButton = menuButtonRef.current?.contains(\n          document.activeElement,\n        );\n        const isFocusInComponent = isFocusOnButton || isFocusInMenu;\n\n        // We only respond to keypresses if the focus is in the component\n        if (isFocusInComponent) {\n          switch (event.key) {\n            case keyMap.Tab:\n            case keyMap.Escape:\n              onClose();\n              setFocusedOption(undefined);\n              break;\n            case keyMap.Enter:\n            case keyMap.Space:\n              if (open && !isFocusOnButton) {\n                // Default behavior is to use these keys to open the dropdown but we handle that manually\n                event.preventDefault();\n              }\n\n              onSelectFocusedOption(event);\n              break;\n            case keyMap.ArrowUp:\n              if (!open && isFocusOnButton) {\n                onOpen();\n              }\n              event.preventDefault(); // Prevents page scrolling\n              onFocusPreviousOption();\n              break;\n            case keyMap.ArrowDown:\n              if (!open && isFocusOnButton) {\n                onOpen();\n              }\n              event.preventDefault(); // Prevents page scrolling\n              onFocusNextOption();\n              break;\n          }\n        }\n      },\n      [\n        listMenuRef,\n        menuButtonRef,\n        onClose,\n        open,\n        onSelectFocusedOption,\n        onFocusPreviousOption,\n        onFocusNextOption,\n        onOpen,\n      ],\n    );\n\n    useEventListener('keydown', onKeyDown);\n\n    /**\n     * Rendering\n     */\n\n    const viewportSize = useViewportSize();\n\n    const hasGlyphs = useMemo(() => {\n      let hasGlyphs = false;\n\n      traverseSelectChildren(children, option => {\n        hasGlyphs ||= option.props.glyph !== undefined;\n      });\n\n      return hasGlyphs;\n    }, [children]);\n\n    const canTriggerScrollIntoView = useMemo(\n      () =>\n        viewportSize !== null &&\n        listMenuRef.current !== null &&\n        focusedOption === undefined &&\n        open,\n      [focusedOption, listMenuRef, open, viewportSize],\n    );\n\n    const deselectionOption = useMemo(() => {\n      const selected = selectedOption === null;\n\n      return (\n        <InternalOption\n          className={undefined}\n          glyph={undefined}\n          selected={selected}\n          focused={focusedOption === null}\n          disabled={false}\n          onClick={getOptionClickHandler(null, false)}\n          onFocus={getOptionFocusHandler(null, false)}\n          hasGlyphs={false}\n          triggerScrollIntoView={selected && canTriggerScrollIntoView}\n        >\n          {placeholder}\n        </InternalOption>\n      );\n    }, [\n      canTriggerScrollIntoView,\n      focusedOption,\n      getOptionClickHandler,\n      getOptionFocusHandler,\n      placeholder,\n      selectedOption,\n    ]);\n\n    const renderedChildren = useMemo(\n      () =>\n        convertToInternalElements(\n          children,\n          (option, group) => {\n            const selected = option === selectedOption;\n            const disabled = isOptionDisabled(option, group);\n\n            return {\n              ...option.props,\n              className: option.props.className,\n              glyph: option.props.glyph,\n              selected,\n              focused: option === focusedOption,\n              disabled,\n              children: option.props.children,\n              hasGlyphs,\n              onClick: getOptionClickHandler(option, disabled),\n              onFocus: getOptionFocusHandler(option, disabled),\n              triggerScrollIntoView: selected && canTriggerScrollIntoView,\n            };\n          },\n          () => {\n            console.error(\n              '`Select` instance received child that is not `Option` or `OptionGroup`.',\n            );\n          },\n        ),\n      [\n        canTriggerScrollIntoView,\n        children,\n        focusedOption,\n        getOptionClickHandler,\n        getOptionFocusHandler,\n        hasGlyphs,\n        selectedOption,\n      ],\n    );\n\n    const popoverProps = {\n      popoverZIndex,\n      onEntering,\n      onEnter,\n      onEntered,\n      onExiting,\n      onExit,\n      onExited,\n      ...(usePortal\n        ? {\n            usePortal,\n            portalClassName,\n            portalContainer,\n            scrollContainer,\n          }\n        : { usePortal }),\n    };\n\n    return (\n      <LeafyGreenProvider darkMode={darkMode}>\n        <div ref={containerRef} className={cx(wrapperStyle, className)}>\n          {(label || description) && (\n            <div className={labelDescriptionContainerStyle}>\n              {label && (\n                <Label\n                  htmlFor={menuButtonId}\n                  id={labelId}\n                  darkMode={darkMode}\n                  disabled={disabled}\n                  className={cx(\n                    {\n                      [largeLabelStyles]: size === Size.Large,\n                      [css`\n                        font-size: ${baseFontSize}px;\n                        line-height: 20px;\n                      `]: size === Size.Default,\n                    },\n                    css`\n                      // Prevent hover state from showing when hovering label\n                      pointer-events: none;\n                    `,\n                    css`\n                      ${MobileMediaQuery} {\n                        font-size: ${mobileSizeSet.label.text}px;\n                        line-height: ${mobileSizeSet.label.lineHeight}px;\n                      }\n                    `,\n                  )}\n                >\n                  {label}\n                </Label>\n              )}\n\n              {description && (\n                <Description\n                  id={descriptionId}\n                  darkMode={darkMode}\n                  disabled={disabled}\n                  className={cx(\n                    {\n                      [largeLabelStyles]: size === Size.Large,\n                      [css`\n                        font-size: ${baseFontSize}px;\n                        line-height: 20px;\n                      `]: size === Size.Default,\n                    },\n                    css`\n                      ${MobileMediaQuery} {\n                        font-size: ${mobileSizeSet.description.text}px;\n                        line-height: ${mobileSizeSet.description.lineHeight}px;\n                      }\n                    `,\n                  )}\n                >\n                  {description}\n                </Description>\n              )}\n            </div>\n          )}\n\n          <SelectContext.Provider value={providerData}>\n            <MenuButton\n              {...rest}\n              id={menuButtonId}\n              ref={menuButtonRef}\n              name={name}\n              readOnly={readOnly}\n              value={getOptionValue(selectedOption)}\n              text={\n                selectedOption !== null\n                  ? selectedOption.props.children\n                  : placeholder\n              }\n              deselected={selectedOption === null}\n              onOpen={onOpen}\n              onClose={onClose}\n              aria-labelledby={labelId}\n              aria-label={!label && !ariaLabelledby ? ariaLabel : undefined}\n              aria-controls={menuId}\n              aria-expanded={open}\n              aria-describedby={descriptionId}\n              aria-invalid={state === State.Error}\n              aria-disabled={disabled}\n              errorMessage={errorMessage}\n              state={state}\n              baseFontSize={baseFontSize}\n              __INTERNAL__menuButtonSlot__={__INTERNAL__menuButtonSlot__}\n            >\n              <ListMenu\n                labelId={labelId}\n                id={menuId}\n                referenceElement={menuButtonRef}\n                ref={listMenuRef}\n                className={cx({\n                  [css`\n                    width: ${menuButtonRef.current?.clientWidth}px;\n                  `]: dropdownWidthBasis === DropdownWidthBasis.Trigger,\n                })}\n                dropdownWidthBasis={dropdownWidthBasis}\n                {...popoverProps}\n              >\n                {allowDeselect && deselectionOption}\n                {renderedChildren}\n              </ListMenu>\n            </MenuButton>\n          </SelectContext.Provider>\n          {state === State.Error && errorMessage && (\n            <span\n              className={cx(\n                errorTextStyle({ darkMode, sizeSet }),\n                css`\n                  ${MobileMediaQuery} {\n                    font-size: ${mobileSizeSet.description.text}px;\n                    line-height: ${mobileSizeSet.description.lineHeight}px;\n                  }\n                `,\n                {\n                  [css`\n                    // Hide error text when menu is open,\n                    // so it doesn't peek around the menu corner\n                    color: transparent;\n                  `]: open,\n                },\n              )}\n            >\n              {errorMessage}\n            </span>\n          )}\n        </div>\n      </LeafyGreenProvider>\n    );\n  },\n);\n\nSelect.displayName = 'Select';\n\nSelect.propTypes = {\n  label: PropTypes.string,\n  'aria-labelledby': PropTypes.string,\n  'aria-label': PropTypes.string,\n  description: PropTypes.string,\n  placeholder: PropTypes.string,\n  className: PropTypes.string,\n  darkMode: PropTypes.bool,\n  size: PropTypes.oneOf(Object.values(Size)),\n  disabled: PropTypes.bool,\n  id: PropTypes.string,\n  value: PropTypes.string,\n  defaultValue: PropTypes.string,\n  onChange: PropTypes.func,\n  readOnly: PropTypes.bool,\n  errorMessage: PropTypes.string,\n  state: PropTypes.oneOf(Object.values(State)),\n  allowDeselect: PropTypes.bool,\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n  dropdownWidthBasis: PropTypes.oneOf(Object.values(DropdownWidthBasis)),\n} as WeakValidationMap<ComponentProps<typeof Select>>;\n"],"names":["_colorSets","_sizeSets","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","_templateObject7","Size","XSmall","Small","Default","Large","State","None","Error","DropdownWidthBasis","Trigger","Option","SelectContext","createContext","size","open","disabled","colorSets","_defineProperty","Theme","Light","menu","border","palette","gray","light2","shadow","transparentize","black","option","group","label","dark1","background","base","white","hovered","focused","blue","light3","text","dark3","selected","dark2","icon","indicator","Dark","dark4","light1","sizeSets","height","warningIcon","mobileSizeSet","lineHeight","OptionClassName","createUniqueClassName","optionStyle","css","_taggedTemplateLiteral","transitionDuration","default","spacing","descriptionClassName","optionTextStyle","fontFamilies","iconStyle","glyphFocusStyle","_excluded","InternalOption","_ref","_cx3","children","className","glyph","onClick","onFocus","triggerScrollIntoView","hasGlyphs","description","rest","_objectWithoutProperties","theme","useDarkMode","colorSet","ref","useRef","scrollIntoView","useCallback","current","element","parent","offsetParent","scrollTop","offsetTop","clientHeight","alreadyScrolledIntoView","usePrevious","shouldScrollIntoView","useEffect","wasFocused","shouldFocus","focus","isComponentGlyph","console","error","glyphProp","React","cloneElement","key","cx","props","undefined","checkmark","createElement","CheckmarkIcon","leftGlyph","rightGlyph","InputOption","_extends","role","tabIndex","onKeyDown","InputOptionContent","fontWeights","bold","_","displayName","propTypes","PropTypes","node","isRequired","string","value","bool","optionGroupStyle","optionGroupLabelStyle","InternalOptionGroup","groupId","useIdAllocator","prefix","id","OptionGroup","oneOfType","arrayOf","oneOf","_baseQuery","concat","breakpoints","Tablet","MobileMediaQuery","isReactEmpty","traverseSelectChildren","optionFn","Children","forEach","child","isComponentType","isFragment","convertToInternalElements","fallbackFn","toArray","every","consoleOnce","warn","map","_child$props","_options","getOptionValue","Array","isArray","filter","join","toString","isOptionDisabled","_option$props$disable","_group$props$disabled","_group$props","isOptionSelectable","useObservedRef","callback","_ref4","arguments","length","initialValue","_ref4$deps","deps","useMemo","nextValue","_toConsumableArray","useForwardedRef","forwardedRefOrRefs","forwardValueToRefs","_menuButtonSizeStyle","_menuButtonModeOverri","_templateObject8","_templateObject9","_menuButtonFocusStyle","_templateObject10","_templateObject11","_menuButtonDeselected","_templateObject12","_templateObject13","_templateObject14","_menuButtonDisabledTh","_templateObject15","_templateObject16","_errorColor","_templateObject17","_templateObject18","_menuButtonErrorStyle","useStateRef","_useState2","_slicedToArray","useState","popoverClassName","menuMargin","baseMenuStyle","autoWidthStyles","getMenuStyles","sizeSet","ListMenu","forwardRef","forwardedRef","referenceElement","labelId","dropdownWidthBasis","_ref$usePortal","usePortal","portalContainer","scrollContainer","portalClassName","popoverZIndex","onEntering","onEnter","onEntered","onExiting","onExit","onExited","_useContext","useContext","availableSpace","useAvailableSpace","maxHeightValue","isUndefined","Math","min","event","stopPropagation","popoverProps","_objectSpread","Popover","active","align","Align","Bottom","justify","Justify","Start","adjustOnMutation","refEl","menuButtonTextClassName","menuButtonStyleOverrides","regular","menuButtonSizeStyle","typeScales","body1","fontSize","menuButtonModeOverrides","menuButtonFocusStyle","focusRing","input","menuButtonDeselectedStyles","menuButtonDisabledStyles","menuButtonDisabledThemeStyles","menuButtonTextWrapperStyle","menuButtonTextStyle","errorColor","red","menuButtonErrorStyle","hoverRing","light","dark","MenuButton","_cx","_dataTestid","name","deselected","readOnly","onClose","onOpen","errorMessage","state","baseFontSize","__INTERNAL__menuButtonSlot__","__INTERNAL__menuButtonSlotProps__","Component","Button","buttonClassName","ButtonSize","testId","variant","Variant","darkMode","CaretDownIcon","WarningIcon","labelDescriptionContainerStyle","wrapperStyle","largeLabelStyles","large","errorTextStyle","faster","Select","fwdRef","_cx2","_menuButtonRef$curren2","darkModeProp","_ref$size","_ref$disabled","_ref$allowDeselect","allowDeselect","_ref$placeholder","placeholder","_ref$errorMessage","_ref$state","_ref$dropdownWidthBas","_ref$baseFontSize","BaseFontSize","Body1","idProp","ariaLabelledby","ariaLabel","defaultValue","onChange","descriptionId","menuId","setOpen","containerRef","menuButtonRef","menuButtonId","listMenuRef","providerData","onClickOutside","stillFocused","contains","target","document","addEventListener","removeEventListener","initialUncontrolledSelectedOption","_useState4","uncontrolledSelectedOption","setUncontrolledSelectedOption","_reconcileOption","previousOption","_ref2","_ref3","_sameInstance","sameInstance","sameChildrenAndValue","sameExplicitValue","sameValue","_sameChildrenAndValue","_sameExplicitValue","_sameValue","reconcileOption","selectedOption","_selectedOption","onSelect","preventDefault","setFocusedOption","getOptionClickHandler","optionDisabled","_useState6","focusedOption","enabledOptions","push","onSelectFocusedOption","onFocusFirstOption","onFocusLastOption","onFocusPreviousOption","indexOf","index","onFocusNextOption","getOptionFocusHandler","_listMenuRef$current","_menuButtonRef$curren","ctrlKey","shiftKey","altKey","isFocusInMenu","activeElement","isFocusOnButton","keyMap","Tab","Escape","Enter","Space","ArrowUp","ArrowDown","useEventListener","viewportSize","useViewportSize","canTriggerScrollIntoView","deselectionOption","renderedChildren","LeafyGreenProvider","Label","htmlFor","Description","Provider","clientWidth","Object","values","func"],"mappings":"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"}