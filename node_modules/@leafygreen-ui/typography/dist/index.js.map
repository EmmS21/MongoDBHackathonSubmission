{"version":3,"file":"index.js","sources":["../src/styles.tsx","../src/Body/Body.tsx","../src/Description/Description.styles.ts","../src/utils/useUpdatedBaseFontSize.ts","../src/Disclaimer/Disclaimer.styles.ts","../src/Description/Description.tsx","../src/Error/Error.styles.ts","../src/Disclaimer/Disclaimer.tsx","../src/H1/H1.styles.ts","../src/H2/H2.styles.ts","../src/Error/Error.tsx","../src/H1/H1.tsx","../src/H3/H3.styles.ts","../src/H2/H2.tsx","../src/InlineCode/InlineCode.styles.ts","../src/H3/H3.tsx","../src/InlineKeyCode/InlineKeyCode.styles.ts","../src/InlineCode/InlineCode.tsx","../src/Label/Label.styles.ts","../src/InlineKeyCode/InlineKeyCode.tsx","../src/Link/Link.styles.ts","../src/Label/Label.tsx","../src/Overline/Overline.styles.ts","../src/Subtitle/Subtitle.styles.ts","../src/Link/Link.types.ts","../src/Link/Link.tsx","../src/Overline/Overline.tsx","../src/Subtitle/Subtitle.tsx","../src/utils/StaticWidthText.tsx"],"sourcesContent":["import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { BaseFontSize, fontFamilies, typeScales } from '@leafygreen-ui/tokens';\n\nexport const baseTypographyStyles = css`\n  margin: unset;\n  font-family: ${fontFamilies.default};\n  color: ${palette.black};\n`;\n\nexport const bodyTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: ${typeScales.body2.lineHeight}px;\n  `,\n} as const;\n\nexport const codeTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.code1.fontSize}px;\n    line-height: ${typeScales.code1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.code2.fontSize}px;\n    line-height: ${typeScales.code2.lineHeight}px;\n  `,\n} as const;\n\nexport const defaultTextColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\nimport { fontWeights as fontWeightTokens } from '@leafygreen-ui/tokens';\n\nimport {\n  baseTypographyStyles,\n  bodyTypeScaleStyles,\n  defaultTextColor,\n} from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport { BaseBodyProps } from './Body.types';\n\nconst Body = Polymorphic<BaseBodyProps>(\n  ({\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    className,\n    weight = 'regular',\n    as = 'p' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = usePolymorphic(as);\n\n    // Currently hardcoding selectors to keys; could consider a dynamic solution that runs once\n    const fontWeight = css`\n      font-weight: ${fontWeightTokens[weight]};\n      strong,\n      b {\n        font-weight: ${fontWeightTokens.bold};\n      }\n    `;\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          bodyTypeScaleStyles[baseFontSize],\n          defaultTextColor[theme],\n          fontWeight,\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nBody.displayName = 'Body';\n\nexport default Body;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const descriptionStyle = css`\n  font-family: ${fontFamilies.default};\n  font-weight: ${fontWeights.regular};\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const descriptionColorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light1};\n  `,\n};\n\nexport const disabledDescriptionColorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.base};\n  `,\n};\n\nexport const descriptionTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import { useBaseFontSize } from '@leafygreen-ui/leafygreen-provider';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\n/**\n * A temporary wrapper around {@link useBaseFontSize}\n *\n * Returns a font size token consistent with the visual brand refresh.\n *\n * Once all components have been updated for the refresh,\n * this hook will be removed, and {@link useBaseFontSize} updated\n * to return the updated tokens.\n *\n * @param override: If the calling component accepts a `baseFontSize` prop, pass that prop into this hook to respect it\n * @deprecated\n * @internal\n * @returns - {@link BaseFontSize}\n */\nexport const useUpdatedBaseFontSize = (\n  override?: BaseFontSize | 14,\n): BaseFontSize => {\n  const baseFontSize = useBaseFontSize();\n  if (override)\n    return override === 16 ? BaseFontSize.Body2 : BaseFontSize.Body1;\n  return baseFontSize === 16 ? BaseFontSize.Body2 : BaseFontSize.Body1;\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\n\nexport const disclaimerTextColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light1};\n  `,\n};\n\nexport const disclaimerStyles = css`\n  display: block;\n  font-size: 11px;\n  line-height: 16px;\n  letter-spacing: 0.2px;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  descriptionColorStyle,\n  descriptionStyle,\n  descriptionTypeScaleStyles,\n  disabledDescriptionColorStyle,\n} from './Description.styles';\nimport { DescriptionProps } from './Description.types';\n\nexport const Description = ({\n  baseFontSize: baseFontSizeOverride,\n  darkMode: darkModeProp,\n  disabled = false,\n  children,\n  className,\n  ...rest\n}: DescriptionProps) => {\n  const { theme } = useDarkMode(darkModeProp);\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n\n  return (\n    <p\n      className={cx(\n        descriptionStyle,\n        descriptionColorStyle[theme],\n        descriptionTypeScaleStyles[baseFontSize],\n        {\n          [disabledDescriptionColorStyle[theme]]: disabled,\n        },\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </p>\n  );\n};\n\nDescription.displayName = 'Description';\n\nexport default Description;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const errorMessageStyle = css`\n  font-family: ${fontFamilies.default};\n  font-weight: ${fontWeights.regular};\n  font-size: inherit;\n  line-height: inherit;\n\n  // Unsets browser default margins\n  margin-block-start: 0;\n  margin-block-end: 0;\n`;\n\nexport const errorMessageModeStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.red.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.red.light1};\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { disclaimerStyles, disclaimerTextColor } from './Disclaimer.styles';\nimport { DisclaimerProps } from './Disclaimer.types';\n\nexport function Disclaimer({\n  darkMode: darkModeProp,\n  children,\n  className,\n  ...rest\n}: DisclaimerProps) {\n  const { theme } = useDarkMode(darkModeProp);\n\n  return (\n    <small\n      {...rest}\n      className={cx(\n        baseTypographyStyles,\n        disclaimerStyles,\n        disclaimerTextColor[theme],\n        className,\n      )}\n    >\n      {children}\n    </small>\n  );\n}\n\nDisclaimer.displayName = 'Disclaimer';\n\nexport default Disclaimer;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h1Styles = css`\n  font-weight: ${fontWeights.regular};\n  font-size: 48px;\n  line-height: 62px;\n  font-family: ${fontFamilies.serif};\n`;\n\nexport const h1Color: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.green.light1};\n  `,\n};\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h2Styles = css`\n  font-size: 32px;\n  line-height: 40px;\n  font-weight: ${fontWeights.regular};\n  font-family: ${fontFamilies.serif};\n`;\n\nexport const h2Color: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.green.dark2};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.green.light1};\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { errorMessageModeStyle, errorMessageStyle } from './Error.styles';\nimport { BaseErrorProps } from './Error.types';\n\nconst Error = Polymorphic<BaseErrorProps>(\n  ({\n    as = 'p' as PolymorphicAs,\n    darkMode: darkModeProp,\n    children,\n    className,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        {...rest}\n        className={cx(\n          errorMessageStyle,\n          errorMessageModeStyle[theme],\n          className,\n        )}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nexport default Error;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { h1Color, h1Styles } from './H1.styles';\nimport { BaseH1Props } from './H1.types';\n\nconst H1 = Polymorphic<BaseH1Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h1' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h1Styles,\n          h1Color[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH1.displayName = 'H1';\n\nexport default H1;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const h3Styles = css`\n  font-size: 24px;\n  line-height: 32px;\n  font-weight: ${fontWeights.medium};\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles } from '../styles';\n\nimport { h2Color, h2Styles } from './H2.styles';\nimport { BaseH2Props } from './H2.types';\n\nconst H2 = Polymorphic<BaseH2Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h2' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h2Styles,\n          h2Color[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH2.displayName = 'H2';\n\nexport default H2;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { focusRing, fontFamilies } from '@leafygreen-ui/tokens';\n\nexport const anchorClassName = createUniqueClassName();\n\nexport const code = css`\n  display: inline;\n  transition: all 0.15s ease-in-out;\n  border-radius: 3px;\n  font-family: ${fontFamilies.code};\n  line-height: 20px;\n\n  .${anchorClassName}:hover > & {\n    text-decoration: none;\n  }\n`;\n\nexport const codeModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    background-color: ${palette.gray.light3};\n    border: 1px solid ${palette.gray.light2};\n    color: ${palette.gray.dark3};\n\n    .${anchorClassName}:hover > & {\n      box-shadow: 0 0 0 3px ${palette.gray.light2};\n      border: 1px solid ${palette.gray.light1};\n    }\n  `,\n\n  [Theme.Dark]: css`\n    background-color: transparent;\n    border: 1px solid ${palette.gray.dark2};\n    color: ${palette.gray.light1};\n\n    .${anchorClassName}:hover > & {\n      box-shadow: 0 0 0 3px ${palette.gray.dark2};\n      border: 1px solid ${palette.gray.dark1};\n    }\n  `,\n};\n\nexport const codeFocusModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    .${anchorClassName}:focus-visible > & {\n      box-shadow: ${focusRing[Theme.Light].default};\n      border: 1px solid ${palette.blue.base};\n    }\n  `,\n\n  [Theme.Dark]: css`\n    .${anchorClassName}:focus-visible > & {\n      box-shadow: ${focusRing[Theme.Dark].default};\n      border: 1px solid ${palette.blue.base};\n    }\n  `,\n};\n\nexport const codeLinkStyleModes: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.blue.base};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.blue.light1};\n  `,\n};\n\nexport const codeLinkWrapper = css`\n  text-decoration: none;\n  margin: 0;\n  padding: 0;\n  line-height: 20px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const nowrap = css`\n  white-space: nowrap;\n`;\n\nexport const normal = css`\n  white-space: normal;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { h3Styles } from './H3.styles';\nimport { BaseH3Props } from './H3.types';\n\nconst H3 = Polymorphic<BaseH3Props>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h3' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          h3Styles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nH3.displayName = 'H3';\n\nexport default H3;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies } from '@leafygreen-ui/tokens';\n\nexport const inlineKeyCodeStyles = css`\n  font-family: ${fontFamilies.code};\n  border: 1px solid;\n  border-radius: 3px;\n  padding-left: 5px;\n  padding-right: 5px;\n`;\n\nexport const inlineKeyCodeColor: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n    border-color: ${palette.gray.dark3};\n    background-color: ${palette.white};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n    border-color: ${palette.gray.base};\n    background-color: ${palette.gray.dark3};\n  `,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\nimport { BaseFontSize } from '@leafygreen-ui/tokens';\n\nimport { codeTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  anchorClassName,\n  code,\n  codeFocusModes,\n  codeLinkStyleModes,\n  codeLinkWrapper,\n  codeModes,\n  normal,\n  nowrap,\n} from './InlineCode.styles';\nimport { BaseInlineCodeProps } from './InlineCode.types';\n\nconst InlineCode = InferredPolymorphic<BaseInlineCodeProps, 'code'>(\n  (\n    {\n      children,\n      className,\n      darkMode: darkModeProp,\n      baseFontSize: baseFontSizeOverride,\n      as,\n      ...rest\n    },\n    forwardedRef,\n  ) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'code');\n\n    const whiteSpace =\n      ((typeof children === 'string' && children.match(/./gu)?.length) ?? 0) <=\n      30\n        ? nowrap\n        : normal;\n    const needsWrapper = Component !== 'code';\n\n    const renderedInlineCode = (\n      <code\n        ref={forwardedRef}\n        className={cx(\n          codeTypeScaleStyles[baseFontSize],\n          code,\n          codeModes[theme],\n          codeFocusModes[theme],\n          whiteSpace,\n          {\n            [codeLinkStyleModes[theme]]: needsWrapper,\n          },\n          className,\n        )}\n      >\n        {children}\n      </code>\n    );\n\n    if (needsWrapper) {\n      return (\n        <Component\n          className={cx(anchorClassName, codeLinkWrapper, className)}\n          {...rest}\n        >\n          {renderedInlineCode}\n        </Component>\n      );\n    }\n\n    return React.cloneElement(renderedInlineCode, rest);\n  },\n);\n\nInlineCode.displayName = 'InlineCode';\nInlineCode.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  darkMode: PropTypes.bool,\n  baseFontSize: PropTypes.oneOf(Object.values(BaseFontSize)),\n};\n\nexport default InlineCode;\n","import { css } from '@leafygreen-ui/emotion';\nimport { Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport {\n  BaseFontSize,\n  fontFamilies,\n  fontWeights,\n  typeScales,\n} from '@leafygreen-ui/tokens';\n\nexport const labelStyle = css`\n  font-family: ${fontFamilies.default};\n  font-weight: ${fontWeights.bold};\n`;\n\nexport const labelColorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.black};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.light2};\n  `,\n};\n\nexport const disabledLabelColorStyle: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.gray.dark1};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.gray.base};\n  `,\n};\n\nexport const labelTypeScaleStyles: Record<BaseFontSize, string> = {\n  [BaseFontSize.Body1]: css`\n    font-size: ${typeScales.body1.fontSize}px;\n    line-height: ${typeScales.body1.lineHeight}px;\n  `,\n  [BaseFontSize.Body2]: css`\n    font-size: ${typeScales.body2.fontSize}px;\n    line-height: 20px; // Hardcoding because it does not match body2 lineHeight\n  `,\n};\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\n\nimport { codeTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  inlineKeyCodeColor,\n  inlineKeyCodeStyles,\n} from './InlineKeyCode.styles';\nimport { InlineKeyCodeProps } from './InlineKeyCode.types';\n\nfunction InlineKeyCode({\n  baseFontSize: baseFontSizeOverride,\n  darkMode: darkModeProp,\n  children,\n  className,\n  ...rest\n}: InlineKeyCodeProps) {\n  const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n  const { theme } = useDarkMode(darkModeProp);\n\n  return (\n    <code\n      className={cx(\n        inlineKeyCodeStyles,\n        inlineKeyCodeColor[theme],\n        codeTypeScaleStyles[baseFontSize],\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </code>\n  );\n}\n\nInlineKeyCode.displayName = 'InlineKeyCode';\n\nexport default InlineKeyCode;\n","import { css } from '@leafygreen-ui/emotion';\nimport { createUniqueClassName, Theme } from '@leafygreen-ui/lib';\nimport { palette } from '@leafygreen-ui/palette';\nimport { fontFamilies, fontWeights } from '@leafygreen-ui/tokens';\n\nexport const anchorClassName = createUniqueClassName();\n\nexport const overwriteDefaultStyles = css`\n  &:hover,\n  &:focus,\n  &:visited {\n    text-decoration: none;\n  }\n`;\n\nexport const linkStyles = css`\n  font-family: ${fontFamilies.default};\n  display: inline-flex;\n  align-items: center;\n  text-decoration: none;\n  cursor: pointer;\n  line-height: 13px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const linkModeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    color: ${palette.blue.base};\n    font-weight: ${fontWeights.regular};\n  `,\n  [Theme.Dark]: css`\n    color: ${palette.blue.light1};\n    font-weight: ${fontWeights.bold};\n  `,\n};\n\nexport const underlineStyles = css`\n  position: relative;\n  &::after {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 2px;\n    bottom: -4px;\n    left: 0;\n    border-radius: 2px;\n  }\n\n  .${anchorClassName}:focus & {\n    &::after {\n      background-color: ${palette.blue.light1};\n    }\n  }\n`;\n\nexport const underlineModeStyles: Record<Theme, string> = {\n  [Theme.Light]: css`\n    .${anchorClassName}:hover & {\n      &::after {\n        background-color: ${palette.gray.light2};\n      }\n    }\n  `,\n  [Theme.Dark]: css`\n    .${anchorClassName}:hover & {\n      &::after {\n        background-color: ${palette.gray.dark2};\n      }\n    }\n  `,\n};\n\nexport const arrowRightIconPersist = css`\n  transform: translate3d(3px, 0, 0);\n`;\n\nexport const arrowRightIconHover = css`\n  opacity: 0;\n  transform: translate3d(-3px, 0, 0);\n  transition: all 100ms ease-in;\n\n  .${anchorClassName}:hover & {\n    opacity: 1;\n    transform: translate3d(3px, 0, 0);\n  }\n`;\n\nexport const openInNewTabStyles = css`\n  position: relative;\n  bottom: 4px;\n  left: -1px;\n  height: 12px;\n`;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  disabledLabelColorStyle,\n  labelColorStyle,\n  labelStyle,\n  labelTypeScaleStyles,\n} from './Label.styles';\nimport { BaseLabelProps } from './Label.types';\n\nexport const Label = Polymorphic<BaseLabelProps>(\n  ({\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    className,\n    children,\n    disabled = false,\n    as = 'label' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          labelStyle,\n          labelColorStyle[theme],\n          labelTypeScaleStyles[baseFontSize],\n          { [disabledLabelColorStyle[theme]]: disabled },\n          className,\n        )}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nLabel.displayName = 'Label';\n\nexport default Label;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const overlineStyles = css`\n  font-size: 12px;\n  font-weight: ${fontWeights.bold};\n  text-transform: uppercase;\n  line-height: 20px;\n  letter-spacing: 0.4px;\n`;\n","import { css } from '@leafygreen-ui/emotion';\nimport { fontWeights } from '@leafygreen-ui/tokens';\n\nexport const subtitleStyles = css`\n  font-size: 18px;\n  line-height: 24px;\n  font-weight: ${fontWeights.bold};\n`;\n","import {\n  InferredPolymorphicProps,\n  PolymorphicAs,\n} from '@leafygreen-ui/polymorphic';\n\nimport { ResponsiveTypographyProps } from '../types';\n\nconst ArrowAppearance = {\n  Hover: 'hover',\n  Persist: 'persist',\n  None: 'none',\n} as const;\n\ntype ArrowAppearance = typeof ArrowAppearance[keyof typeof ArrowAppearance];\n\nexport { ArrowAppearance };\n\nexport interface BaseLinkProps extends ResponsiveTypographyProps {\n  arrowAppearance?: ArrowAppearance;\n  hideExternalIcon?: boolean;\n}\n\n// For external consumption only\nexport type LinkProps<T extends PolymorphicAs = PolymorphicAs> =\n  InferredPolymorphicProps<T, BaseLinkProps>;\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport ArrowRightIcon from '@leafygreen-ui/icon/dist/ArrowRight';\nimport OpenNewTabIcon from '@leafygreen-ui/icon/dist/OpenNewTab';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  InferredPolymorphic,\n  PolymorphicProps,\n  PolymorphicPropsWithRef,\n  useInferredPolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { bodyTypeScaleStyles } from '../styles';\nimport { useUpdatedBaseFontSize } from '../utils/useUpdatedBaseFontSize';\n\nimport {\n  anchorClassName,\n  arrowRightIconHover,\n  arrowRightIconPersist,\n  linkModeStyles,\n  linkStyles,\n  openInNewTabStyles,\n  overwriteDefaultStyles,\n  underlineModeStyles,\n  underlineStyles,\n} from './Link.styles';\nimport { ArrowAppearance, BaseLinkProps } from './Link.types';\n\ntype LinkRenderProps = PolymorphicPropsWithRef<'span', BaseLinkProps>;\n\ntype AnchorLikeProps = PolymorphicProps<'a', BaseLinkProps>;\n\nconst hasAnchorLikeProps = (\n  props: LinkRenderProps | AnchorLikeProps,\n): props is AnchorLikeProps => {\n  return (props as AnchorLikeProps).href !== undefined;\n};\n\nconst Link = InferredPolymorphic<BaseLinkProps, 'span'>(\n  ({\n    children,\n    className,\n    arrowAppearance = ArrowAppearance.None,\n    hideExternalIcon = false,\n    baseFontSize: baseFontSizeOverride,\n    darkMode: darkModeProp,\n    as,\n    ...rest\n  }) => {\n    const [currentHostname, setCurrentHostname] = useState('');\n    useEffect(() => {\n      setCurrentHostname(window.location.hostname);\n    }, []);\n\n    const { theme } = useDarkMode(darkModeProp);\n    const baseFontSize = useUpdatedBaseFontSize(baseFontSizeOverride);\n    const { Component } = useInferredPolymorphic(as, rest, 'span');\n\n    const hrefHostname = useMemo(() => {\n      if (hasAnchorLikeProps(rest)) {\n        const httpRegex = /^http(s)?:\\/\\//;\n        return httpRegex.test(rest.href)\n          ? new URL(rest.href).hostname\n          : currentHostname;\n      }\n    }, [rest, currentHostname]);\n\n    let icon;\n\n    const defaultAnchorProps: Pick<\n      JSX.IntrinsicElements['a'],\n      'target' | 'rel'\n    > = {\n      target: undefined,\n      rel: undefined,\n    };\n\n    if ((rest as AnchorLikeProps).target || (rest as AnchorLikeProps).rel) {\n      defaultAnchorProps.target = (rest as AnchorLikeProps).target;\n      defaultAnchorProps.rel = (rest as AnchorLikeProps).rel;\n    } else if (Component === 'a') {\n      // Sets defaults for target and rel props when Component is an anchor tag\n      if (hrefHostname === currentHostname) {\n        defaultAnchorProps.target = '_self';\n      } else {\n        defaultAnchorProps.target = '_blank';\n        defaultAnchorProps.rel = 'noopener noreferrer';\n      }\n    }\n\n    if (defaultAnchorProps.target === '_blank' && !hideExternalIcon) {\n      icon = (\n        <OpenNewTabIcon role=\"presentation\" className={openInNewTabStyles} />\n      );\n    } else if (arrowAppearance !== ArrowAppearance.None) {\n      icon = (\n        <ArrowRightIcon\n          role=\"presentation\"\n          size={12}\n          className={cx({\n            [arrowRightIconHover]: arrowAppearance === ArrowAppearance.Hover,\n            [arrowRightIconPersist]:\n              arrowAppearance === ArrowAppearance.Persist,\n          })}\n        />\n      );\n    }\n\n    return (\n      <Component\n        className={cx(\n          anchorClassName,\n          overwriteDefaultStyles,\n          bodyTypeScaleStyles[baseFontSize],\n          linkStyles,\n          linkModeStyles[theme],\n          className,\n        )}\n        {...defaultAnchorProps}\n        {...rest}\n      >\n        <span className={cx(underlineStyles, underlineModeStyles[theme])}>\n          {children}\n        </span>\n        {icon}\n      </Component>\n    );\n  },\n);\n\nexport default Link;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { overlineStyles } from './Overline.styles';\nimport { BaseOverlineProps } from './Overline.types';\n\nexport const Overline = Polymorphic<BaseOverlineProps>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'div' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          overlineStyles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nOverline.displayName = 'Overline';\n\nexport default Overline;\n","import React from 'react';\n\nimport { cx } from '@leafygreen-ui/emotion';\nimport { useDarkMode } from '@leafygreen-ui/leafygreen-provider';\nimport {\n  Polymorphic,\n  PolymorphicAs,\n  usePolymorphic,\n} from '@leafygreen-ui/polymorphic';\n\nimport { baseTypographyStyles, defaultTextColor } from '../styles';\n\nimport { subtitleStyles } from './Subtitle.styles';\nimport { BaseSubtitleProps } from './Subtitle.types';\n\nconst Subtitle = Polymorphic<BaseSubtitleProps>(\n  ({\n    darkMode: darkModeProp,\n    className,\n    as = 'h6' as PolymorphicAs,\n    ...rest\n  }) => {\n    const { theme } = useDarkMode(darkModeProp);\n    const { Component } = usePolymorphic(as);\n\n    return (\n      <Component\n        className={cx(\n          baseTypographyStyles,\n          subtitleStyles,\n          defaultTextColor[theme],\n          className,\n        )}\n        {...rest}\n      />\n    );\n  },\n);\n\nSubtitle.displayName = 'Subtitle';\n\nexport default Subtitle;\n","import React from 'react';\n\nimport { css, cx } from '@leafygreen-ui/emotion';\nimport { getNodeTextContent } from '@leafygreen-ui/lib';\nimport {\n  Polymorph,\n  PolymorphicAs,\n  PolymorphicPropsWithRef,\n} from '@leafygreen-ui/polymorphic';\n\ninterface LocalProps {\n  /**\n   * The maximum future weight of the text. Determines the width of the component.\n   * @default 700\n   */\n  maxFontWeight?: React.CSSProperties['fontWeight'];\n  /**\n   * Defines the pseudo element used to force the element width\n   */\n  pseudoElement?: 'before' | 'after';\n}\n\ntype StaticWidthTextProps<T extends PolymorphicAs> = PolymorphicPropsWithRef<\n  T,\n  LocalProps\n>;\n\nconst staticWidthTextStyle = ({\n  pseudoElement,\n  maxFontWeight,\n}: Pick<StaticWidthTextProps<any>, 'pseudoElement' | 'maxFontWeight'>) => {\n  const pseudoSelector = `&:${pseudoElement}`;\n\n  return css`\n    /* Inherit relevant properties from the parent */\n    font-weight: inherit;\n    font-size: inherit;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    position: relative;\n    display: inline-flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: center;\n    text-decoration: none;\n    min-width: 0;\n    max-width: 100%;\n\n    ${pseudoSelector} {\n      content: attr(data-text);\n      height: 0;\n      font-weight: ${maxFontWeight};\n      visibility: hidden;\n      overflow: hidden;\n      user-select: none;\n      pointer-events: none;\n    }\n  `;\n};\n\nconst childWrapper = css`\n  flex: 1;\n  min-width: 0;\n  max-width: 100%;\n\n  white-space: inherit;\n  overflow: inherit;\n  text-overflow: inherit;\n`;\n\n/**\n *\n * A wrapper component to ensure that updating the font weight does not affect the width of the element,\n * and prevents layout shift should the font weight change.\n *\n * Useful for showing a bold effect on hover, focus, or active (See `Tabs`, `MenuItem`).\n *\n * Will add an ellipsis if the text would extend beyond the parent,\n * or if the bold text is significantly larger than the regular text\n * (This is rare, and will only occur with _very_ long text)\n *\n * Note: does not support wrapped text (i.e. text within a paragraph)\n *\n * @internal\n *\n */\nexport function StaticWidthText<T extends PolymorphicAs = 'span'>({\n  as,\n  children,\n  maxFontWeight = 700,\n  pseudoElement = 'after',\n  className,\n  ...rest\n}: StaticWidthTextProps<T>) {\n  // calling getNodeTextContent in case a node gets passed in without TS\n  const textContent = getNodeTextContent(children);\n  return (\n    <Polymorph\n      className={cx(\n        staticWidthTextStyle({ pseudoElement, maxFontWeight }),\n        className,\n      )}\n      as={as ?? ('span' as PolymorphicAs)}\n      data-text={textContent}\n      {...rest}\n    >\n      <span className={childWrapper}>{children}</span>\n    </Polymorph>\n  );\n}\n"],"names":["_templateObject","_templateObject2","_templateObject3","_bodyTypeScaleStyles","_templateObject4","_templateObject5","_codeTypeScaleStyles","_templateObject6","_templateObject7","_defaultTextColor","_descriptionColorStyl","_disabledDescriptionC","_descriptionTypeScale","baseTypographyStyles","css","_taggedTemplateLiteral","fontFamilies","default","palette","black","bodyTypeScaleStyles","_defineProperty","BaseFontSize","Body1","typeScales","body1","fontSize","lineHeight","Body2","body2","codeTypeScaleStyles","code1","code2","defaultTextColor","Theme","Light","Dark","gray","light2","useUpdatedBaseFontSize","override","baseFontSize","useBaseFontSize","_excluded","Body","Polymorphic","_ref","baseFontSizeOverride","darkModeProp","darkMode","className","_ref$weight","weight","_ref$as","as","rest","_objectWithoutProperties","theme","useDarkMode","Component","usePolymorphic","fontWeight","fontWeightTokens","fontWeights","bold","React","createElement","_extends","cx","displayName","_disclaimerTextColor","descriptionStyle","regular","descriptionColorStyle","dark1","light1","disabledDescriptionColorStyle","base","descriptionTypeScaleStyles","Description","_ref$disabled","disabled","children","_errorMessageModeStyl","disclaimerTextColor","disclaimerStyles","Disclaimer","_h1Color","_h2Color","errorMessageStyle","errorMessageModeStyle","red","Error","h1Styles","serif","h1Color","green","dark2","H1","h2Styles","h2Color","H2","_codeModes","_codeFocusModes","_codeLinkStyleModes","_templateObject8","_templateObject9","_templateObject10","h3Styles","medium","H3","_inlineKeyCodeColor","anchorClassName","createUniqueClassName","code","codeModes","light3","dark3","codeFocusModes","focusRing","blue","codeLinkStyleModes","codeLinkWrapper","nowrap","normal","InlineCode","InferredPolymorphic","forwardedRef","_ref2","_children$match","useInferredPolymorphic","whiteSpace","match","length","needsWrapper","renderedInlineCode","ref","cloneElement","propTypes","PropTypes","node","string","bool","oneOf","Object","values","_labelColorStyle","_disabledLabelColorSt","_labelTypeScaleStyles","inlineKeyCodeStyles","inlineKeyCodeColor","white","InlineKeyCode","_linkModeStyles","_underlineModeStyles","labelStyle","labelColorStyle","disabledLabelColorStyle","labelTypeScaleStyles","Label","overwriteDefaultStyles","linkStyles","linkModeStyles","underlineStyles","underlineModeStyles","arrowRightIconPersist","arrowRightIconHover","openInNewTabStyles","ArrowAppearance","Link","_ref$arrowAppearance","arrowAppearance","_ref$hideExternalIcon","hideExternalIcon","_useState2","_slicedToArray","useState","currentHostname","setCurrentHostname","useEffect","window","location","hostname","icon","hrefHostname","useMemo","undefined","href","test","URL","defaultAnchorProps","target","rel","_cx","ArrowRightIcon","role","size","OpenNewTabIcon","overlineStyles","Overline","subtitleStyles","Subtitle","staticWidthTextStyle","pseudoElement","maxFontWeight","pseudoSelector","concat","childWrapper","_ref2$maxFontWeight","_ref2$pseudoElement","textContent","getNodeTextContent","Polymorph"],"mappings":"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"}