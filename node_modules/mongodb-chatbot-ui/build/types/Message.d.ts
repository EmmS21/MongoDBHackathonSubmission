import { type MessageRatingProps } from "@lg-chat/message-rating";
import { MessageData } from "./services/conversations";
import { Conversation } from "./useConversation";
export type MessageProps = {
    messageData: MessageData;
    suggestedPrompts?: string[];
    showSuggestedPrompts?: boolean;
    onSuggestedPromptClick?: (prompt: string) => void;
    canSubmitSuggestedPrompt?: (prompt: string) => boolean;
    isLoading: boolean;
    showRating: boolean;
    conversation: Conversation;
};
export declare const Message: ({ messageData, suggestedPrompts, showSuggestedPrompts, canSubmitSuggestedPrompt, onSuggestedPromptClick, isLoading, showRating, conversation, }: MessageProps) => import("react/jsx-runtime").JSX.Element;
export type MessagePromptsProps = {
    messagePrompts: string[];
    messagePromptsOnClick: (prompt: string) => void;
    canSubmitSuggestedPrompt: (prompt: string) => boolean;
};
export declare const MessagePrompts: ({ messagePrompts, messagePromptsOnClick, canSubmitSuggestedPrompt, }: MessagePromptsProps) => import("react/jsx-runtime").JSX.Element;
export type MessageRatingWithFeedbackCommentProps = MessageRatingProps & {
    submit: (commentText: string) => void | Promise<void>;
    abandon: () => void;
    status: "none" | "submitted" | "abandoned";
    errorMessage?: string;
    clearErrorMessage?: () => void;
    maxCommentCharacterCount?: number;
};
export declare function MessageRatingWithFeedbackComment(props: MessageRatingWithFeedbackCommentProps): import("react/jsx-runtime").JSX.Element;
