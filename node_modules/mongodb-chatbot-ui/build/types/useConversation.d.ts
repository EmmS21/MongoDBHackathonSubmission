import { MessageData, Role, ConversationFetchOptions } from "./services/conversations";
export type ConversationState = {
    conversationId?: string;
    messages: MessageData[];
    error?: string;
    isStreamingMessage: boolean;
    streamingMessage?: MessageData;
};
type ConversationActor = {
    createConversation: () => Promise<void>;
    endConversationWithError: (errorMessage: string) => void;
    addMessage: (role: Role, content: string) => Promise<void>;
    modifyMessage: (messageId: string, content: string) => Promise<void>;
    deleteMessage: (messageId: string) => Promise<void>;
    rateMessage: (messageId: string, rating: boolean) => Promise<void>;
    commentMessage: (messageId: string, comment: string) => Promise<void>;
    switchConversation: (conversationId: string) => Promise<void>;
};
export type Conversation = ConversationState & ConversationActor;
export declare const defaultConversationState: {
    messages: never[];
    error: string;
    isStreamingMessage: false;
};
type UseConversationParams = {
    serverBaseUrl?: string;
    shouldStream?: boolean;
    fetchOptions?: ConversationFetchOptions;
};
export declare function useConversation(params?: UseConversationParams): {
    createConversation: () => Promise<void>;
    endConversationWithError: (errorMessage: string) => void;
    streamingMessage: MessageData | undefined;
    addMessage: (role: Role, content: string) => Promise<void>;
    modifyMessage: (messageId: string, content: string) => Promise<void>;
    deleteMessage: (messageId: string) => Promise<void>;
    rateMessage: (messageId: string, rating: boolean) => Promise<void>;
    commentMessage: (messageId: string, comment: string) => Promise<void>;
    switchConversation: (conversationId: string) => Promise<void>;
    conversationId?: string | undefined;
    messages: MessageData[];
    error?: string | undefined;
    isStreamingMessage: boolean;
};
export {};
