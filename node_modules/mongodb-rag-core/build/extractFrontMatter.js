"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractFrontMatter = void 0;
const matter = __importStar(require("gray-matter"));
const toml_1 = __importDefault(require("toml"));
/**
  This function extracts frontmatter from a string.
  The generic type does not validate that the frontmatter
  conforms to the type. It just provides the type
  for developer convenience.
*/
function extractFrontMatter(text, language, delimiter) {
    let body = text;
    const options = {
        delimiters: delimiter,
        language,
        engines: {
            toml: toml_1.default.parse.bind(toml_1.default),
        },
    };
    const frontmatterResult = matter.test(text, options)
        ? matter.default(text, options)
        : undefined;
    body = frontmatterResult?.content ?? text;
    const metadata = frontmatterResult?.data;
    return {
        metadata,
        body: body.trimStart(),
    };
}
exports.extractFrontMatter = extractFrontMatter;
//# sourceMappingURL=extractFrontMatter.js.map