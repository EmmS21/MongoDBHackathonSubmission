"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeMongoDbEmbeddedContentStore = void 0;
const pageIdentity_1 = require("./pageIdentity");
const MongoDbDatabaseConnection_1 = require("./MongoDbDatabaseConnection");
const assert_1 = require("assert");
function makeMongoDbEmbeddedContentStore({ connectionUri, databaseName, }) {
    const { mongoClient, db, drop, close } = (0, MongoDbDatabaseConnection_1.makeMongoDbDatabaseConnection)({
        connectionUri,
        databaseName,
    });
    const embeddedContentCollection = db.collection("embedded_content");
    return {
        drop,
        close,
        async loadEmbeddedContent({ page }) {
            return await embeddedContentCollection.find((0, pageIdentity_1.pageIdentity)(page)).toArray();
        },
        async deleteEmbeddedContent({ page }) {
            const deleteResult = await embeddedContentCollection.deleteMany((0, pageIdentity_1.pageIdentity)(page));
            if (!deleteResult.acknowledged) {
                throw new Error("EmbeddedContent deletion not acknowledged!");
            }
        },
        async updateEmbeddedContent({ page, embeddedContent }) {
            (0, assert_1.strict)(embeddedContent.length !== 0);
            embeddedContent.forEach((embeddedContent) => {
                (0, assert_1.strict)(embeddedContent.sourceName === page.sourceName &&
                    embeddedContent.url === page.url, `EmbeddedContent source/url (${embeddedContent.sourceName} / ${embeddedContent.url}) must match give page source/url (${page.sourceName} / ${page.url})!`);
            });
            await mongoClient.withSession(async (session) => {
                await session.withTransaction(async () => {
                    // First delete all the embeddedContent for the given page
                    const deleteResult = await embeddedContentCollection.deleteMany((0, pageIdentity_1.pageIdentity)(page), { session });
                    if (!deleteResult.acknowledged) {
                        throw new Error("EmbeddedContent deletion not acknowledged!");
                    }
                    // Insert the embedded content for the page
                    const insertResult = await embeddedContentCollection.insertMany([...embeddedContent], {
                        session,
                    });
                    if (!insertResult.acknowledged) {
                        throw new Error("EmbeddedContent insertion not acknowledged!");
                    }
                    const { insertedCount } = insertResult;
                    if (insertedCount !== embeddedContent.length) {
                        throw new Error(`Expected ${embeddedContent.length} inserted, got ${insertedCount}`);
                    }
                });
            });
        },
        /**
          @param vector - The vector to search for nearest neighbors to.
          @param options - Options for performing a nearest-neighbor search.
         */
        async findNearestNeighbors(vector, options) {
            const { indexName, path, k, minScore, filter, numCandidates, } = {
                // Default options
                indexName: "vector_index",
                path: "embedding",
                k: 3,
                minScore: 0.9,
                // User options override
                ...(options ?? {}),
            };
            return embeddedContentCollection
                .aggregate([
                {
                    $vectorSearch: {
                        index: indexName,
                        queryVector: vector,
                        path,
                        limit: k,
                        numCandidates: numCandidates ?? k * 15,
                        filter,
                    },
                },
                {
                    $addFields: {
                        score: {
                            $meta: "vectorSearchScore",
                        },
                    },
                },
                { $match: { score: { $gte: minScore } } },
            ])
                .toArray();
        },
    };
}
exports.makeMongoDbEmbeddedContentStore = makeMongoDbEmbeddedContentStore;
//# sourceMappingURL=MongoDbEmbeddedContentStore.js.map