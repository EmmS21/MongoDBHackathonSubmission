"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withOptions = void 0;
const access_1 = require("./access");
const diagram_1 = require("./diagram");
const find_1 = require("./find");
const flat_1 = require("./flat");
const flatMap_1 = require("./flatMap");
const map_1 = require("./map");
const reduce_1 = require("./reduce");
const visit_1 = require("./visit");
/**
 * Return every tree utility function with options partially applied.
 *
 * @param baseOptions
 */
function withOptions(baseOptions) {
    return {
        access: (node, indexPath) => (0, access_1.access)(node, indexPath, baseOptions),
        accessPath: (node, indexPath) => (0, access_1.accessPath)(node, indexPath, baseOptions),
        diagram: (node, getLabelOrOptions) => typeof getLabelOrOptions === 'function'
            ? (0, diagram_1.diagram)(node, Object.assign(Object.assign({}, baseOptions), { getLabel: getLabelOrOptions }))
            : (0, diagram_1.diagram)(node, Object.assign(Object.assign({}, baseOptions), getLabelOrOptions)),
        find: (node, predicateOrOptions) => typeof predicateOrOptions === 'function'
            ? (0, find_1.find)(node, Object.assign(Object.assign({}, baseOptions), { predicate: predicateOrOptions }))
            : (0, find_1.find)(node, Object.assign(Object.assign({}, baseOptions), predicateOrOptions)),
        findAll: (node, predicateOrOptions) => typeof predicateOrOptions === 'function'
            ? (0, find_1.findAll)(node, Object.assign(Object.assign({}, baseOptions), { predicate: predicateOrOptions }))
            : (0, find_1.findAll)(node, Object.assign(Object.assign({}, baseOptions), predicateOrOptions)),
        findIndexPath: (node, predicateOrOptions) => typeof predicateOrOptions === 'function'
            ? (0, find_1.findIndexPath)(node, Object.assign(Object.assign({}, baseOptions), { predicate: predicateOrOptions }))
            : (0, find_1.findIndexPath)(node, Object.assign(Object.assign({}, baseOptions), predicateOrOptions)),
        flat: (node) => (0, flat_1.flat)(node, baseOptions),
        flatMap: (node, transform) => (0, flatMap_1.flatMap)(node, Object.assign(Object.assign({}, baseOptions), { transform })),
        reduce: (node, nextResult, initialResult) => (0, reduce_1.reduce)(node, Object.assign(Object.assign({}, baseOptions), { nextResult, initialResult })),
        map: (node, transform) => (0, map_1.map)(node, Object.assign(Object.assign({}, baseOptions), { transform })),
        findAllIndexPaths: (node, predicateOrOptions) => typeof predicateOrOptions === 'function'
            ? (0, find_1.findAllIndexPaths)(node, Object.assign(Object.assign({}, baseOptions), { predicate: predicateOrOptions }))
            : (0, find_1.findAllIndexPaths)(node, Object.assign(Object.assign({}, baseOptions), predicateOrOptions)),
        visit: (node, onEnterOrOptions) => typeof onEnterOrOptions === 'function'
            ? (0, visit_1.visit)(node, Object.assign(Object.assign({}, baseOptions), { onEnter: onEnterOrOptions }))
            : (0, visit_1.visit)(node, Object.assign(Object.assign({}, baseOptions), onEnterOrOptions)),
    };
}
exports.withOptions = withOptions;
