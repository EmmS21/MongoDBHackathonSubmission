import { IndexPath } from './indexPath';
import { BaseOptions } from './options';
export declare const SKIP = "skip";
export declare const STOP = "stop";
export declare type EnterReturnValue = void | 'skip' | 'stop';
export declare type LeaveReturnValue = void | 'stop';
export declare type VisitOptions<T> = BaseOptions<T> & {
    onEnter?(node: T, indexPath: IndexPath): EnterReturnValue;
    onLeave?(node: T, indexPath: IndexPath): LeaveReturnValue;
};
/**
 * Visit each node in the tree, calling an optional `onEnter` and `onLeave` for each.
 *
 * From `onEnter`:
 *
 * - return nothing or `undefined` to continue
 * - return `"skip"` to skip the children of that node and the subsequent `onLeave`
 * - return `"stop"` to end traversal
 *
 * From `onLeave`:
 *
 * - return nothing or `undefined` to continue
 * - return `"stop"` to end traversal
 */
export declare function visit<T>(node: T, options: VisitOptions<T>): void;
