"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAllIndexPaths = exports.findIndexPath = exports.findAll = exports.find = void 0;
const visit_1 = require("./visit");
function find(node, options) {
    let found;
    (0, visit_1.visit)(node, Object.assign(Object.assign({}, options), { onEnter: (child, indexPath) => {
            if (options.predicate(child, indexPath)) {
                found = child;
                return visit_1.STOP;
            }
        } }));
    return found;
}
exports.find = find;
function findAll(node, options) {
    let found = [];
    (0, visit_1.visit)(node, {
        onEnter: (child, indexPath) => {
            if (options.predicate(child, indexPath)) {
                found.push(child);
            }
        },
        getChildren: options.getChildren,
    });
    return found;
}
exports.findAll = findAll;
/**
 * Find the `IndexPath` of a node matching a predicate function.
 */
function findIndexPath(node, options) {
    let found;
    (0, visit_1.visit)(node, {
        onEnter: (child, indexPath) => {
            if (options.predicate(child, indexPath)) {
                // Copy the indexPath, since indexPath may be mutated
                found = [...indexPath];
                return visit_1.STOP;
            }
        },
        getChildren: options.getChildren,
    });
    return found;
}
exports.findIndexPath = findIndexPath;
/**
 * Find the `IndexPath` of all nodes matching a predicate function.
 */
function findAllIndexPaths(node, options) {
    let found = [];
    (0, visit_1.visit)(node, {
        onEnter: (child, indexPath) => {
            if (options.predicate(child, indexPath)) {
                // Copy the indexPath, since indexPath may be mutated
                found.push([...indexPath]);
            }
        },
        getChildren: options.getChildren,
    });
    return found;
}
exports.findAllIndexPaths = findAllIndexPaths;
