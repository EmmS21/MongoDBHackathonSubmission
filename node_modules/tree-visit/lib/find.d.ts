import { IndexPath } from './indexPath';
import { BaseOptions } from './options';
export declare type FindOptions<T> = BaseOptions<T> & {
    /**
     * Return `true` to include this node in the results.
     */
    predicate: (node: T, indexPath: IndexPath) => boolean;
};
export declare type FindOptionsTyped<T, S extends T> = BaseOptions<T> & {
    /**
     * Return `true` to include this node in the results.
     */
    predicate: (node: T, indexPath: IndexPath) => node is S;
};
/**
 * Find a node matching a predicate function.
 */
export declare function find<T>(node: T, options: FindOptions<T>): T | undefined;
export declare function find<T, S extends T>(node: T, options: FindOptionsTyped<T, S>): S | undefined;
/**
 * Find all nodes matching a predicate function.
 */
export declare function findAll<T>(node: T, options: FindOptions<T>): T[];
export declare function findAll<T, S extends T>(node: T, options: FindOptionsTyped<T, S>): S[];
/**
 * Find the `IndexPath` of a node matching a predicate function.
 */
export declare function findIndexPath<T>(node: T, options: FindOptions<T>): IndexPath | undefined;
/**
 * Find the `IndexPath` of all nodes matching a predicate function.
 */
export declare function findAllIndexPaths<T>(node: T, options: FindOptions<T>): IndexPath[];
