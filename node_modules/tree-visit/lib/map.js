"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.map = void 0;
const visit_1 = require("./visit");
/**
 * Map each node into a new node.
 *
 * The shape of the tree remains the same. You can omit nodes from the tree by
 * filtering them out of the `transformedChildren` argument. The root can't be omitted.
 */
function map(node, options) {
    const childrenMap = {};
    (0, visit_1.visit)(node, Object.assign(Object.assign({}, options), { onLeave: (child, indexPath) => {
            var _a, _b;
            indexPath = [0, ...indexPath];
            const key = indexPath.join();
            const transformed = options.transform(child, (_a = childrenMap[key]) !== null && _a !== void 0 ? _a : [], indexPath);
            const parentKey = indexPath.slice(0, -1).join();
            const parentChildren = (_b = childrenMap[parentKey]) !== null && _b !== void 0 ? _b : [];
            parentChildren.push(transformed);
            childrenMap[parentKey] = parentChildren;
        } }));
    return childrenMap[''][0];
}
exports.map = map;
