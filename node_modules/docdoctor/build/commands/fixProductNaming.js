"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixProductNaming = void 0;
var fs_1 = require("fs");
var restructured_1 = __importDefault(require("../restructured"));
var magic_string_1 = __importDefault(require("magic-string"));
var tree_1 = require("../tree");
var loadSnootyConfig_1 = require("../loadSnootyConfig");
var replaceSourceConstants_1 = require("../replaceSourceConstants");
var assert_1 = require("assert");
var fixProductNaming = function (source, productPhrases, info) {
    var document = new magic_string_1.default(source);
    var rst = restructured_1.default.parse(document.original, {
        blanklines: true,
        indent: true,
        position: true,
    });
    var usageCounter = Array.from({ length: productPhrases.length }, function () { return 0; });
    // Track what has already been replaced so we don't replace something twice
    var replacedSpans = [];
    // Visit parent nodes, collate direct child text nodes to search for matches
    // even if they span hard newlines.
    try {
        (0, tree_1.visit)(rst, function (node) {
            if (node.children === undefined) {
                return;
            }
            var parentNode = node;
            var textNodes = parentNode.children.filter(function (node) { return node.type === "text"; });
            var mergedText = textNodes.reduce(function (acc, cur) { return acc + cur.value.replace(/\n/, " "); }, "");
            productPhrases.forEach(function (_a, productPhraseIndex) {
                var search = _a.search, first = _a.first, subsequent = _a.subsequent;
                var matches = __spreadArray([], __read(mergedText.matchAll(new RegExp(search, "g"))), false);
                matches.forEach(function (match) {
                    var _a;
                    (0, assert_1.strict)(match.index !== undefined);
                    // Offset in usageCounter array corresponds to index of productPhrases array
                    var replacer = usageCounter[productPhraseIndex]++ === 0 ? first : subsequent;
                    // Find starting node that contains the match. You can't trust node
                    // positions because they skip the indents which are not reflected in
                    // the combined text string.
                    var startIndex = match.index;
                    var startNodeIndex = textNodes.findIndex(function (_a) {
                        var value = _a.value;
                        if (startIndex < value.length) {
                            return true;
                        }
                        // startIndex becomes the starting index in the target text node
                        startIndex -= value.length;
                        return false;
                    });
                    (0, assert_1.strict)(startIndex >= 0, "Invalid startIndex ".concat(startIndex));
                    (0, assert_1.strict)(startNodeIndex !== -1, "startNode not found!");
                    // Now find the node that contains the end of string. This might be a
                    // different node if the search string spans multiple lines due to
                    // hard formatting.
                    var endIndex = match.index + match[0].length;
                    var endNodeIndex = textNodes.findIndex(function (_a) {
                        var value = _a.value;
                        if (endIndex <= value.length) {
                            return true;
                        }
                        // endIndex becomes the starting index in the target text node
                        endIndex -= value.length;
                        return false;
                    });
                    (0, assert_1.strict)(endIndex >= 0, "Invalid endIndex ".concat(startIndex));
                    (0, assert_1.strict)(endNodeIndex !== -1, "endNode not found!");
                    var matchContainingNodes = textNodes.slice(startNodeIndex, endNodeIndex + 1);
                    (0, assert_1.strict)(matchContainingNodes.length !== 0);
                    // There are cases where restructured 'forgets' the position and
                    // resets the offset to the first column of the line. Handle that here.
                    var firstOffsetInDocument = matchContainingNodes[0].position.start.offset + startIndex;
                    var firstOffsetCompensation = 0;
                    var substringLength = 5;
                    while (document.original.substring(firstOffsetInDocument + firstOffsetCompensation, firstOffsetInDocument +
                        firstOffsetCompensation +
                        substringLength) !== match[0].substring(0, substringLength) &&
                        firstOffsetInDocument + firstOffsetCompensation <
                            matchContainingNodes[0].position.end.offset) {
                        ++firstOffsetCompensation;
                    }
                    var spansToRemove = [];
                    // Delete match from span
                    if (matchContainingNodes.length === 1) {
                        // Entire match in one node
                        (0, assert_1.strict)(startIndex < endIndex);
                        var offset = matchContainingNodes[0].position.start.offset +
                            firstOffsetCompensation;
                        if (firstOffsetCompensation !== 0) {
                            console.log("Adjusting offset ".concat(firstOffsetCompensation, " for match: ").concat(match[0]));
                        }
                        spansToRemove.push([offset + startIndex, offset + endIndex]);
                    }
                    else {
                        // Spans two or more adjacent nodes
                        var first_1 = matchContainingNodes[0];
                        var last = matchContainingNodes[matchContainingNodes.length - 1];
                        var firstOffset = first_1.position.start.offset + firstOffsetCompensation;
                        var lastOffset = last.position.start.offset;
                        spansToRemove.push([
                            firstOffset + startIndex,
                            first_1.position.end.offset - 1,
                        ]);
                        var removedFromFirst = first_1.position.end.offset - (firstOffset + startIndex);
                        var leftToRemove = Math.max(match[0].length - removedFromFirst, 0);
                        if (matchContainingNodes.length > 2) {
                            // Delete everything from middle nodes
                            var firstEnd = first_1.position.end.offset;
                            var secondLastEnd = matchContainingNodes[matchContainingNodes.length - 2].position
                                .end.offset;
                            // Reconstruct indents
                            var indentLength = document.original
                                .substring(firstEnd, secondLastEnd)
                                .split("\n")
                                .map(function (line) { return /^\s+/.exec(line); })
                                .reduce(function (acc, cur) { return (cur === null ? acc : acc + cur[0].length); }, 0);
                            spansToRemove.push([firstEnd, secondLastEnd]);
                            leftToRemove -= secondLastEnd - firstEnd - indentLength;
                        }
                        if (leftToRemove <= 0) {
                            var path = (_a = info === null || info === void 0 ? void 0 : info.path) !== null && _a !== void 0 ? _a : "<unknown>";
                            throw new Error("Failed to process ".concat(path, ": invalid leftToRemove. This is probably due to inaccurate node positioning in the restructured library. Please edit this file manually."));
                        }
                        spansToRemove.push([lastOffset, lastOffset + leftToRemove]);
                    }
                    // Check that the match doesn't overlap a previous match.
                    var totalSpanStart = spansToRemove[0][0];
                    var totalSpanEnd = spansToRemove[spansToRemove.length - 1][1];
                    if (replacedSpans.find(function (_a) {
                        var _b = __read(_a, 2), start = _b[0], end = _b[1];
                        return ((start <= totalSpanStart && totalSpanStart < end) ||
                            (start <= totalSpanEnd && totalSpanEnd < end));
                    }) !== undefined) {
                        return;
                    }
                    replacedSpans.push([totalSpanStart, totalSpanEnd]);
                    spansToRemove.forEach(function (_a) {
                        var _b = __read(_a, 2), start = _b[0], end = _b[1];
                        document.remove(start, end);
                    });
                    // Insert replacement into first node
                    document.appendRight(matchContainingNodes[0].position.start.offset +
                        startIndex +
                        firstOffsetCompensation, replacer);
                });
            });
        });
    }
    catch (error) {
        console.error(error);
        return new magic_string_1.default(source); // Return unedited document
    }
    return document;
};
exports.fixProductNaming = fixProductNaming;
var fixProductNamingInFile = function (args) { return __awaiter(void 0, void 0, void 0, function () {
    var path, snootyConfig, fixProductNamingConfig, namesOfConstantsToExpand, productPhrases, constantsToExpand, rawText, expandedText, document;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                path = args.path, snootyConfig = args.snootyConfig, fixProductNamingConfig = args.fixProductNamingConfig;
                namesOfConstantsToExpand = fixProductNamingConfig.namesOfConstantsToExpand, productPhrases = fixProductNamingConfig.productPhrases;
                constantsToExpand = Object.fromEntries(namesOfConstantsToExpand
                    .map(function (name) { return [name, snootyConfig.constants[name]]; })
                    .filter(function (_a) {
                    var _b = __read(_a, 2), v = _b[1];
                    return v !== undefined;
                }));
                return [4 /*yield*/, fs_1.promises.readFile(path, "utf8")];
            case 1:
                rawText = _a.sent();
                expandedText = (0, replaceSourceConstants_1.replaceSourceConstants)(rawText, constantsToExpand);
                console.log("Visiting ".concat(path));
                document = (0, exports.fixProductNaming)(expandedText, productPhrases, { path: path });
                if (!document.hasChanged()) {
                    console.log("Visited ".concat(path, " -- no changes made"));
                    return [2 /*return*/];
                }
                console.log("Updating ".concat(path));
                return [4 /*yield*/, fs_1.promises.writeFile(path, document.toString(), "utf8")];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var loadFixProductNamingConfig = function (path) { return __awaiter(void 0, void 0, void 0, function () {
    var defaults, text, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                defaults = {
                    namesOfConstantsToExpand: [],
                    productPhrases: [],
                };
                if (path === undefined) {
                    return [2 /*return*/, __assign({}, defaults)];
                }
                return [4 /*yield*/, fs_1.promises.readFile(path, "utf8")];
            case 1:
                text = _a.sent();
                data = JSON.parse(text);
                return [2 /*return*/, __assign(__assign({}, defaults), data)];
        }
    });
}); };
var commandModule = {
    command: "fixProductNaming <paths..>",
    builder: function (args) {
        return args
            .positional("paths", { array: true, type: "string", demandOption: true })
            .string("snootyTomlPath")
            .string("fixProductNamingJsonPath");
    },
    handler: function (args) { return __awaiter(void 0, void 0, void 0, function () {
        var paths, snootyTomlPath, fixProductNamingJsonPath, snootyConfig_1, fixProductNamingConfig_1, promises, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 4, , 5]);
                    paths = args.paths, snootyTomlPath = args.snootyTomlPath, fixProductNamingJsonPath = args.fixProductNamingJsonPath;
                    return [4 /*yield*/, (0, loadSnootyConfig_1.loadSnootyConfig)(snootyTomlPath)];
                case 1:
                    snootyConfig_1 = _a.sent();
                    return [4 /*yield*/, loadFixProductNamingConfig(fixProductNamingJsonPath)];
                case 2:
                    fixProductNamingConfig_1 = _a.sent();
                    promises = paths.map(function (path) {
                        return fixProductNamingInFile({ path: path, snootyConfig: snootyConfig_1, fixProductNamingConfig: fixProductNamingConfig_1 });
                    });
                    return [4 /*yield*/, Promise.all(promises)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _a.sent();
                    console.error(error_1);
                    process.exit(1);
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    }); },
    describe: "Fix up rST",
};
exports.default = commandModule;
