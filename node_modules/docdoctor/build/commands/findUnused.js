"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findUnused = void 0;
var loadSnootyConfig_1 = require("../loadSnootyConfig");
var fs_1 = require("fs");
var Path = __importStar(require("path"));
var glob_1 = require("../glob");
var assert_1 = require("assert");
var readRstFile_1 = require("../readRstFile");
var tree_1 = require("../tree");
var restructured_1 = require("../restructured");
var File = /** @class */ (function () {
    function File(_a) {
        var rst = _a.rst, virtualPath = _a.virtualPath, realPath = _a.realPath, isDirectoryIndexFile = _a.isDirectoryIndexFile;
        var _this = this;
        this.scanned = false;
        // This .txt file is an index/TOC file for a directory. Count this as a
        // reference.
        this.isDirectoryIndexFile = false;
        this.connectionsIn = 0;
        this.connections = new Set();
        this.connect = function (file) {
            var sizeBefore = _this.connections.size;
            _this.connections.add(file);
            if (_this.connections.size !== sizeBefore) {
                ++file.connectionsIn;
            }
        };
        this.rst = rst;
        this.virtualPath = virtualPath;
        this.realPath = realPath;
        this.isDirectoryIndexFile = isDirectoryIndexFile;
    }
    Object.defineProperty(File.prototype, "referenceCount", {
        get: function () {
            return this.connectionsIn + (this.isDirectoryIndexFile ? 1 : 0);
        },
        enumerable: false,
        configurable: true
    });
    return File;
}());
var Graph = /** @class */ (function () {
    function Graph(basePath) {
        var _this = this;
        this.pathToFile = new Map();
        this.labelsToFile = new Map();
        this.indexFiles = [];
        this.scanQueue = [];
        this.scan = function (entrypointPath, options) { return __awaiter(_this, void 0, void 0, function () {
            var virtualEntry, path;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.loadFiles(options)];
                    case 1:
                        _b.sent();
                        virtualEntry = Path.join("/", entrypointPath).replace(/\.txt$/, "");
                        (_a = this.scanQueue).push.apply(_a, __spreadArray([virtualEntry], __read(this.indexFiles.map(function (_a) {
                            var virtualPath = _a.virtualPath;
                            return virtualPath;
                        })), false));
                        for (path = this.scanQueue.shift(); path !== undefined; path = this.scanQueue.shift()) {
                            this.innerScan(path);
                        }
                        this.rootFile = this.pathToFile.get(virtualEntry);
                        return [2 /*return*/];
                }
            });
        }); };
        this.loadFiles = function (options) { return __awaiter(_this, void 0, void 0, function () {
            var files, directories;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, glob_1.glob)(Path.join(this.basePath, "**/**"), __assign({}, options))];
                    case 1:
                        files = _a.sent();
                        directories = new Set();
                        return [4 /*yield*/, Promise.all(files.map(function (path) { return __awaiter(_this, void 0, void 0, function () {
                                var virtualPath, stat, isDirectoryIndexFile, file, rst;
                                var _this = this;
                                var _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            // TODO: Handle extracts. Snooty makes an `extracts-xyz.yaml` file
                                            // available as `extracts/xyz-something.rst`. For now, just leave them alone.
                                            if (/\/extracts-.*\.ya?ml$/.test(path)) {
                                                return [2 /*return*/];
                                            }
                                            virtualPath = Path.join("/", Path.relative(this.basePath, path))
                                                .replace(/\.txt$/, "")
                                                .toLowerCase();
                                            return [4 /*yield*/, fs_1.promises.stat(path)];
                                        case 1:
                                            stat = _b.sent();
                                            if (stat.isDirectory()) {
                                                // Keep track of directories, because we need to count them as
                                                // references to the corresponding index file (e.g. "sdk.txt" is the
                                                // index file/landing page for "sdk/")
                                                directories.add(virtualPath);
                                                return [2 /*return*/];
                                            }
                                            if (this.pathToFile.has(virtualPath)) {
                                                throw new Error("Virtual path collision: ".concat(virtualPath, " (from '").concat(path, "' and '").concat((_a = this.pathToFile.get(virtualPath)) === null || _a === void 0 ? void 0 : _a.realPath, "')"));
                                            }
                                            isDirectoryIndexFile = /\/index.txt$/.test(path) ||
                                                (/.txt$/.test(path) && directories.has(virtualPath));
                                            file = new File({
                                                virtualPath: virtualPath,
                                                realPath: path,
                                                isDirectoryIndexFile: isDirectoryIndexFile,
                                            });
                                            if (isDirectoryIndexFile) {
                                                this.indexFiles.push(file);
                                            }
                                            // Populate path-to-file lookup
                                            this.pathToFile.set(virtualPath, file);
                                            if (!/\.(txt|rst)$/.test(path)) return [3 /*break*/, 3];
                                            return [4 /*yield*/, (0, readRstFile_1.readRstFile)(path)];
                                        case 2:
                                            rst = (_b.sent()).rst;
                                            // Populate label-to-file lookup based on labels in the file
                                            (0, tree_1.findAll)(rst, function (node) { return node.type === "label"; }).forEach(function (_a) {
                                                var label = _a.label;
                                                _this.labelsToFile.set(label, file);
                                            });
                                            file.rst = rst;
                                            _b.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); }))];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.innerScan = function (path) {
            var file = _this.pathToFile.get(path);
            (0, assert_1.strict)(file, "File not found: ".concat(path));
            if (file.scanned) {
                return;
            }
            file.scanned = true;
            var rst = file.rst;
            if (rst === undefined) {
                return;
            }
            (0, tree_1.visit)(rst, function (node) {
                switch (node.type) {
                    case "directive":
                        return _this.handleDirective(node, file);
                    case "interpreted_text":
                        if (["ref", "doc"].includes(node.role)) {
                            return _this.handleInlineLink(node, file);
                        }
                        return;
                }
            });
        };
        this.handleDirective = function (node, file) {
            switch (node.directive) {
                case "toctree":
                    return _this.handleToctree(node, file);
                case "card":
                    return _this.handleCard(node, file);
                case "include":
                case "input":
                case "output":
                case "literalinclude":
                case "image":
                case "figure":
                case "openapi":
                    // Direct argument = virtual path to file
                    return _this.handleInclude(node, file);
            }
        };
        this.handleToctree = function (node, file) {
            (0, restructured_1.getInnerText)(node)
                .split("\n")
                .filter(function (line) { return line.trim() !== ""; })
                .forEach(function (line) {
                var matches = /^.*<(.*)>\s*$/.exec(line);
                if (matches === null) {
                    // Here assume the entry is just the link
                    _this.connect(file, line.trim());
                    return;
                }
                // Toctree entries might have trailing .txt or /
                var target = matches[1].replace(/\/$/, "").replace(/\.txt$/, "");
                _this.connect(file, target);
            });
        };
        this.handleCard = function (node, file) {
            var _a;
            var icon = (_a = node.optionLines) === null || _a === void 0 ? void 0 : _a.reduce(function (result, line) {
                if (result !== undefined) {
                    return result;
                }
                var matches = /:icon: (.*)$/.exec(line);
                return matches ? matches[1] : undefined;
            }, undefined);
            if (icon === undefined) {
                return;
            }
            _this.connect(file, icon);
        };
        this.handleInclude = function (node, file) {
            var target = node.args;
            if (target === undefined) {
                return;
            }
            _this.connect(file, target);
        };
        this.handleInlineLink = function (node, file) {
            var map = node.role === "ref" ? _this.labelsToFile : _this.pathToFile;
            _this.connect(file, node.target, map);
        };
        this.basePath = basePath;
    }
    Graph.prototype.connect = function (file, targetIn, map) {
        if (map === void 0) { map = this.pathToFile; }
        var target = targetIn.toLowerCase();
        var targetFile = map.get(target);
        if (!targetFile) {
            return;
        }
        file.connect(targetFile);
        this.scanQueue.push(targetFile.virtualPath);
    };
    return Graph;
}());
var findUnused = function (_a) {
    var path = _a.path, ignore = _a.ignore;
    return __awaiter(void 0, void 0, void 0, function () {
        var graph, entryPointPath, rootFile, unusedFilePaths;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    graph = new Graph(path);
                    entryPointPath = "index.txt";
                    return [4 /*yield*/, graph.scan(entryPointPath, { ignore: ignore })];
                case 1:
                    _b.sent();
                    rootFile = graph.rootFile;
                    unusedFilePaths = Array.from(graph.pathToFile.values())
                        .filter(function (file) { return file !== rootFile && file.referenceCount === 0; })
                        .map(function (_a) {
                        var realPath = _a.realPath;
                        return realPath;
                    });
                    return [2 /*return*/, unusedFilePaths];
            }
        });
    });
};
exports.findUnused = findUnused;
var commandModule = {
    command: "findUnused <path>",
    builder: function (args) {
        return args
            .positional("path", { array: false, type: "string", demandOption: true })
            .option("snootyTomlPath", { type: "string" })
            .option("ignore", { type: "string" });
    },
    handler: function (args) { return __awaiter(void 0, void 0, void 0, function () {
        var path, snootyTomlPath, ignore, snootyConfig, unusedFilePaths, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    path = args.path, snootyTomlPath = args.snootyTomlPath, ignore = args.ignore;
                    return [4 /*yield*/, (0, loadSnootyConfig_1.loadSnootyConfig)(snootyTomlPath)];
                case 1:
                    snootyConfig = _a.sent();
                    return [4 /*yield*/, (0, exports.findUnused)({ path: path, snootyConfig: snootyConfig, ignore: ignore })];
                case 2:
                    unusedFilePaths = _a.sent();
                    unusedFilePaths.forEach(function (v) { return console.log(v); });
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    console.error(error_1);
                    process.exit(1);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); },
    describe: "Find unused files in source",
};
exports.default = commandModule;
