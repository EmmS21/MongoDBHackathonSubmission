"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fixTitles = void 0;
var fs_1 = require("fs");
var restructured_1 = __importDefault(require("../restructured"));
var magic_string_1 = __importDefault(require("magic-string"));
var tree_1 = require("../tree");
var assert_1 = require("assert");
var loadSnootyConfig_1 = require("../loadSnootyConfig");
var replaceSourceConstants_1 = require("../replaceSourceConstants");
// https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#sections
// Note: = reused, but uses top title for first section depth
// See also "Inline Markup" slide: https://docs.google.com/presentation/d/125-MvuDr66EIUgb3bVWCX3Uh2Jj2MkM8kM0iM_JoOuA/edit#slide=id.g62b8cdf916_1_101
var titleAdornmentCharacters = ["=", "-", "~", "`", "+", "_", "="];
var fixTitles = function (args) {
    var path = args.path, rst = args.rst, document = args.document, snootyConfig = args.snootyConfig;
    var sectionDepth = 1;
    (0, tree_1.visit)(rst, function (node) {
        switch (node.type) {
            case "section":
                sectionDepth = node.depth;
                if (!(1 <= sectionDepth && sectionDepth < titleAdornmentCharacters.length)) {
                    throw new Error("Invalid section depth: ".concat(sectionDepth));
                }
                break;
            case "title": {
                var innerNodes = (0, tree_1.findAll)(node, function (node) { return node.type !== "title"; });
                if (innerNodes.length < 1) {
                    throw new Error("In ".concat(path, ", not at least 1 inner node found in title. Not sure how to handle that!"));
                }
                var text = innerNodes.map(function (node) { return node.value; }).join("");
                if (/\n/.test(text)) {
                    throw new Error("In ".concat(path, ", found multiline title. Not sure how to handle that! Text: '").concat(text, "'"));
                }
                // Find the total length of the title by looking at the minimum start
                // and maximum end position of the inner text nodes. We'll then add the
                // length gained by source constant expansions.
                var minStartOffset = node.children.reduce(function (minStartOffset, textNode) {
                    var offset = textNode.position.start.offset;
                    return Math.min(offset, minStartOffset);
                }, node.position.end.offset);
                var maxEndOffset = node.children.reduce(function (maxEndOffset, textNode) {
                    var offset = textNode.position.end.offset;
                    return Math.max(offset, maxEndOffset);
                }, node.position.start.offset);
                (0, assert_1.strict)(minStartOffset <= maxEndOffset, "Invalid min start and max end offsets in ".concat(path));
                var expandedText = (0, replaceSourceConstants_1.replaceSourceConstants)(text, snootyConfig.constants);
                // This can be negative if the expansions are actually shorter than the
                // source constant. Either way, we'll add the difference to the total
                // length.
                var lengthDelta = expandedText.length - text.length;
                var actualTextLength = maxEndOffset - minStartOffset + lengthDelta;
                (0, assert_1.strict)(actualTextLength >= 0, "Invalid actual text length after expansion in ".concat(path));
                // Take the original contents of the title, with rST markup and source
                // constants
                var rawTextRst = document
                    .snip(minStartOffset, maxEndOffset)
                    .toString();
                // Build the appropriately-sized title line
                var titleLine = titleAdornmentCharacters[sectionDepth - 1].repeat(actualTextLength);
                // Build the new title node's raw text. If the heading level is 1 (page
                // title), adorn the title on both the top and the bottom.
                var modifiedTitle = "".concat(sectionDepth === 1 ? "".concat(titleLine, "\n") : "").concat(rawTextRst, "\n").concat(titleLine, "\n");
                // Replace the original title node raw text with the new title raw text.
                var _a = node.position, start = _a.start, end = _a.end;
                document.overwrite(start.offset, end.offset, modifiedTitle);
            }
        }
    });
};
exports.fixTitles = fixTitles;
var fixup = function (args) { return __awaiter(void 0, void 0, void 0, function () {
    var path, snootyConfig, rawText, document, rst;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                path = args.path, snootyConfig = args.snootyConfig;
                return [4 /*yield*/, fs_1.promises.readFile(path, "utf8")];
            case 1:
                rawText = _a.sent();
                document = new magic_string_1.default(rawText);
                rst = restructured_1.default.parse(document.original, {
                    blanklines: true,
                    indent: true,
                    position: true,
                });
                (0, exports.fixTitles)({
                    path: path,
                    document: document,
                    rst: rst,
                    snootyConfig: snootyConfig,
                });
                if (!document.hasChanged()) {
                    console.log("Visited ".concat(path, " -- no changes made"));
                    return [2 /*return*/];
                }
                console.log("Updating ".concat(path));
                return [4 /*yield*/, fs_1.promises.writeFile(path, document.toString(), "utf8")];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var commandModule = {
    command: "fixup <paths..>",
    builder: function (args) {
        return args
            .positional("paths", { array: true, type: "string", demandOption: true })
            .string("snootyTomlPath");
    },
    handler: function (args) { return __awaiter(void 0, void 0, void 0, function () {
        var paths, snootyTomlPath, snootyConfig_1, promises, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, , 4]);
                    paths = args.paths, snootyTomlPath = args.snootyTomlPath;
                    return [4 /*yield*/, (0, loadSnootyConfig_1.loadSnootyConfig)(snootyTomlPath)];
                case 1:
                    snootyConfig_1 = _a.sent();
                    promises = paths.map(function (path) { return fixup({ path: path, snootyConfig: snootyConfig_1 }); });
                    return [4 /*yield*/, Promise.all(promises)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    console.error(error_1);
                    process.exit(1);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    }); },
    describe: "Fix up rST",
};
exports.default = commandModule;
