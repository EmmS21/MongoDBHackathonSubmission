import restructured, { AnyNode, ValueNode, ParentNode } from "restructured";
export declare type TextNode = ValueNode & {
    type: "text";
};
export declare type DirectiveNode = ParentNode & {
    type: "directive";
    directive: string;
    args?: string;
    optionLines?: string[];
};
export declare type InlineLinkNode = ParentNode & {
    type: "interpreted_text";
    role: "ref" | "doc";
    target: string;
};
export declare type ReferenceNode = ParentNode & {
    type: "reference";
    target: string;
};
export declare type LabelNode = ParentNode & {
    type: "label";
    label: string;
};
export declare const getInnerText: (node: AnyNode) => string;
export declare const parse: (rst: string, options?: {
    position?: boolean | undefined;
    indent?: boolean | undefined;
    blanklines?: boolean | undefined;
    depth?: number | undefined;
} | undefined) => AnyNode;
export { AnyNode, Location, Node, ParentNode, ValueNode } from "restructured";
declare const _default: {
    parse: (rst: string, options?: {
        position?: boolean | undefined;
        indent?: boolean | undefined;
        blanklines?: boolean | undefined;
        depth?: number | undefined;
    } | undefined) => restructured.AnyNode;
};
export default _default;
//# sourceMappingURL=restructured.d.ts.map