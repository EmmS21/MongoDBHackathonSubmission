"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.visit = exports.findAll = void 0;
var tv = __importStar(require("tree-visit"));
var getChildren = function (node) { var _a; return (_a = node.children) !== null && _a !== void 0 ? _a : []; };
var findAll = function (node, predicate) {
    return tv.findAll(node, {
        getChildren: getChildren,
        predicate: predicate,
    });
};
exports.findAll = findAll;
var visit = function (node, onEnter, onLeave) {
    tv.visit(node, {
        getChildren: getChildren,
        onEnter: onEnter,
        onLeave: onLeave !== null && onLeave !== void 0 ? onLeave : (function () {
            // do nothing -- see https://github.com/dabbott/tree-visit/pull/12
        }),
    });
};
exports.visit = visit;
